!	slime/contrib/swank-kawa.scm	/^(define-syntax !$/;"	f
!!	slime/contrib/swank-kawa.scm	/^(define-syntax !!$/;"	f
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
"CL-PPCRE"	practicals-1.0.3/libraries/cl-ppcre-1.2.3/packages.lisp	/^(defpackage "CL-PPCRE"$/;"	f
"CL-PPCRE-TEST"	practicals-1.0.3/libraries/cl-ppcre-1.2.3/packages.lisp	/^(defpackage "CL-PPCRE-TEST"$/;"	f
"MONITOR"	slime/metering.lisp	/^(defpackage "MONITOR" (:nicknames "MON") (:use "COMMON-LISP")$/;"	f
"tmpnam"	slime/swank-sbcl.lisp	/^(sb-alien:define-alien-routine "tmpnam" sb-alien:c-string$/;"	f
#:cl-ppcre	practicals-1.0.3/libraries/cl-ppcre-1.2.3/packages.lisp	/^(defpackage #:cl-ppcre$/;"	f
#:cl-ppcre-test	practicals-1.0.3/libraries/cl-ppcre-1.2.3/packages.lisp	/^(defpackage #:cl-ppcre-test$/;"	f
%condition-type/name	slime/contrib/swank-mit-scheme.scm	/^(define %condition-type\/name$/;"	f
%eval-region	slime/contrib/swank-listener-hooks.lisp	/^(defun %eval-region (string)$/;"	f
%find-declaration-operator	slime/contrib/swank-arglists.lisp	/^(defun %find-declaration-operator (raw-specs position)$/;"	f
%frame-count-vars	slime/swank-clisp.lisp	/^(defun %frame-count-vars (frame)$/;"	f
%frame-var-name	slime/swank-clisp.lisp	/^(defun %frame-var-name (frame i)$/;"	f
%frame-var-value	slime/swank-clisp.lisp	/^(defun %frame-var-value (frame i)$/;"	f
%fuzzy-extract-matching-info	slime/contrib/swank-fuzzy.lisp	/^(defun %fuzzy-extract-matching-info (fuzzy-matching user-input-string)$/;"	f
%guess-sort-duration	slime/contrib/swank-fuzzy.lisp	/^(defun %guess-sort-duration (length)$/;"	f
%listener-eval	slime/contrib/swank-listener-hooks.lisp	/^(defun %listener-eval (string)$/;"	f
%make-duplicate-symbols-filter	slime/contrib/swank-fuzzy.lisp	/^(defun %make-duplicate-symbols-filter (fuzzy-package-matchings)$/;"	f
%make-package-symbols-container	slime/contrib/swank-fancy-inspector.lisp	/^(defun %make-package-symbols-container (&key title description symbols)$/;"	f
%parse-stack-values	slime/swank-clisp.lisp	/^(defun %parse-stack-values (frame)$/;"	f
%print-slime-output-stream	slime/swank-cmucl.lisp	/^(defun %print-slime-output-stream (s stream d)$/;"	f
%search-coding	slime/swank-backend.lisp	/^(defun %search-coding (str start end)$/;"	f
%symbol->string	slime/contrib/swank-mit-scheme.scm	/^(define %symbol->string symbol-name)$/;"	f
*	slime/xref.lisp	/^(define-caller-pattern * (form (:star form)) :lisp)$/;"	f
**---**	chiglug-macros/presentation.lisp	/^(defun **---** (a)$/;"	f
*MONITOR-CONS-OVERHEAD*	slime/metering.lisp	/^(defvar *MONITOR-CONS-OVERHEAD* nil$/;"	f
*MONITOR-TIME-OVERHEAD*	slime/metering.lisp	/^(defvar *MONITOR-TIME-OVERHEAD* nil$/;"	f
*TOTAL-CALLS*	slime/metering.lisp	/^(defvar *TOTAL-CALLS* 0$/;"	f
*TOTAL-CONS*	slime/metering.lisp	/^(defvar *TOTAL-CONS* 0$/;"	f
*TOTAL-TIME*	slime/metering.lisp	/^(defvar *TOTAL-TIME* 0$/;"	f
*abcl-signaled-conditions*	slime/swank-abcl.lisp	/^(defvar *abcl-signaled-conditions*)$/;"	f
*active-threads*	slime/swank.lisp	/^(defvar *active-threads* '())$/;"	f
*after-init-hook*	slime/swank.lisp	/^(defvar *after-init-hook* '()$/;"	f
*allow-quoting*	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<br><a class=none name="*allow-quoting*"><b>*allow-quoting*<\/b><\/a>$/;"	a
*allow-quoting*	practicals-1.0.3/libraries/cl-ppcre-1.2.3/specials.lisp	/^(defvar *allow-quoting* nil$/;"	f
*application-hints-tables*	slime/contrib/swank-indentation.lisp	/^(defvar *application-hints-tables* '()$/;"	f
*applyhook*	slime/xref.lisp	/^(define-variable-pattern *applyhook* :lisp)$/;"	f
*architecture-features*	slime/swank-loader.lisp	/^(defparameter *architecture-features*$/;"	f
*arglist-pprint-bindings*	slime/contrib/swank-arglists.lisp	/^(defvar *arglist-pprint-bindings*$/;"	f
*attribute-escapes*	practicals-1.0.3/Chapter31/html.lisp	/^(defparameter *attribute-escapes* "<>&\\"'")$/;"	f
*auto-abbreviate-dotted-packages*	slime/swank.lisp	/^(defvar *auto-abbreviate-dotted-packages* t$/;"	f
*auto-flush-streams*	slime/swank-abcl.lisp	/^(defvar *auto-flush-streams* '())$/;"	f
*auto-flush-thread*	slime/swank-abcl.lisp	/^(defvar *auto-flush-thread* nil)$/;"	f
*backtrace*	slime/swank-ecl.lisp	/^(defvar *backtrace* '())$/;"	f
*backtrace-printer-bindings*	slime/swank.lisp	/^(defvar *backtrace-printer-bindings*$/;"	f
*bigger-grammar*	paip/aip_ch2.lisp	/^(defparameter *bigger-grammar*$/;"	f
*block-elements*	practicals-1.0.3/Chapter31/html.lisp	/^(defparameter *block-elements*$/;"	f
*break-in-sldb*	slime/swank-openmcl.lisp	/^(defvar *break-in-sldb* t)$/;"	f
*break-on-signals*	slime/xref.lisp	/^(define-variable-pattern *break-on-signals* :lisp2)$/;"	f
*break-on-warnings*	slime/xref.lisp	/^(define-variable-pattern *break-on-warnings* :lisp)$/;"	f
*breakpoint-pc*	slime/swank-cmucl.lisp	/^(defvar *breakpoint-pc*)$/;"	f
*breakpoint-pc*	slime/swank-scl.lisp	/^(defvar *breakpoint-pc*)$/;"	f
*breakpoint-sigcontext*	slime/swank-cmucl.lisp	/^(defvar *breakpoint-sigcontext*)$/;"	f
*breakpoint-sigcontext*	slime/swank-scl.lisp	/^(defvar *breakpoint-sigcontext*)$/;"	f
*buffer-name*	slime/swank-abcl.lisp	/^(defvar *buffer-name* nil)$/;"	f
*buffer-name*	slime/swank-allegro.lisp	/^(defvar *buffer-name* nil)$/;"	f
*buffer-name*	slime/swank-clisp.lisp	/^(defvar *buffer-name* nil)$/;"	f
*buffer-name*	slime/swank-cmucl.lisp	/^(defvar *buffer-name* nil$/;"	f
*buffer-name*	slime/swank-corman.lisp	/^(defvar *buffer-name* nil)$/;"	f
*buffer-name*	slime/swank-ecl.lisp	/^(defvar *buffer-name* nil)$/;"	f
*buffer-name*	slime/swank-openmcl.lisp	/^(defvar *buffer-name* nil)$/;"	f
*buffer-name*	slime/swank-sbcl.lisp	/^(defvar *buffer-name* nil)$/;"	f
*buffer-name*	slime/swank-scl.lisp	/^(defvar *buffer-name* nil$/;"	f
*buffer-offset*	slime/swank-clisp.lisp	/^(defvar *buffer-offset*)$/;"	f
*buffer-offset*	slime/swank-openmcl.lisp	/^(defvar *buffer-offset* nil)$/;"	f
*buffer-offset*	slime/swank-sbcl.lisp	/^(defvar *buffer-offset*)$/;"	f
*buffer-package*	slime/contrib/swank-mit-scheme.scm	/^(define *buffer-package* #f)$/;"	f
*buffer-package*	slime/swank.lisp	/^(define-special *buffer-package*     $/;"	f
*buffer-position*	slime/swank-corman.lisp	/^(defvar *buffer-position*)$/;"	f
*buffer-readtable*	slime/swank.lisp	/^(define-special *buffer-readtable*$/;"	f
*buffer-start-position*	slime/swank-abcl.lisp	/^(defvar *buffer-start-position*)$/;"	f
*buffer-start-position*	slime/swank-allegro.lisp	/^(defvar *buffer-start-position*)$/;"	f
*buffer-start-position*	slime/swank-cmucl.lisp	/^(defvar *buffer-start-position* nil)$/;"	f
*buffer-start-position*	slime/swank-ecl.lisp	/^(defvar *buffer-start-position*)$/;"	f
*buffer-start-position*	slime/swank-scl.lisp	/^(defvar *buffer-start-position* nil)$/;"	f
*buffer-string*	slime/swank-abcl.lisp	/^(defvar *buffer-string*)$/;"	f
*buffer-string*	slime/swank-allegro.lisp	/^(defvar *buffer-string*)$/;"	f
*buffer-string*	slime/swank-corman.lisp	/^(defvar *buffer-string*)$/;"	f
*buffer-string*	slime/swank-ecl.lisp	/^(defvar *buffer-string*)$/;"	f
*buffer-substring*	slime/swank-cmucl.lisp	/^(defvar *buffer-substring* nil)$/;"	f
*buffer-substring*	slime/swank-sbcl.lisp	/^(defvar *buffer-substring* nil)$/;"	f
*buffer-substring*	slime/swank-scl.lisp	/^(defvar *buffer-substring* nil)$/;"	f
*cache-sourcecode*	slime/swank-source-file-cache.lisp	/^(defvar *cache-sourcecode* t$/;"	f
*callees-database*	slime/xref.lisp	/^(defvar *callees-database* (make-hash-table :test #'equal)$/;"	f
*callees-database-includes-variables*	slime/xref.lisp	/^(defvar *callees-database-includes-variables* nil)$/;"	f
*caller-pattern-table*	slime/xref.lisp	/^(defvar *caller-pattern-table* (make-hash-table :test #'equal)$/;"	f
*callers-database*	slime/xref.lisp	/^(defvar *callers-database* (make-hash-table :test #'equal)$/;"	f
*canonical-package-nicknames*	slime/swank.lisp	/^(defvar *canonical-package-nicknames*$/;"	f
*cl-ppcre-test-base-directory*	practicals-1.0.3/libraries/cl-ppcre-1.2.3/ppcre-tests.lisp	/^(defparameter *cl-ppcre-test-base-directory*$/;"	f
*coding-system*	slime/swank.lisp	/^(defvar *coding-system* "iso-latin-1-unix")$/;"	f
*communication-style*	slime/swank.lisp	/^(defvar *communication-style* (preferred-communication-style))$/;"	f
*compile-file-pathname*	slime/xref.lisp	/^(define-variable-pattern *compile-file-pathname* :lisp2)$/;"	f
*compile-file-truename*	slime/xref.lisp	/^(define-variable-pattern *compile-file-truename* :lisp2)$/;"	f
*compile-filename*	slime/swank-abcl.lisp	/^(defvar *compile-filename*)$/;"	f
*compile-filename*	slime/swank-allegro.lisp	/^(defvar *compile-filename* nil)$/;"	f
*compile-filename*	slime/swank-corman.lisp	/^(defvar *compile-filename* nil)$/;"	f
*compile-filename*	slime/swank-ecl.lisp	/^(defvar *compile-filename*)$/;"	f
*compile-print*	slime/xref.lisp	/^(define-variable-pattern *compile-print* :lisp2)$/;"	f
*compile-verbose*	slime/xref.lisp	/^(define-variable-pattern *compile-verbose* :lisp2)$/;"	f
*configure-emacs-indentation*	slime/swank.lisp	/^(defvar *configure-emacs-indentation* t$/;"	f
*connection-closed-hook*	slime/swank.lisp	/^(defvar *connection-closed-hook* '()$/;"	f
*connections*	slime/swank.lisp	/^(defvar *connections* '()$/;"	f
*contribs*	slime/swank-loader.lisp	/^(defvar *contribs* '(swank-c-p-c swank-arglists swank-fuzzy$/;"	f
*corpus*	practicals-1.0.3/Chapter23/spam.lisp	/^(defparameter *corpus* (make-array 1000 :adjustable t :fill-pointer 0))$/;"	f
*db*	db.lisp	/^(defvar *db* nil)$/;"	f
*db*	practicals-1.0.3/Chapter03/simple-database.lisp	/^(defvar *db* nil)$/;"	f
*debootstrap-packages*	slime/swank-sbcl.lisp	/^(defvar *debootstrap-packages* t)$/;"	f
*debug-definition-finding*	slime/swank-cmucl.lisp	/^(defvar *debug-definition-finding* nil$/;"	f
*debug-definition-finding*	slime/swank-sbcl.lisp	/^(defvar *debug-definition-finding* nil$/;"	f
*debug-definition-finding*	slime/swank-scl.lisp	/^(defvar *debug-definition-finding* nil$/;"	f
*debug-io*	slime/xref.lisp	/^(define-variable-pattern *debug-io* :lisp)$/;"	f
*debug-on-swank-error*	slime/swank.lisp	/^(defvar *debug-on-swank-error* nil$/;"	f
*debugger-hook*	slime/xref.lisp	/^(define-variable-pattern *debugger-hook* :lisp2)$/;"	f
*dedicated-output-stream-buffering*	slime/swank.lisp	/^(defvar *dedicated-output-stream-buffering* $/;"	f
*dedicated-output-stream-port*	slime/swank.lisp	/^(defvar *dedicated-output-stream-port* 0$/;"	f
*default-graphing-mode*	slime/xref.lisp	/^(defvar *default-graphing-mode* :call-graph$/;"	f
*default-pathname-defaults*	slime/xref.lisp	/^(define-variable-pattern *default-pathname-defaults* :lisp)$/;"	f
*default-table-size*	practicals-1.0.3/Chapter27/database.lisp	/^(defparameter *default-table-size* 100)$/;"	f
*default-worker-thread-bindings*	slime/swank.lisp	/^(defvar *default-worker-thread-bindings* '()$/;"	f
*definition-types*	slime/swank-sbcl.lisp	/^(defparameter *definition-types*$/;"	f
*dont-close*	slime/swank.lisp	/^(defvar *dont-close* nil$/;"	f
*echo-area-prefix*	slime/swank.lisp	/^(defvar *echo-area-prefix* "=> "$/;"	f
*element-escapes*	practicals-1.0.3/Chapter31/html.lisp	/^(defparameter *element-escapes* "<>&")$/;"	f
*emacs-connection*	slime/swank.lisp	/^(defvar *emacs-connection* nil$/;"	f
*empty-elements*	practicals-1.0.3/Chapter31/html.lisp	/^(defparameter *empty-elements*$/;"	f
*empty-playlist-song*	practicals-1.0.3/Chapter29/playlist.lisp	/^(defparameter *empty-playlist-song* (make-silent-song "Playlist empty."))$/;"	f
*enable-event-history*	slime/swank.lisp	/^(defvar *enable-event-history* t)$/;"	f
*enable-presenting-readable-objects*	slime/contrib/swank-presentation-streams.lisp	/^(defvar *enable-presenting-readable-objects* t$/;"	f
*end-of-playlist-song*	practicals-1.0.3/Chapter29/playlist.lisp	/^(defparameter *end-of-playlist-song* (make-silent-song "At end of playlist."))$/;"	f
*end-pos*	practicals-1.0.3/libraries/cl-ppcre-1.2.3/specials.lisp	/^(defvar *end-pos* 0$/;"	f
*end-string-pos*	practicals-1.0.3/libraries/cl-ppcre-1.2.3/specials.lisp	/^(defvar *end-string-pos* nil$/;"	f
*error-output*	slime/xref.lisp	/^(define-variable-pattern *error-output* :lisp)$/;"	f
*escapes*	practicals-1.0.3/Chapter31/html.lisp	/^(defvar *escapes* *element-escapes*)$/;"	f
*estimated-total-overhead*	slime/metering.lisp	/^(defvar *estimated-total-overhead* 0)$/;"	f
*evalhook*	slime/xref.lisp	/^(define-variable-pattern *evalhook* :lisp)$/;"	f
*event-history*	slime/swank.lisp	/^(defvar *event-history* (make-array 40 :initial-element nil)$/;"	f
*event-history-index*	slime/swank.lisp	/^(defvar *event-history-index* 0)$/;"	f
*existing-encapsulations*	slime/metering.lisp	/^(defvar *existing-encapsulations* (make-hash-table :test #'equal))$/;"	f
*extended-mode-p*	practicals-1.0.3/libraries/cl-ppcre-1.2.3/specials.lisp	/^(defvar *extended-mode-p* nil$/;"	f
*external-format-to-coding-system*	slime/swank-allegro.lisp	/^(defvar *external-format-to-coding-system*$/;"	f
*external-format-to-coding-system*	slime/swank-clisp.lisp	/^(defvar *external-format-to-coding-system*$/;"	f
*external-format-to-coding-system*	slime/swank-cmucl.lisp	/^(defvar *external-format-to-coding-system*$/;"	f
*external-format-to-coding-system*	slime/swank-lispworks.lisp	/^(defvar *external-format-to-coding-system*$/;"	f
*external-format-to-coding-system*	slime/swank-openmcl.lisp	/^(defvar *external-format-to-coding-system*$/;"	f
*external-format-to-coding-system*	slime/swank-sbcl.lisp	/^(defvar *external-format-to-coding-system*$/;"	f
*external-format-to-coding-system*	slime/swank-scl.lisp	/^(defvar *external-format-to-coding-system*$/;"	f
*fasl-directory*	slime/swank-loader.lisp	/^(defvar *fasl-directory* (default-fasl-dir)$/;"	f
*feature-database*	practicals-1.0.3/Chapter23/spam.lisp	/^(defvar *feature-database* (make-hash-table :test #'equal))$/;"	f
*features*	slime/xref.lisp	/^(define-variable-pattern *features* :lisp)$/;"	f
*file-callers-database*	slime/xref.lisp	/^(defvar *file-callers-database* (make-hash-table :test #'equal)$/;"	f
*find-module*	slime/swank.lisp	/^(defvar *find-module* 'find-module$/;"	f
*frame-prefixes*	slime/swank-clisp.lisp	/^(defvar *frame-prefixes*$/;"	f
*frame-trace*	slime/swank-corman.lisp	/^(defvar *frame-trace* nil)$/;"	f
*full-list*	sudoku/sudoku.lisp	/^(defvar *full-list* '(1 2 3 4 5 6 7 8 9))$/;"	f
*fuzzy-completion-symbol-prefixes*	slime/contrib/swank-fuzzy.lisp	/^(defparameter *fuzzy-completion-symbol-prefixes* "*+-%&?<"$/;"	f
*fuzzy-completion-symbol-suffixes*	slime/contrib/swank-fuzzy.lisp	/^(defparameter *fuzzy-completion-symbol-suffixes* "*+->"$/;"	f
*fuzzy-completion-word-separators*	slime/contrib/swank-fuzzy.lisp	/^(defparameter *fuzzy-completion-word-separators* "-\/."$/;"	f
*fuzzy-recursion-soft-limit*	slime/contrib/swank-fuzzy.lisp	/^(defparameter *fuzzy-recursion-soft-limit* 30$/;"	f
*gc-start-time*	slime/swank-cmucl.lisp	/^(defvar *gc-start-time* 0)$/;"	f
*gensym-counter*	slime/xref.lisp	/^(define-variable-pattern *gensym-counter* :lisp2)$/;"	f
*gf-method-getter*	slime/contrib/swank-fancy-inspector.lisp	/^(defvar *gf-method-getter* 'methods-by-applicability$/;"	f
*global-debugger*	slime/swank.lisp	/^(defvar *global-debugger* t$/;"	f
*global-get-mirror*	slime/contrib/swank-kawa.scm	/^(define-variable *global-get-mirror* #!null)$/;"	f
*global-get-raw*	slime/contrib/swank-kawa.scm	/^(define-variable *global-get-raw* #!null)$/;"	f
*global-set-mirror*	slime/contrib/swank-kawa.scm	/^(define-variable *global-set-mirror* #!null)$/;"	f
*global-set-raw*	slime/contrib/swank-kawa.scm	/^(define-variable *global-set-raw* #!null)$/;"	f
*global-stdio-connection*	slime/swank.lisp	/^(defvar *global-stdio-connection* nil$/;"	f
*globally-redirect-io*	slime/swank.lisp	/^(defvar *globally-redirect-io* nil$/;"	f
*grammar*	paip/aip_ch2.lisp	/^(defvar *grammar* *simple-grammar*$/;"	f
*gray-stream-symbols*	slime/swank-backend.lisp	/^(defvar *gray-stream-symbols*$/;"	f
*handle-function-forms*	slime/xref.lisp	/^(defvar *handle-function-forms* t$/;"	f
*handle-macro-forms*	slime/xref.lisp	/^(defvar *handle-macro-forms* t$/;"	f
*handle-package-forms*	slime/xref.lisp	/^(defvar *handle-package-forms* nil	;'(lisp::in-package)$/;"	f
*html-output*	practicals-1.0.3/Chapter31/html.lisp	/^(defvar *html-output* *standard-output*)$/;"	f
*html-pretty-printer*	practicals-1.0.3/Chapter31/html.lisp	/^(defvar *html-pretty-printer* nil)$/;"	f
*hyperdoc-base-uri*	practicals-1.0.3/libraries/cl-ppcre-1.2.3/specials.lisp	/^(defvar *hyperdoc-base-uri* "http:\/\/weitz.de\/cl-ppcre\/")$/;"	f
*id-lock*	slime/swank-allegro.lisp	/^(defvar *id-lock* (mp:make-process-lock :name "id lock"))$/;"	f
*id-lock*	slime/swank-lispworks.lisp	/^(defvar *id-lock* (mp:make-lock))$/;"	f
*id3-v1-genres*	practicals-1.0.3/Chapter25/id3v2.lisp	/^(defparameter *id3-v1-genres*$/;"	f
*implementation-features*	slime/swank-loader.lisp	/^(defparameter *implementation-features*$/;"	f
*in-progress-objects*	practicals-1.0.3/Chapter24/binary-data.lisp	/^(defvar *in-progress-objects* nil)$/;"	f
*in-transaction-p*	chiglug-macros/power-of-lisp-macros.lisp	/^(defvar *in-transaction-p* nil)$/;"	f
*indent-amount*	slime/xref.lisp	/^(defvar *indent-amount* 3$/;"	f
*inline-elements*	practicals-1.0.3/Chapter31/html.lisp	/^(defparameter *inline-elements*$/;"	f
*inspectee*	slime/swank.lisp	/^(defvar *inspectee*)$/;"	f
*inspectee-actions*	slime/swank.lisp	/^(defvar *inspectee-actions*)$/;"	f
*inspectee-content*	slime/swank.lisp	/^(defvar *inspectee-content*)$/;"	f
*inspectee-parts*	slime/swank.lisp	/^(defvar *inspectee-parts*) $/;"	f
*inspector-history*	slime/swank.lisp	/^(defvar *inspector-history*)$/;"	f
*inspector-stack*	slime/swank.lisp	/^(defvar *inspector-stack*)$/;"	f
*install-gc-hooks*	slime/swank-cmucl.lisp	/^(defvar *install-gc-hooks* t$/;"	f
*interface-functions*	slime/swank-backend.lisp	/^(defparameter *interface-functions* '()$/;"	f
*known-processes*	slime/swank-openmcl.lisp	/^(defvar *known-processes* '()         ; FIXME: leakage. -luke$/;"	f
*known-processes-lock*	slime/swank-openmcl.lisp	/^(defvar *known-processes-lock* (ccl:make-lock "*known-processes-lock*"))$/;"	f
*last-caller-tree*	slime/xref.lisp	/^(defvar *last-caller-tree* nil)$/;"	f
*last-exception*	slime/contrib/swank-kawa.scm	/^(define-variable *last-exception* #f)$/;"	f
*last-form*	slime/xref.lisp	/^(defvar *last-form* ()$/;"	f
*last-pos-stores*	practicals-1.0.3/libraries/cl-ppcre-1.2.3/specials.lisp	/^(defvar *last-pos-stores* (make-array 0)$/;"	f
*last-stacktrace*	slime/contrib/swank-kawa.scm	/^(define-variable *last-stacktrace* #f)$/;"	f
*links*	lispcast/01-reddit.lisp	/^(defvar *links* nil)$/;"	f
*listener-eval-function*	slime/swank.lisp	/^(defvar *listener-eval-function* 'repl-eval)$/;"	f
*listener-sockets*	slime/swank.lisp	/^(defvar *listener-sockets* nil$/;"	f
*load-path*	slime/swank.lisp	/^(defvar *load-path* '()$/;"	f
*load-pathname*	slime/xref.lisp	/^(define-variable-pattern *load-pathname* :lisp2)$/;"	f
*load-print*	slime/xref.lisp	/^(define-variable-pattern *load-print* :lisp2)$/;"	f
*load-truename*	slime/xref.lisp	/^(define-variable-pattern *load-truename* :lisp2)$/;"	f
*load-verbose*	slime/xref.lisp	/^(define-variable-pattern *load-verbose* :lisp)$/;"	f
*log-events*	slime/swank.lisp	/^(defvar *log-events* nil)$/;"	f
*log-output*	slime/swank.lisp	/^(defvar *log-output* *error-output*)$/;"	f
*loopback-interface*	slime/swank.lisp	/^(defparameter *loopback-interface* "127.0.0.1")$/;"	f
*macroexpand-hook*	slime/xref.lisp	/^(define-variable-pattern *macroexpand-hook* :lisp)$/;"	f
*macroexpand-printer-bindings*	slime/swank.lisp	/^(defvar *macroexpand-printer-bindings*$/;"	f
*mailbox-lock*	slime/swank-allegro.lisp	/^(defvar *mailbox-lock* (mp:make-process-lock :name "mailbox lock"))$/;"	f
*mailbox-lock*	slime/swank-corman.lisp	/^(defvar *mailbox-lock* (make-instance 'threads:critical-section))$/;"	f
*mailbox-lock*	slime/swank-lispworks.lisp	/^(defvar *mailbox-lock* (mp:make-lock))$/;"	f
*mailbox-lock*	slime/swank-scl.lisp	/^(defvar *mailbox-lock* (thread:make-lock "Mailbox lock"))$/;"	f
*mailboxes*	slime/swank-corman.lisp	/^(defvar *mailboxes* (list))$/;"	f
*major-version*	practicals-1.0.3/Chapter29/mp3-browser.lisp	/^(defvar *major-version* 1)$/;"	f
*max-chars*	practicals-1.0.3/Chapter23/spam.lisp	/^(defparameter *max-chars* (* 10 1024))$/;"	f
*max-ham-score*	practicals-1.0.3/Chapter23/spam.lisp	/^(defparameter *max-ham-score* .4)$/;"	f
*metadata-interval*	practicals-1.0.3/Chapter28/shoutcast.lisp	/^(defparameter *metadata-interval* (expt 2 12))$/;"	f
*metering-version*	slime/metering.lisp	/^(defparameter *metering-version* "v2.1 25-JAN-94"$/;"	f
*min-spam-score*	practicals-1.0.3/Chapter23/spam.lisp	/^(defparameter *min-spam-score* .6)$/;"	f
*minor-version*	practicals-1.0.3/Chapter29/mp3-browser.lisp	/^(defvar *minor-version* 0)$/;"	f
*modules*	slime/xref.lisp	/^(define-variable-pattern *modules* :lisp)$/;"	f
*monitor*	slime/metering.lisp	/^(defvar *monitor* (make-hash-table :test #'equal)$/;"	f
*monitor-results*	slime/metering.lisp	/^(defvar *monitor-results* nil$/;"	f
*monitored-functions*	slime/metering.lisp	/^(defvar *monitored-functions* nil$/;"	f
*mp3-css*	practicals-1.0.3/Chapter29/mp3-browser.lisp	/^(defparameter *mp3-css* $/;"	f
*mp3-dir*	practicals-1.0.3/Chapter29/mp3-browser.lisp	/^(defparameter *mp3-dir* nil)$/;"	f
*mp3-schema*	practicals-1.0.3/Chapter27/mp3-database.lisp	/^(defparameter *mp3-schema* $/;"	f
*mp3s*	practicals-1.0.3/Chapter27/mp3-database.lisp	/^(defparameter *mp3s* (make-instance 'table :schema *mp3-schema*))$/;"	f
*new-connection-hook*	slime/swank.lisp	/^(defvar *new-connection-hook* '()$/;"	f
*nil-surrogate*	slime/contrib/swank-presentations.lisp	/^(defvar *nil-surrogate* (make-symbol "nil-surrogate"))$/;"	f
*no-calls*	slime/metering.lisp	/^(defvar *no-calls* nil$/;"	f
*node-count*	sudoku/sudoku.lisp	/^(defvar *node-count* 0)$/;"	f
*normal-readtable*	slime/xref.lisp	/^(defvar *normal-readtable* (copy-readtable nil)$/;"	f
*object-to-presentation-id*	slime/contrib/swank-presentations.lisp	/^(defvar *object-to-presentation-id* $/;"	f
*old-documentation*	slime/swank-corman.lisp	/^(defvar *old-documentation* #'documentation)$/;"	f
*ops*	paip/aip_ch4.lisp	/^(defvar *ops* nil "A list of available operators.")$/;"	f
*opt*	rpn.lisp	/^(defparameter *opt* '("+" "-" "*" "\/" "expt"))$/;"	f
*orig-c-error*	slime/swank-clisp.lisp	/^(defvar *orig-c-error* (symbol-function 'system::c-error))$/;"	f
*orig-c-report-problems*	slime/swank-clisp.lisp	/^(defvar *orig-c-report-problems* (symbol-function 'system::c-report-problems))$/;"	f
*orig-c-style-warn*	slime/swank-clisp.lisp	/^(defvar *orig-c-style-warn* (symbol-function 'system::c-style-warn))$/;"	f
*orig-c-warn*	slime/swank-clisp.lisp	/^(defvar *orig-c-warn* (symbol-function 'system::c-warn))$/;"	f
*os-features*	slime/swank-loader.lisp	/^(defparameter *os-features*$/;"	f
*package*	slime/xref.lisp	/^(define-variable-pattern *package* :lisp)$/;"	f
*paragraph-elements*	practicals-1.0.3/Chapter31/html.lisp	/^(defparameter *paragraph-elements*$/;"	f
*pattern-caller-type*	slime/xref.lisp	/^(defvar *pattern-caller-type* (make-hash-table :test #'equal))$/;"	f
*pattern-substitution-table*	slime/xref.lisp	/^(defvar *pattern-substitution-table* (make-hash-table :test #'equal)$/;"	f
*pending-continuations*	slime/swank.lisp	/^(defvar *pending-continuations* '()$/;"	f
*playlists*	practicals-1.0.3/Chapter29/playlist.lisp	/^(defvar *playlists* (make-hash-table :test #'equal))$/;"	f
*playlists-lock*	practicals-1.0.3/Chapter29/playlist.lisp	/^(defparameter *playlists-lock* (make-process-lock :name "playlists-lock"))$/;"	f
*postscript-output-directory*	slime/xref.lisp	/^(defparameter *postscript-output-directory* "")$/;"	f
*pre-reply-hook*	slime/swank.lisp	/^(defvar *pre-reply-hook* '()$/;"	f
*presentation-active-menu*	slime/contrib/swank-presentations.lisp	/^(defvar *presentation-active-menu* nil)$/;"	f
*presentation-counter*	slime/contrib/swank-presentations.lisp	/^(defvar *presentation-counter* 0 "identifier counter")$/;"	f
*presentation-id-to-object*	slime/contrib/swank-presentations.lisp	/^(defvar *presentation-id-to-object* $/;"	f
*preserve-whitespace-elements*	practicals-1.0.3/Chapter31/html.lisp	/^(defparameter *preserve-whitespace-elements* '(:pre :script :style))$/;"	f
*pretty*	practicals-1.0.3/Chapter31/html.lisp	/^(defvar *pretty* t)$/;"	f
*previous-compiler-condition*	slime/swank-cmucl.lisp	/^(defvar *previous-compiler-condition* nil$/;"	f
*previous-compiler-condition*	slime/swank-sbcl.lisp	/^(defvar *previous-compiler-condition* nil$/;"	f
*previous-compiler-condition*	slime/swank-scl.lisp	/^(defvar *previous-compiler-condition* nil$/;"	f
*previous-context*	slime/swank-cmucl.lisp	/^(defvar *previous-context* nil$/;"	f
*previous-context*	slime/swank-scl.lisp	/^(defvar *previous-context* nil$/;"	f
*print-array*	slime/xref.lisp	/^(define-variable-pattern *print-array* :lisp)$/;"	f
*print-base*	slime/xref.lisp	/^(define-variable-pattern *print-base* :lisp)$/;"	f
*print-case*	slime/xref.lisp	/^(define-variable-pattern *print-case* :lisp)$/;"	f
*print-circle*	slime/xref.lisp	/^(define-variable-pattern *print-circle* :lisp)$/;"	f
*print-escape*	slime/xref.lisp	/^(define-variable-pattern *print-escape* :lisp)$/;"	f
*print-gensym*	slime/xref.lisp	/^(define-variable-pattern *print-gensym* :lisp)$/;"	f
*print-length*	slime/xref.lisp	/^(define-variable-pattern *print-length* :lisp)$/;"	f
*print-level*	slime/xref.lisp	/^(define-variable-pattern *print-level* :lisp)$/;"	f
*print-lines*	slime/xref.lisp	/^(define-variable-pattern *print-lines* :lisp2)$/;"	f
*print-miser-width*	slime/xref.lisp	/^(define-variable-pattern *print-miser-width* :lisp2)$/;"	f
*print-pprint-dispatch*	slime/xref.lisp	/^(define-variable-pattern *print-pprint-dispatch* :lisp2)$/;"	f
*print-pretty*	slime/xref.lisp	/^(define-variable-pattern *print-pretty* :lisp)$/;"	f
*print-radix*	slime/xref.lisp	/^(define-variable-pattern *print-radix* :lisp)$/;"	f
*print-readably*	slime/xref.lisp	/^(define-variable-pattern *print-readably* :lisp2)$/;"	f
*print-right-margin*	slime/xref.lisp	/^(define-variable-pattern *print-right-margin* :lisp2)$/;"	f
*process-to-stack-top*	slime/swank-openmcl.lisp	/^(defvar *process-to-stack-top* (make-hash-table :test 'eql))$/;"	f
*profile-depth*	slime/swank-allegro.lisp	/^(defvar *profile-depth* 0)$/;"	f
*profiled-functions*	slime/swank-allegro.lisp	/^(defvar *profiled-functions* ())$/;"	f
*query-io*	slime/xref.lisp	/^(define-variable-pattern *query-io* :lisp)$/;"	f
*random-amount*	practicals-1.0.3/Chapter29/mp3-browser.lisp	/^(defparameter *random-amount* 25)$/;"	f
*random-state*	slime/xref.lisp	/^(define-variable-pattern *random-state* :lisp)$/;"	f
*read-base*	slime/xref.lisp	/^(define-variable-pattern *read-base* :lisp)$/;"	f
*read-default-float-format*	slime/xref.lisp	/^(define-variable-pattern *read-default-float-format* :lisp)$/;"	f
*read-eval*	slime/xref.lisp	/^(define-variable-pattern *read-eval* :lisp2)$/;"	f
*read-input-catch-tag*	slime/swank.lisp	/^(defvar *read-input-catch-tag* 0)$/;"	f
*read-suppress*	slime/xref.lisp	/^(define-variable-pattern *read-suppress* :lisp)$/;"	f
*readers-database*	slime/xref.lisp	/^(defvar *readers-database* (make-hash-table :test #'equal)$/;"	f
*readtable*	slime/xref.lisp	/^(define-variable-pattern *readtable* :lisp)$/;"	f
*readtable-alist*	slime/swank.lisp	/^(defvar *readtable-alist* (default-readtable-alist)$/;"	f
*real-start-pos*	practicals-1.0.3/libraries/cl-ppcre-1.2.3/specials.lisp	/^(defvar *real-start-pos* nil$/;"	f
*record-repl-results*	slime/contrib/swank-presentations.lisp	/^(defvar *record-repl-results* t$/;"	f
*redirect-io*	slime/swank.lisp	/^(defvar *redirect-io* t$/;"	f
*reg-ends*	practicals-1.0.3/libraries/cl-ppcre-1.2.3/specials.lisp	/^(defvar *reg-ends* (make-array 0)$/;"	f
*reg-starts*	practicals-1.0.3/libraries/cl-ppcre-1.2.3/specials.lisp	/^(defvar *reg-starts* (make-array 0)$/;"	f
*regex-debug*	slime/nregex.lisp	/^(defvar *regex-debug* nil)		; Set to nil for no debugging code$/;"	f
*regex-groupings*	slime/nregex.lisp	/^(defvar *regex-groupings* 0)$/;"	f
*regex-groups*	slime/nregex.lisp	/^(defvar *regex-groups* (make-array 10))$/;"	f
*regex-special-chars*	slime/nregex.lisp	/^(defvar *regex-special-chars* "?*+.()[]\\\\${}")$/;"	f
*regs-maybe-start*	practicals-1.0.3/libraries/cl-ppcre-1.2.3/specials.lisp	/^(defvar *regs-maybe-start* (make-array 0)$/;"	f
*remove-keywords-alist*	slime/contrib/swank-arglists.lisp	/^(defvar *remove-keywords-alist*$/;"	f
*rep-num*	practicals-1.0.3/libraries/cl-ppcre-1.2.3/specials.lisp	/^(defvar *rep-num* 0$/;"	f
*repeat-counters*	practicals-1.0.3/libraries/cl-ppcre-1.2.3/specials.lisp	/^(defvar *repeat-counters* (make-array 0$/;"	f
*saved-global-streams*	slime/swank.lisp	/^(defvar *saved-global-streams* '()$/;"	f
*send-repl-results-function*	slime/swank.lisp	/^(defvar *send-repl-results-function* 'send-repl-results-to-emacs)$/;"	f
*server*	lispcast/01-reddit.lisp	/^(defvar *server* (hunchentoot:start-server :port 8080))$/;"	f
*setters-database*	slime/xref.lisp	/^(defvar *setters-database* (make-hash-table :test #'equal)$/;"	f
*shebang-readtable*	slime/swank-sbcl.lisp	/^(defvar *shebang-readtable*$/;"	f
*sigio-handlers*	slime/swank-cmucl.lisp	/^(defvar *sigio-handlers* '()$/;"	f
*sigio-handlers*	slime/swank-sbcl.lisp	/^(defvar *sigio-handlers* '()$/;"	f
*silence-mp3*	practicals-1.0.3/Chapter29/playlist.lisp	/^(defparameter *silence-mp3* nil)$/;"	f
*simple-grammar*	paip/aip_ch2.lisp	/^(defparameter *simple-grammar*$/;"	f
*sldb-backtrace*	slime/swank-clisp.lisp	/^(defvar *sldb-backtrace*)$/;"	f
*sldb-condition-printer*	slime/swank.lisp	/^(defvar *sldb-condition-printer* #'format-sldb-condition$/;"	f
*sldb-initial-frames*	slime/swank.lisp	/^(defvar *sldb-initial-frames* 20$/;"	f
*sldb-level*	slime/swank.lisp	/^(defvar *sldb-level* 0$/;"	f
*sldb-printer-bindings*	slime/swank.lisp	/^(defvar *sldb-printer-bindings*$/;"	f
*sldb-quit-restart*	slime/swank.lisp	/^(defvar *sldb-quit-restart* 'abort$/;"	f
*sldb-restarts*	slime/swank.lisp	/^(defvar *sldb-restarts* nil$/;"	f
*sldb-stack-top*	slime/swank-cmucl.lisp	/^(defvar *sldb-stack-top*)$/;"	f
*sldb-stack-top*	slime/swank-openmcl.lisp	/^(defvar *sldb-stack-top* nil)$/;"	f
*sldb-stack-top*	slime/swank-sbcl.lisp	/^(defvar *sldb-stack-top*)$/;"	f
*sldb-stack-top*	slime/swank-scl.lisp	/^(defvar *sldb-stack-top*)$/;"	f
*sldb-state*	slime/contrib/swank-mit-scheme.scm	/^(define *sldb-state* #f)$/;"	f
*sldb-stepping-p*	slime/swank.lisp	/^(defvar *sldb-stepping-p* nil$/;"	f
*sldb-top-frame*	slime/swank-lispworks.lisp	/^(defvar *sldb-top-frame*)$/;"	f
*sldb-topframe*	slime/swank-abcl.lisp	/^(defvar *sldb-topframe*)$/;"	f
*sldb-topframe*	slime/swank-allegro.lisp	/^(defvar *sldb-topframe*)$/;"	f
*slime-features*	slime/swank.lisp	/^(defvar *slime-features* nil$/;"	f
*slime-funs*	slime/contrib/swank-kawa.scm	/^(define-variable *slime-funs*)$/;"	f
*slime-repl-advance-history*	slime/contrib/swank-listener-hooks.lisp	/^(defvar *slime-repl-advance-history* nil $/;"	f
*slime-repl-eval-hook-pass*	slime/contrib/swank-listener-hooks.lisp	/^(defvar *slime-repl-eval-hook-pass* (gensym "PASS")$/;"	f
*slime-repl-eval-hooks*	slime/contrib/swank-listener-hooks.lisp	/^(defvar *slime-repl-eval-hooks* nil$/;"	f
*slime-repl-suppress-output*	slime/contrib/swank-listener-hooks.lisp	/^(defvar *slime-repl-suppress-output* nil$/;"	f
*song-source-type*	practicals-1.0.3/Chapter28/shoutcast.lisp	/^(defparameter *song-source-type* 'singleton)$/;"	f
*songs*	practicals-1.0.3/Chapter28/song-source.lisp	/^(defparameter *songs* (make-instance 'simple-song-queue))$/;"	f
*source-directory*	slime/swank-loader.lisp	/^(defvar *source-directory*$/;"	f
*source-file*	slime/xref.lisp	/^(defvar *source-file* (make-hash-table :test #'equal)$/;"	f
*source-file-cache*	slime/swank-source-file-cache.lisp	/^(defvar *source-file-cache* (make-hash-table :test 'equal)$/;"	f
*source-snippet-size*	slime/swank-cmucl.lisp	/^(defvar *source-snippet-size* 256$/;"	f
*source-snippet-size*	slime/swank-scl.lisp	/^(defvar *source-snippet-size* 256$/;"	f
*source-snippet-size*	slime/swank-source-file-cache.lisp	/^(defvar *source-snippet-size* 256$/;"	f
*stack-trace*	slime/swank-corman.lisp	/^(defvar *stack-trace* nil)$/;"	f
*standard-input*	slime/xref.lisp	/^(define-variable-pattern *standard-input* :lisp)$/;"	f
*standard-input-streams*	slime/swank.lisp	/^(defvar *standard-input-streams*$/;"	f
*standard-io-streams*	slime/swank.lisp	/^(defvar *standard-io-streams*$/;"	f
*standard-output*	slime/xref.lisp	/^(define-variable-pattern *standard-output* :lisp)$/;"	f
*standard-output-streams*	slime/swank.lisp	/^(defvar *standard-output-streams*$/;"	f
*start-pos*	practicals-1.0.3/libraries/cl-ppcre-1.2.3/specials.lisp	/^(defvar *start-pos* 0$/;"	f
*state*	paip/aip_ch4.lisp	/^(defvar *state* nil "The current state: a list of conditions.")$/;"	f
*string*	practicals-1.0.3/libraries/cl-ppcre-1.2.3/specials.lisp	/^(defvar *string* ""$/;"	f
*string*-equal	practicals-1.0.3/libraries/cl-ppcre-1.2.3/closures.lisp	/^(defun *string*-equal (string2 start1 end1 start2 end2)$/;"	f
*string*=	practicals-1.0.3/libraries/cl-ppcre-1.2.3/closures.lisp	/^(defun *string*= (string2 start1 end1 start2 end2)$/;"	f
*swank-compilation-unit*	slime/swank.lisp	/^(defvar *swank-compilation-unit* nil)$/;"	f
*swank-debug-p*	slime/swank.lisp	/^(defvar *swank-debug-p* t$/;"	f
*swank-debugger-condition*	slime/swank.lisp	/^(defvar *swank-debugger-condition* nil$/;"	f
*swank-files*	slime/swank-loader.lisp	/^(defvar *swank-files* `(swank-backend ,@*sysdep-files* swank))$/;"	f
*swank-io-package*	slime/swank.lisp	/^(defvar *swank-io-package*$/;"	f
*swank-pprint-bindings*	slime/swank.lisp	/^(defvar *swank-pprint-bindings*$/;"	f
*swank-state-stack*	slime/swank.lisp	/^(defvar *swank-state-stack* '()$/;"	f
*swank-wire-protocol-version*	slime/swank.lisp	/^(defvar *swank-wire-protocol-version* nil$/;"	f
*syntax-error-string*	practicals-1.0.3/libraries/cl-ppcre-1.2.3/errors.lisp	/^(defvar *syntax-error-string* nil$/;"	f
*sysdep-files*	slime/swank-loader.lisp	/^(defparameter *sysdep-files*$/;"	f
*terminal-io*	slime/xref.lisp	/^(define-variable-pattern *terminal-io* :lisp)$/;"	f
*test-name*	practicals-1.0.3/Chapter09/test.lisp	/^(defvar *test-name* nil)$/;"	f
*test-sources*	chiglug-macros/power-of-lisp-macros.lisp	/^(defvar *test-sources* (make-hash-table))$/;"	f
*test-thunks*	chiglug-macros/power-of-lisp-macros.lisp	/^(defvar *test-thunks* (make-hash-table)) ; <http:\/\/en.wikipedia.org\/wiki\/Thunk>$/;"	f
*the-vm*	slime/contrib/swank-kawa.scm	/^(define-variable *the-vm* #f)$/;"	f
*thread-id-counter*	slime/swank-abcl.lisp	/^(defvar *thread-id-counter* 0)$/;"	f
*thread-id-counter*	slime/swank-allegro.lisp	/^(defvar *thread-id-counter* 0)$/;"	f
*thread-id-counter*	slime/swank-lispworks.lisp	/^(defvar *thread-id-counter* 0)$/;"	f
*thread-id-counter*	slime/swank-scl.lisp	/^(defvar *thread-id-counter* 0)$/;"	f
*thread-id-counter-lock*	slime/swank-scl.lisp	/^(defvar *thread-id-counter-lock* (thread:make-lock "Thread ID counter"))$/;"	f
*thread-list*	slime/swank.lisp	/^(defvar *thread-list* ()$/;"	f
*thread-props*	slime/swank-abcl.lisp	/^(defvar *thread-props* (make-hash-table) ; should be a weak table$/;"	f
*thread-props-lock*	slime/swank-abcl.lisp	/^(defvar *thread-props-lock* (ext:make-thread-lock))$/;"	f
*timeout-seconds*	practicals-1.0.3/Chapter28/shoutcast.lisp	/^(defparameter *timeout-seconds* (* 60 60 24 7 52 10))$/;"	f
*timing-data*	practicals-1.0.3/Chapter32/profiler.lisp	/^(defparameter *timing-data* ())$/;"	f
*tmp*	slime/swank-ecl.lisp	/^(defvar *tmp*)$/;"	f
*top-level-restart*	slime/contrib/swank-mit-scheme.scm	/^(define *top-level-restart* #f)$/;"	f
*total-hams*	practicals-1.0.3/Chapter23/spam.lisp	/^(defvar *total-hams* 0)$/;"	f
*total-spams*	practicals-1.0.3/Chapter23/spam.lisp	/^(defvar *total-spams* 0)$/;"	f
*trace-output*	slime/xref.lisp	/^(define-variable-pattern *trace-output* :lisp)$/;"	f
*trap-load-time-warnings*	slime/swank-sbcl.lisp	/^(defvar *trap-load-time-warnings* nil)$/;"	f
*type-specifier-arglists*	slime/swank-backend.lisp	/^(defparameter *type-specifier-arglists*$/;"	f
*types-to-ignore*	slime/xref.lisp	/^(defvar *types-to-ignore*$/;"	f
*undefined-functions-hash*	slime/swank-lispworks.lisp	/^(defvar *undefined-functions-hash* nil$/;"	f
*unimplemented-interfaces*	slime/swank-backend.lisp	/^(defparameter *unimplemented-interfaces* '()$/;"	f
*use-bmh-matchers*	practicals-1.0.3/libraries/cl-ppcre-1.2.3/specials.lisp	/^(defvar *use-bmh-matchers* t$/;"	f
*use-dedicated-output-stream*	slime/swank.lisp	/^(defvar *use-dedicated-output-stream* nil$/;"	f
*value2tag*	slime/swank-openmcl.lisp	/^(defvar *value2tag* (make-hash-table))$/;"	f
*within-call-with-compilation-hooks*	slime/swank-lispworks.lisp	/^(defvar *within-call-with-compilation-hooks* nil$/;"	f
*xhtml*	practicals-1.0.3/Chapter31/html.lisp	/^(defparameter *xhtml* nil)$/;"	f
*xref-verbose*	slime/xref.lisp	/^(defvar *xref-verbose* t$/;"	f
*zero-length-num*	practicals-1.0.3/libraries/cl-ppcre-1.2.3/specials.lisp	/^(defvar *zero-length-num* 0$/;"	f
+	slime/xref.lisp	/^(define-caller-pattern + (form (:star form)) :lisp)$/;"	f
+header-type-symbols+	slime/swank-cmucl.lisp	/^(defconstant +header-type-symbols+$/;"	f
+header-type-symbols+	slime/swank-scl.lisp	/^(defconstant +header-type-symbols+$/;"	f
+lowtag-symbols+	slime/swank-cmucl.lisp	/^(defconstant +lowtag-symbols+ $/;"	f
+lowtag-symbols+	slime/swank-scl.lisp	/^(defconstant +lowtag-symbols+ $/;"	f
+null+	practicals-1.0.3/Chapter24/binary-data.lisp	/^(defconstant +null+ (code-char 0))$/;"	f
+sigint+	slime/swank-backend.lisp	/^(defconstant +sigint+ 2)$/;"	f
-	slime/xref.lisp	/^(define-caller-pattern - (form (:star form)) :lisp)$/;"	f
/	slime/xref.lisp	/^(define-caller-pattern \/ (form (:star form)) :lisp)$/;"	f
/=	slime/xref.lisp	/^(define-caller-pattern \/= (form (:star form)) :lisp)$/;"	f
0	Session.vim	/^normal! 0$/;"	m
1+	slime/xref.lisp	/^(define-caller-pattern 1+ (form) :lisp)$/;"	f
1-	slime/contrib/swank-mit-scheme.scm	/^(define (1- n) (- n 1))$/;"	f
1-	slime/xref.lisp	/^(define-caller-pattern 1- (form) :lisp)$/;"	f
:aip-ch1	paip/aip_ch1.lisp	/^(defpackage :aip-ch1$/;"	f
:aip-ch2	paip/aip_ch2.lisp	/^(defpackage :aip-ch2$/;"	f
:aip-ch3	paip/aip_ch3.lisp	/^(defpackage :aip-ch3$/;"	f
:aip-ch4	paip/aip_ch4.lisp	/^(defpackage :aip-ch4$/;"	f
:attribute	practicals-1.0.3/Chapter31/html.lisp	/^(define-html-special-operator :attribute (processor &rest body)$/;"	f
:com.gigamonkeys.binary-data	practicals-1.0.3/Chapter24/packages.lisp	/^(defpackage :com.gigamonkeys.binary-data$/;"	f
:com.gigamonkeys.html	practicals-1.0.3/Chapter31/packages.lisp	/^(defpackage :com.gigamonkeys.html$/;"	f
:com.gigamonkeys.id3v2	practicals-1.0.3/Chapter25/packages.lisp	/^(defpackage :com.gigamonkeys.id3v2$/;"	f
:com.gigamonkeys.macro-utilities	practicals-1.0.3/Chapter08/packages.lisp	/^(defpackage :com.gigamonkeys.macro-utilities$/;"	f
:com.gigamonkeys.mp3-browser	practicals-1.0.3/Chapter29/packages.lisp	/^(defpackage :com.gigamonkeys.mp3-browser$/;"	f
:com.gigamonkeys.mp3-database	practicals-1.0.3/Chapter27/packages.lisp	/^(defpackage :com.gigamonkeys.mp3-database$/;"	f
:com.gigamonkeys.pathnames	practicals-1.0.3/Chapter15/packages.lisp	/^(defpackage :com.gigamonkeys.pathnames$/;"	f
:com.gigamonkeys.shoutcast	practicals-1.0.3/Chapter28/packages.lisp	/^(defpackage :com.gigamonkeys.shoutcast$/;"	f
:com.gigamonkeys.simple-db	practicals-1.0.3/Chapter03/packages.lisp	/^(defpackage :com.gigamonkeys.simple-db (:use :cl))$/;"	f
:com.gigamonkeys.spam	practicals-1.0.3/Chapter23/packages.lisp	/^(defpackage :com.gigamonkeys.spam$/;"	f
:com.gigamonkeys.test	practicals-1.0.3/Chapter09/packages.lisp	/^(defpackage :com.gigamonkeys.test$/;"	f
:com.gigamonkeys.url-function	practicals-1.0.3/Chapter26/packages.lisp	/^(defpackage :com.gigamonkeys.url-function$/;"	f
:com.gigamonkeys.web	practicals-1.0.3/Chapter26/allegroserve.lisp	/^(defpackage :com.gigamonkeys.web$/;"	f
:config-parser	config-parser.lisp	/^(defpackage :config-parser$/;"	f
:config-parser	sudoku/config-parser.lisp	/^(defpackage :config-parser$/;"	f
:format	practicals-1.0.3/Chapter31/html.lisp	/^(define-html-special-operator :format (processor &rest args)$/;"	f
:mp3-browser-page	practicals-1.0.3/Chapter29/mp3-browser.lisp	/^(define-html-macro :mp3-browser-page ((&key title (header title)) &body body)$/;"	f
:newline	practicals-1.0.3/Chapter31/html.lisp	/^(define-html-special-operator :newline (processor)$/;"	f
:nifty-funs	nifty_funs.lisp	/^(defpackage :nifty-funs$/;"	f
:noescape	practicals-1.0.3/Chapter31/html.lisp	/^(define-html-special-operator :noescape (processor &rest body)$/;"	f
:onlisp	onlisp.lisp	/^(defpackage :onlisp$/;"	f
:print	practicals-1.0.3/Chapter31/html.lisp	/^(define-html-special-operator :print (processor form)$/;"	f
:progn	practicals-1.0.3/Chapter31/html.lisp	/^(define-html-special-operator :progn (processor &rest body)$/;"	f
:project-euler	project-euler.lisp	/^(defpackage :project-euler$/;"	f
:pxref	slime/xref.lisp	/^(defpackage :pxref$/;"	f
:rpn	rpn.lisp	/^(defpackage :rpn$/;"	f
:sudoku	sudoku/sudoku.lisp	/^(defpackage :sudoku$/;"	f
:swank	slime/swank.lisp	/^(defpackage :swank$/;"	f
:swank-backend	slime/swank-backend.lisp	/^(defpackage :swank-backend$/;"	f
:swank-loader	slime/swank-loader.lisp	/^(cl:defpackage :swank-loader$/;"	f
:swank-mop	slime/swank-backend.lisp	/^(defpackage :swank-mop$/;"	f
:table-row	practicals-1.0.3/Chapter29/mp3-browser.lisp	/^(define-html-macro :table-row (&attributes attrs &rest values)$/;"	f
<	slime/xref.lisp	/^(define-caller-pattern < (form (:star form)) :lisp)$/;"	f
<=	slime/xref.lisp	/^(define-caller-pattern <= (form (:star form)) :lisp)$/;"	f
<BS>	Session.vim	/^vmap <BS> "-d$/;"	m
<D-c>	Session.vim	/^vmap <D-c> "*y$/;"	m
<D-v>	Session.vim	/^map! <D-v> *$/;"	m
<D-v>	Session.vim	/^nmap <D-v> "*P$/;"	m
<D-v>	Session.vim	/^vmap <D-v> "-d"*P$/;"	m
<D-x>	Session.vim	/^vmap <D-x> "*d$/;"	m
<Plug>NetrwBrowseX	Session.vim	/^nnoremap <silent> <Plug>NetrwBrowseX :call netrw#NetBrowseX(expand("<cWORD>"),0)$/;"	m
<absent-exc>	slime/contrib/swank-kawa.scm	/^(define-alias <absent-exc> <com.sun.jdi.AbsentInformationException>)$/;"	f
<array-ref>	slime/contrib/swank-kawa.scm	/^(define-alias <array-ref> <com.sun.jdi.ArrayReference>)$/;"	f
<break-event>	slime/contrib/swank-kawa.scm	/^(define-simple-class <break-event> (<com.sun.jdi.event.Event>)$/;"	f
<builder>	slime/contrib/swank-kawa.scm	/^(define-alias <builder> <java.lang.StringBuilder>)$/;"	f
<chan>	slime/contrib/swank-kawa.scm	/^(define-simple-class <chan> ()$/;"	f
<class-ref>	slime/contrib/swank-kawa.scm	/^(define-alias <class-ref> <com.sun.jdi.ClassType>)$/;"	f
<env>	slime/contrib/swank-kawa.scm	/^(define-alias <env> <gnu.mapping.Environment>)$/;"	f
<event>	slime/contrib/swank-kawa.scm	/^(define-alias <event> <com.sun.jdi.event.Event>)$/;"	f
<exception-event>	slime/contrib/swank-kawa.scm	/^(define-alias <exception-event> <com.sun.jdi.event.ExceptionEvent>)$/;"	f
<exchanger>	slime/contrib/swank-kawa.scm	/^(define-alias <exchanger> <java.util.concurrent.Exchanger>)$/;"	f
<faked-frame>	slime/contrib/swank-kawa.scm	/^(define-simple-class <faked-frame> ()$/;"	f
<field>	slime/contrib/swank-kawa.scm	/^(define-alias <field> <com.sun.jdi.Field>)$/;"	f
<file>	slime/contrib/swank-kawa.scm	/^(define-alias <file> <java.io.File>)$/;"	f
<frame>	slime/contrib/swank-kawa.scm	/^(define-alias <frame> <com.sun.jdi.StackFrame>)$/;"	f
<in>	slime/contrib/swank-kawa.scm	/^(define-alias <in> <java.io.InputStreamReader>)$/;"	f
<inspector-state>	slime/contrib/swank-kawa.scm	/^(define-simple-class <inspector-state> () $/;"	f
<iterable>	slime/contrib/swank-kawa.scm	/^(define-alias <iterable> <java.lang.Iterable>)$/;"	f
<listener-abort>	slime/contrib/swank-kawa.scm	/^(define-simple-class <listener-abort> (<java.lang.Throwable>)$/;"	f
<local-var>	slime/contrib/swank-kawa.scm	/^(define-alias <local-var> <com.sun.jdi.LocalVariable>)$/;"	f
<location>	slime/contrib/swank-kawa.scm	/^(define-alias <location> <com.sun.jdi.Location>)$/;"	f
<meth-ref>	slime/contrib/swank-kawa.scm	/^(define-alias <meth-ref> <com.sun.jdi.Method>)$/;"	f
<mirror>	slime/contrib/swank-kawa.scm	/^(define-alias <mirror> <com.sun.jdi.Mirror>)$/;"	f
<module-info>	slime/contrib/swank-kawa.scm	/^(define-alias <module-info> <gnu.expr.ModuleInfo>)$/;"	f
<obj-ref>	slime/contrib/swank-kawa.scm	/^(define-alias <obj-ref> <com.sun.jdi.ObjectReference>)$/;"	f
<out>	slime/contrib/swank-kawa.scm	/^(define-alias <out> <java.io.OutputStreamWriter>)$/;"	f
<queue>	slime/contrib/swank-kawa.scm	/^(define-alias <queue> <java.util.concurrent.LinkedBlockingQueue>)$/;"	f
<ref-type>	slime/contrib/swank-kawa.scm	/^(define-alias <ref-type> <com.sun.jdi.ReferenceType>)$/;"	f
<runnable>	slime/contrib/swank-kawa.scm	/^(define-simple-class <runnable> (<gnu.mapping.RunnableClosure>)$/;"	f
<server-socket>	slime/contrib/swank-kawa.scm	/^(define-alias <server-socket> <java.net.ServerSocket>)$/;"	f
<socket>	slime/contrib/swank-kawa.scm	/^(define-alias <socket> <java.net.Socket>)$/;"	f
<source-error>	slime/contrib/swank-kawa.scm	/^(define-alias <source-error> <gnu.text.SourceError>)$/;"	f
<step-event>	slime/contrib/swank-kawa.scm	/^(define-alias <step-event> <com.sun.jdi.event.StepEvent>)$/;"	f
<str-ref>	slime/contrib/swank-kawa.scm	/^(define-alias <str-ref> <com.sun.jdi.StringReference>)$/;"	f
<str>	slime/contrib/swank-kawa.scm	/^(define-alias <str> <java.lang.String>)$/;"	f
<swank-global-variable>	slime/contrib/swank-kawa.scm	/^(define-simple-class <swank-global-variable> ()$/;"	f
<swank-location>	slime/contrib/swank-kawa.scm	/^(define-simple-class <swank-location> (<location>)$/;"	f
<swank-writer>	slime/contrib/swank-kawa.scm	/^(define-simple-class <swank-writer> (<java.io.Writer>)$/;"	f
<thread-ref>	slime/contrib/swank-kawa.scm	/^(define-alias <thread-ref> <com.sun.jdi.ThreadReference>)$/;"	f
<thread>	slime/contrib/swank-kawa.scm	/^(define-alias <thread> <java.lang.Thread>)$/;"	f
<throwable>	slime/contrib/swank-kawa.scm	/^(define-alias <throwable> <java.lang.Throwable>)$/;"	f
<timeunit>	slime/contrib/swank-kawa.scm	/^(define-alias <timeunit> <java.util.concurrent.TimeUnit>)$/;"	f
<ucex-handler>	slime/contrib/swank-kawa.scm	/^(define-simple-class <ucex-handler>$/;"	f
<value>	slime/contrib/swank-kawa.scm	/^(define-alias <value> <com.sun.jdi.Value>)$/;"	f
<vm>	slime/contrib/swank-kawa.scm	/^(define-alias <vm> <com.sun.jdi.VirtualMachine>)$/;"	f
=	slime/xref.lisp	/^(define-caller-pattern = (form (:star form)) :lisp)$/;"	f
==	slime/contrib/swank-kawa.scm	/^(define-syntax ==$/;"	f
>	slime/xref.lisp	/^(define-caller-pattern > (form (:star form)) :lisp)$/;"	f
>=	slime/xref.lisp	/^(define-caller-pattern >= (form (:star form)) :lisp)$/;"	f
>line	slime/contrib/swank-mit-scheme.scm	/^(define (>line o) $/;"	f
>line	slime/contrib/swank-mit-scheme.scm	/^(set! >line (compile-procedure >line))$/;"	s
??	slime/slime.el	/^(def-slime-selector-method ?? "Selector help buffer."$/;"	f
?c	slime/slime.el	/^(def-slime-selector-method ?c$/;"	f
?d	slime/slime.el	/^(def-slime-selector-method ?d$/;"	f
?e	slime/slime.el	/^(def-slime-selector-method ?e$/;"	f
?i	slime/slime.el	/^(def-slime-selector-method ?i$/;"	f
?l	slime/slime.el	/^(def-slime-selector-method ?l$/;"	f
?r	slime/slime.el	/^(def-slime-selector-method ?r$/;"	f
?t	slime/slime.el	/^(def-slime-selector-method ?t$/;"	f
?v	slime/slime.el	/^(def-slime-selector-method ?v$/;"	f
@	slime/contrib/swank-kawa.scm	/^(define-syntax @$/;"	f
ASDF	slime/doc/html/ASDF.html	/^<a name="ASDF"><\/a>$/;"	a
Adj	paip/aip_ch2.lisp	/^(defun Adj ()$/;"	f
Adj*	paip/aip_ch2.lisp	/^(defun Adj* ()$/;"	f
Article	paip/aip_ch2.lisp	/^(defun Article ()$/;"	f
Auto-SLIME	slime/doc/html/Auto_002dSLIME.html	/^<a name="Auto-SLIME"><\/a>$/;"	a
Auto_002dSLIME	slime/doc/html/Auto_002dSLIME.html	/^<a name="Auto_002dSLIME"><\/a>$/;"	a
Autoloading	slime/doc/html/Autoloading.html	/^<a name="Autoloading"><\/a>$/;"	a
Banner	slime/doc/html/Banner.html	/^<a name="Banner"><\/a>$/;"	a
CVS	slime/doc/html/CVS.html	/^<a name="CVS"><\/a>$/;"	a
CVS-Incantations	slime/doc/html/CVS-Incantations.html	/^<a name="CVS-Incantations"><\/a>$/;"	a
Command-Index	slime/doc/html/Command-Index.html	/^<a name="Command-Index"><\/a>$/;"	a
Commands	slime/doc/html/Commands.html	/^<a name="Commands"><\/a>$/;"	a
Communication-style	slime/doc/html/Communication-style.html	/^<a name="Communication-style"><\/a>$/;"	a
Compilation	slime/doc/html/Compilation.html	/^<a name="Compilation"><\/a>$/;"	a
Completion	slime/doc/html/Completion.html	/^<a name="Completion"><\/a>$/;"	a
Compound-Completion	slime/doc/html/Compound-Completion.html	/^<a name="Compound-Completion"><\/a>$/;"	a
Connecting-to-a-remote-lisp	slime/doc/html/Connecting-to-a-remote-lisp.html	/^<a name="Connecting-to-a-remote-lisp"><\/a>$/;"	a
Contributed-Packages	slime/doc/html/Contributed-Packages.html	/^<a name="Contributed-Packages"><\/a>$/;"	a
Credits	slime/doc/html/Credits.html	/^<a name="Credits"><\/a>$/;"	a
Cross-reference	slime/doc/html/Cross_002dreference.html	/^<a name="Cross-reference"><\/a>$/;"	a
Cross_002dreference	slime/doc/html/Cross_002dreference.html	/^<a name="Cross_002dreference"><\/a>$/;"	a
Customization	slime/doc/html/Customization.html	/^<a name="Customization"><\/a>$/;"	a
Debugger	slime/doc/html/Debugger.html	/^<a name="Debugger"><\/a>$/;"	a
Disassembly	slime/doc/html/Disassembly.html	/^<a name="Disassembly"><\/a>$/;"	a
Documentation	slime/doc/html/Documentation.html	/^<a name="Documentation"><\/a>$/;"	a
Documentation-Links	slime/doc/html/Documentation-Links.html	/^<a name="Documentation-Links"><\/a>$/;"	a
Downloading	slime/doc/html/Downloading.html	/^<a name="Downloading"><\/a>$/;"	a
Editing-Commands	slime/doc/html/Editing-Commands.html	/^<a name="Editing-Commands"><\/a>$/;"	a
Emacs-side-customization	slime/doc/html/Emacs_002dside-customization.html	/^<a name="Emacs-side-customization"><\/a>$/;"	a
Emacs_002dside-customization	slime/doc/html/Emacs_002dside-customization.html	/^<a name="Emacs_002dside-customization"><\/a>$/;"	a
Evaluation	slime/doc/html/Evaluation.html	/^<a name="Evaluation"><\/a>$/;"	a
Examining-frames	slime/doc/html/Examining-frames.html	/^<a name="Examining-frames"><\/a>$/;"	a
Fancy-Inspector	slime/doc/html/Fancy-Inspector.html	/^<a name="Fancy-Inspector"><\/a>$/;"	a
Finding-definitions	slime/doc/html/Finding-definitions.html	/^<a name="Finding-definitions"><\/a>$/;"	a
Frame-Navigation	slime/doc/html/Frame-Navigation.html	/^<a name="Frame-Navigation"><\/a>$/;"	a
Fuzzy-Completion	slime/doc/html/Fuzzy-Completion.html	/^<a name="Fuzzy-Completion"><\/a>$/;"	a
GPS	paip/aip_ch4.lisp	/^(defun GPS (*state* goals *ops*)$/;"	f
Getting-started	slime/doc/html/Getting-started.html	/^<a name="Getting-started"><\/a>$/;"	a
Global-IO-Redirection	slime/doc/html/Global-IO-Redirection.html	/^<a name="Global-IO-Redirection"><\/a>$/;"	a
Highlight-Edits	slime/doc/html/Highlight-Edits.html	/^<a name="Highlight-Edits"><\/a>$/;"	a
Hooks	slime/doc/html/Hooks.html	/^<a name="Hooks"><\/a>$/;"	a
INSTALL_CMD	slime/doc/Makefile	/^INSTALL_CMD=install -m 644$/;"	m
Indentation	slime/doc/html/Indentation.html	/^<a name="Indentation"><\/a>$/;"	a
Inferior-lisp	slime/doc/html/Inferior_002dlisp.html	/^<a name="Inferior-lisp"><\/a>$/;"	a
Inferior_002dlisp	slime/doc/html/Inferior_002dlisp.html	/^<a name="Inferior_002dlisp"><\/a>$/;"	a
Input-Navigation	slime/doc/html/Input-Navigation.html	/^<a name="Input-Navigation"><\/a>$/;"	a
Inspector	slime/doc/html/Inspector.html	/^<a name="Inspector"><\/a>$/;"	a
Installation	slime/doc/html/Installation.html	/^<a name="Installation"><\/a>$/;"	a
Introduction	slime/doc/html/Introduction.html	/^<a name="Introduction"><\/a>$/;"	a
Key-Index	slime/doc/html/Key-Index.html	/^<a name="Key-Index"><\/a>$/;"	a
Key-bindings	slime/doc/html/Key-bindings.html	/^<a name="Key-bindings"><\/a>$/;"	a
Lisp-side	slime/doc/html/Lisp_002dside.html	/^<a name="Lisp-side"><\/a>$/;"	a
Lisp_002dside	slime/doc/html/Lisp_002dside.html	/^<a name="Lisp_002dside"><\/a>$/;"	a
Loading-Contribs	slime/doc/html/Loading-Contribs.html	/^<a name="Loading-Contribs"><\/a>$/;"	a
Loading-Swank-faster	slime/doc/html/Loading-Swank-faster.html	/^<a name="Loading-Swank-faster"><\/a>$/;"	a
MONITOR	slime/metering.lisp	/^(defmacro MONITOR (&rest names)$/;"	f
MONITOR-ALL	slime/metering.lisp	/^(defun MONITOR-ALL (&optional (package *package*))$/;"	f
MONITOR-FORM	slime/metering.lisp	/^(defmacro MONITOR-FORM (form$/;"	f
MONITORED	slime/metering.lisp	/^(defun MONITORED (function-place)$/;"	f
Macro-expansion	slime/doc/html/Macro_002dexpansion.html	/^<a name="Macro-expansion"><\/a>$/;"	a
Macro_002dexpansion	slime/doc/html/Macro_002dexpansion.html	/^<a name="Macro_002dexpansion"><\/a>$/;"	a
Misc	slime/doc/html/Misc.html	/^<a name="Misc"><\/a>$/;"	a
Miscellaneous	slime/doc/html/Miscellaneous.html	/^<a name="Miscellaneous"><\/a>$/;"	a
Multiple-Lisps	slime/doc/html/Multiple-Lisps.html	/^<a name="Multiple-Lisps"><\/a>$/;"	a
Multiple-connections	slime/doc/html/Multiple-connections.html	/^<a name="Multiple-connections"><\/a>$/;"	a
Multithreading	slime/doc/html/Multithreading.html	/^<a name="Multithreading"><\/a>$/;"	a
NEXT_RE	practicals-1.0.3/libraries/cl-ppcre-1.2.3/perltest.pl	/^NEXT_RE: while (1) {$/;"	l
Noun	paip/aip_ch2.lisp	/^(defun Noun ()$/;"	f
Other	slime/doc/html/Other.html	/^<a name="Other"><\/a>$/;"	a
Other-configurables	slime/doc/html/Other-configurables.html	/^<a name="Other-configurables"><\/a>$/;"	a
PLACE-FBOUNDP	slime/metering.lisp	/^(defun PLACE-FBOUNDP (function-place)$/;"	f
PLACE-FUNCTION	slime/metering.lisp	/^(defmacro PLACE-FUNCTION (function-place)$/;"	f
PLACE-FUNCTION	slime/metering.lisp	/^(defsetf PLACE-FUNCTION (function-place) (function)$/;"	f
PLACE-FUNCTION	slime/metering.lisp	/^(defun PLACE-FUNCTION (function-place)$/;"	f
PLACE-MACROP	slime/metering.lisp	/^(defun PLACE-MACROP (function-place)$/;"	f
PP	paip/aip_ch2.lisp	/^(defun PP ()$/;"	f
PP*	paip/aip_ch2.lisp	/^(defun PP* ()$/;"	f
Platforms	slime/doc/html/Platforms.html	/^<a name="Platforms"><\/a>$/;"	a
Prep	paip/aip_ch2.lisp	/^(defun Prep ()$/;"	f
Presentations	slime/doc/html/Presentations.html	/^<a name="Presentations"><\/a>$/;"	a
Profiling	slime/doc/html/Profiling.html	/^<a name="Profiling"><\/a>$/;"	a
Programming	slime/doc/html/Programming.html	/^<a name="Programming"><\/a>$/;"	a
REPL	slime/doc/html/REPL.html	/^<a name="REPL"><\/a>$/;"	a
REPL-commands	slime/doc/html/REPL-commands.html	/^<a name="REPL-commands"><\/a>$/;"	a
REPORT	slime/metering.lisp	/^(defun REPORT (&key (names :all)$/;"	f
REPORT-MONITORING	slime/metering.lisp	/^(defun REPORT-MONITORING (&optional names$/;"	f
Reader-conditionals	slime/doc/html/Reader-conditionals.html	/^<a name="Reader-conditionals"><\/a>$/;"	a
Recovery	slime/doc/html/Recovery.html	/^<a name="Recovery"><\/a>$/;"	a
Restarts	slime/doc/html/Restarts.html	/^<a name="Restarts"><\/a>$/;"	a
Running	slime/doc/html/Running.html	/^<a name="Running"><\/a>$/;"	a
SET-MONITOR-OVERHEAD	slime/metering.lisp	/^(defun SET-MONITOR-OVERHEAD ()$/;"	f
STUB-FUNCTION	slime/metering.lisp	/^(defun STUB-FUNCTION (x)$/;"	f
SUM	chiglug-macros/test.c	/^#define SUM(/;"	d	file:
Scratch-Buffer	slime/doc/html/Scratch-Buffer.html	/^<a name="Scratch-Buffer"><\/a>$/;"	a
Semantic-indentation	slime/doc/html/Semantic-indentation.html	/^<a name="Semantic-indentation"><\/a>$/;"	a
SessionLoad	Session.vim	/^let SessionLoad = 1$/;"	v
Setting-up-Emacs	slime/doc/html/Setting-up-Emacs.html	/^<a name="Setting-up-Emacs"><\/a>$/;"	a
Setting-up-pathname-translations	slime/doc/html/Setting-up-pathname-translations.html	/^<a name="Setting-up-pathname-translations"><\/a>$/;"	a
Setting-up-the-lisp-image	slime/doc/html/Setting-up-the-lisp-image.html	/^<a name="Setting-up-the-lisp-image"><\/a>$/;"	a
Setup-Tuning	slime/doc/html/Setup-Tuning.html	/^<a name="Setup-Tuning"><\/a>$/;"	a
Shortcuts	slime/doc/html/Shortcuts.html	/^<a name="Shortcuts"><\/a>$/;"	a
Stepping	slime/doc/html/Stepping.html	/^<a name="Stepping"><\/a>$/;"	a
TEXI	slime/doc/Makefile	/^TEXI = slime.texi contributors.texi$/;"	m
TRAMP	slime/doc/html/TRAMP.html	/^<a name="TRAMP"><\/a>$/;"	a
Temporary-buffers	slime/doc/html/Temporary-buffers.html	/^<a name="Temporary-buffers"><\/a>$/;"	a
Tips-and-Tricks	slime/doc/html/Tips-and-Tricks.html	/^<a name="Tips-and-Tricks"><\/a>$/;"	a
Top	slime/doc/html/index.html	/^<a name="Top"><\/a>$/;"	a
Typeout-frames	slime/doc/html/Typeout-frames.html	/^<a name="Typeout-frames"><\/a>$/;"	a
UNMONITOR	slime/metering.lisp	/^(defmacro UNMONITOR (&rest names)$/;"	f
User-interface-conventions	slime/doc/html/User_002dinterface-conventions.html	/^<a name="User-interface-conventions"><\/a>$/;"	a
User_002dinterface-conventions	slime/doc/html/User_002dinterface-conventions.html	/^<a name="User_002dinterface-conventions"><\/a>$/;"	a
Variable-Index	slime/doc/html/Variable-Index.html	/^<a name="Variable-Index"><\/a>$/;"	a
Verb	paip/aip_ch2.lisp	/^(defun Verb ()$/;"	f
WITH-MONITORING	slime/metering.lisp	/^(defmacro WITH-MONITORING ((&rest functions)$/;"	f
Xref-and-Class-Browser	slime/doc/html/Xref-and-Class-Browser.html	/^<a name="Xref-and-Class-Browser"><\/a>$/;"	a
\b	Session.vim	/^map <buffer> \\b <Plug>JavagetsetInsertBothGetterSetter$/;"	m
\g	Session.vim	/^map <buffer> \\g <Plug>JavagetsetInsertGetterOnly$/;"	m
\p	Session.vim	/^map <buffer> \\p <Plug>JavagetsetInsertGetterSetter$/;"	m
\s	Session.vim	/^map <buffer> \\s <Plug>JavagetsetInsertSetterOnly$/;"	m
abbrev-doc	slime/contrib/swank-fancy-inspector.lisp	/^(defun abbrev-doc (doc &optional (maxlen 80))$/;"	f
abort	slime/xref.lisp	/^(define-caller-pattern abort (&optional form) :lisp2)$/;"	f
abort-transaction	chiglug-macros/power-of-lisp-macros.lisp	/^(defun abort-transaction ()$/;"	f
abs	slime/xref.lisp	/^(define-caller-pattern abs (form) :lisp)$/;"	f
accept	slime/swank-ecl.lisp	/^(defun accept (socket)$/;"	f
accept	slime/swank-sbcl.lisp	/^(defun accept (socket)$/;"	f
accept-authenticated-connection	slime/swank.lisp	/^(defun accept-authenticated-connection (&rest args)$/;"	f
accept-connection	slime/swank-abcl.lisp	/^(defimplementation accept-connection (socket $/;"	f
accept-connection	slime/swank-allegro.lisp	/^(defimplementation accept-connection (socket &key external-format buffering$/;"	f
accept-connection	slime/swank-backend.lisp	/^(definterface accept-connection (socket &key external-format$/;"	f
accept-connection	slime/swank-clisp.lisp	/^(defimplementation accept-connection (socket$/;"	f
accept-connection	slime/swank-cmucl.lisp	/^(defimplementation accept-connection (socket &key$/;"	f
accept-connection	slime/swank-corman.lisp	/^(defimplementation accept-connection (socket$/;"	f
accept-connection	slime/swank-ecl.lisp	/^(defimplementation accept-connection (socket$/;"	f
accept-connection	slime/swank-lispworks.lisp	/^(defimplementation accept-connection (socket $/;"	f
accept-connection	slime/swank-openmcl.lisp	/^(defimplementation accept-connection (socket &key external-format$/;"	f
accept-connection	slime/swank-sbcl.lisp	/^(defimplementation accept-connection (socket &key$/;"	f
accept-connection	slime/swank-scl.lisp	/^(defimplementation accept-connection (socket $/;"	f
accept-connections	slime/contrib/swank-mit-scheme.scm	/^(define (accept-connections port port-file)$/;"	f
accumulate	jos-mittest.lisp	/^(defun accumulate (combiner null-value l)$/;"	f
achieve	paip/aip_ch4.lisp	/^(defun achieve (goal)$/;"	f
ack	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<br>&nbsp;<br><h3><a class=none name="ack">Acknowledgements<\/a><\/h3>$/;"	a
acl-profiler-active-p	slime/swank-allegro.lisp	/^(defun acl-profiler-active-p ()$/;"	f
acons	slime/xref.lisp	/^(define-caller-pattern acons (form form form) :lisp)$/;"	f
acos	slime/xref.lisp	/^(define-caller-pattern acos (form) :lisp)$/;"	f
acosh	slime/xref.lisp	/^(define-caller-pattern acosh (form) :lisp)$/;"	f
action-part	slime/swank.lisp	/^(defun action-part (label lambda refreshp)$/;"	f
activate-stepping	slime/swank-backend.lisp	/^(definterface activate-stepping (frame-number)$/;"	f
activate-stepping	slime/swank-cmucl.lisp	/^(defimplementation activate-stepping (frame)$/;"	f
activate-stepping	slime/swank-scl.lisp	/^(defimplementation activate-stepping (frame)$/;"	f
add-cds	db.lisp	/^(defun add-cds ()$/;"	f
add-cds	practicals-1.0.3/Chapter03/simple-database.lisp	/^(defun add-cds ()$/;"	f
add-directory-to-corpus	practicals-1.0.3/Chapter23/spam.lisp	/^(defun add-directory-to-corpus (dir type corpus)$/;"	f
add-exp	slime/nregex.lisp	/^(defmacro add-exp (list)$/;"	f
add-fd-handler	slime/swank-backend.lisp	/^(definterface add-fd-handler (socket fn)$/;"	f
add-fd-handler	slime/swank-cmucl.lisp	/^(defimplementation add-fd-handler (socket fn)$/;"	f
add-fd-handler	slime/swank-sbcl.lisp	/^(defimplementation add-fd-handler (socket fn)$/;"	f
add-file-to-corpus	practicals-1.0.3/Chapter23/spam.lisp	/^(defun add-file-to-corpus (filename type corpus)$/;"	f
add-file-to-songs	practicals-1.0.3/Chapter28/song-source.lisp	/^(defun add-file-to-songs (file)$/;"	f
add-hook	slime/swank.lisp	/^(defmacro add-hook (place function)$/;"	f
add-method	slime/xref.lisp	/^(define-caller-pattern add-method (fn form) :lisp2)$/;"	f
add-range-to-hash	practicals-1.0.3/libraries/cl-ppcre-1.2.3/convert.lisp	/^(defun add-range-to-hash (hash from to)$/;"	f
add-record	db.lisp	/^(defun add-record (cd) (push cd *db*))$/;"	f
add-record	practicals-1.0.3/Chapter03/simple-database.lisp	/^(defun add-record (cd) (push cd *db*))$/;"	f
add-sigio-handler	slime/swank-backend.lisp	/^(definterface add-sigio-handler (socket fn)$/;"	f
add-sigio-handler	slime/swank-cmucl.lisp	/^(defimplementation add-sigio-handler (socket fn)$/;"	f
add-sigio-handler	slime/swank-sbcl.lisp	/^(defimplementation add-sigio-handler (socket fn)$/;"	f
add-songs	practicals-1.0.3/Chapter29/playlist.lisp	/^(defun add-songs (playlist column-name values)$/;"	f
add-vat	chiglug-macros/power-of-lisp-macros.lisp	/^(define-compiler-macro add-vat (amount &key (tax-rate .19))$/;"	f
add-vat	chiglug-macros/power-of-lisp-macros.lisp	/^(defun add-vat (amount &key (tax-rate .19))$/;"	f
add-vat%	chiglug-macros/power-of-lisp-macros.lisp	/^(defun add-vat% (amount tax-rate)$/;"	f
adjoin	slime/xref.lisp	/^(define-caller-pattern adjoin (form form &key (:star form)) :lisp)$/;"	f
adjust-array	slime/xref.lisp	/^(define-caller-pattern adjust-array (form form &key (:star form)) :lisp)$/;"	f
adjustable-array-p	slime/xref.lisp	/^(define-caller-pattern adjustable-array-p (form) :lisp)$/;"	f
after	onlisp.lisp	/^(defun after (x y lst &key (test #'eql))$/;"	f
album	practicals-1.0.3/Chapter25/id3v2.lisp	/^(defun album (id3) (get-text-info id3 "TAL" "TALB"))$/;"	f
all-completions	slime/contrib/swank-mit-scheme.scm	/^(define (all-completions pattern env match?)$/;"	f
all-completions	slime/swank.lisp	/^(defun all-completions (string package test)$/;"	f
all-matches	practicals-1.0.3/libraries/cl-ppcre-1.2.3/api.lisp	/^(define-compiler-macro all-matches (&whole form &environment env regex &rest rest)$/;"	f
all-matches	practicals-1.0.3/libraries/cl-ppcre-1.2.3/api.lisp	/^(defun all-matches (regex target-string$/;"	f
all-matches	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<br><a class=none name="all-matches"><b>all-matches<\/b> <i>regex target-string <tt>&amp;key<\/tt> start end<\/i> =&gt; <i>list<\/i><\/a>$/;"	a
all-matches-as-strings	practicals-1.0.3/libraries/cl-ppcre-1.2.3/api.lisp	/^(define-compiler-macro all-matches-as-strings (&whole form &environment env regex &rest rest)$/;"	f
all-matches-as-strings	practicals-1.0.3/libraries/cl-ppcre-1.2.3/api.lisp	/^(defun all-matches-as-strings (regex target-string$/;"	f
all-matches-as-strings	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<br><a class=none name="all-matches-as-strings"><b>all-matches-as-strings<\/b> <i>regex target-string <tt>&amp;key<\/tt> start end sharedp<\/i> =&gt; <i>list<\/i><\/a>$/;"	a
all-packages	slime/contrib/swank-mit-scheme.scm	/^(define (all-packages)$/;"	f
all-playlists	practicals-1.0.3/Chapter29/mp3-browser.lisp	/^(define-url-function all-playlists (request)$/;"	f
all-slots	practicals-1.0.3/Chapter24/binary-data.lisp	/^(defun all-slots (name)$/;"	f
all-slots-for-inspector	slime/contrib/swank-fancy-inspector.lisp	/^(defgeneric all-slots-for-inspector (object)$/;"	f
all-threads	slime/swank-abcl.lisp	/^(defimplementation all-threads ()$/;"	f
all-threads	slime/swank-allegro.lisp	/^(defimplementation all-threads ()$/;"	f
all-threads	slime/swank-backend.lisp	/^(definterface all-threads ()$/;"	f
all-threads	slime/swank-corman.lisp	/^(defimplementation all-threads ()$/;"	f
all-threads	slime/swank-lispworks.lisp	/^(defimplementation all-threads ()$/;"	f
all-threads	slime/swank-openmcl.lisp	/^(defimplementation all-threads ()$/;"	f
all-threads	slime/swank-scl.lisp	/^(defimplementation all-threads ()$/;"	f
allegro	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<br>&nbsp;<br><h3><a class=none name="allegro">AllegroCL compatibility mode<\/a><\/h3>$/;"	a
allegro-inspect	slime/swank-allegro.lisp	/^(defun allegro-inspect (o)$/;"	f
alpha	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<h4><a name="alpha" class=none>What about <code>&quot;\\w&quot;<\/code>?<\/a><\/h4>$/;"	a
alpha-char-p	slime/xref.lisp	/^(define-caller-pattern alpha-char-p (form) :lisp)$/;"	f
alphanumericp	slime/xref.lisp	/^(define-caller-pattern alphanumericp (form) :lisp)$/;"	f
analyze-results	practicals-1.0.3/Chapter23/spam.lisp	/^(defun analyze-results (results)$/;"	f
and	slime/xref.lisp	/^(define-caller-pattern and ((:star form)) :lisp)$/;"	f
announce-server-port	slime/swank.lisp	/^(defun announce-server-port (file port)$/;"	f
append	slime/xref.lisp	/^(define-caller-pattern append ((:star form)) :lisp)$/;"	f
append-dir	slime/swank-loader.lisp	/^(defun append-dir (absolute name)$/;"	f
append-xs	test.lisp	/^(defun append-xs (ll n)$/;"	f
applicable-methods-keywords	slime/contrib/swank-arglists.lisp	/^(defun applicable-methods-keywords (generic-function arguments)$/;"	f
application-indentation-hint	slime/contrib/swank-indentation.lisp	/^(defun application-indentation-hint (symbol)$/;"	f
apply	slime/xref.lisp	/^(define-caller-pattern apply (fn form (:star form)) :lisp)$/;"	f
apply-macro-expander	slime/swank.lisp	/^(defun apply-macro-expander (expander string)$/;"	f
apply-op	paip/aip_ch4.lisp	/^(defun apply-op (op)$/;"	f
applyhook	slime/xref.lisp	/^(define-caller-pattern applyhook (fn form fn fn &optional :ignore) :lisp)$/;"	f
appropriate-p	paip/aip_ch4.lisp	/^(defun appropriate-p (goal op)$/;"	f
apropos	slime/xref.lisp	/^(define-caller-pattern apropos (form (:optional form)) :lisp)$/;"	f
apropos-list	slime/xref.lisp	/^(define-caller-pattern apropos-list (form (:optional form)) :lisp)$/;"	f
apropos-list-for-emacs	slime/swank.lisp	/^(defslimefun apropos-list-for-emacs  (name &optional external-only $/;"	f
apropos-symbols	slime/swank.lisp	/^(defun apropos-symbols (string external-only case-sensitive package)$/;"	f
aref	slime/xref.lisp	/^(define-caller-pattern aref (form (:star form)) :lisp)$/;"	f
arglist	slime/slime.el	/^(def-slime-test arglist$/;"	f
arglist	slime/swank-abcl.lisp	/^(defimplementation arglist (fun)$/;"	f
arglist	slime/swank-allegro.lisp	/^(defimplementation arglist (symbol)$/;"	f
arglist	slime/swank-backend.lisp	/^(definterface arglist (name)$/;"	f
arglist	slime/swank-clisp.lisp	/^(defimplementation arglist (fname)$/;"	f
arglist	slime/swank-cmucl.lisp	/^(defimplementation arglist (fun)$/;"	f
arglist	slime/swank-corman.lisp	/^(defimplementation arglist (name)$/;"	f
arglist	slime/swank-ecl.lisp	/^(defimplementation arglist (name)$/;"	f
arglist	slime/swank-lispworks.lisp	/^(defimplementation arglist (symbol-or-function)$/;"	f
arglist	slime/swank-openmcl.lisp	/^(defimplementation arglist (fname)$/;"	f
arglist	slime/swank-sbcl.lisp	/^(defimplementation arglist (fname)$/;"	f
arglist	slime/swank-scl.lisp	/^(defimplementation arglist (fun)$/;"	f
arglist%	slime/swank-openmcl.lisp	/^(defmethod arglist% ((f function))$/;"	f
arglist%	slime/swank-openmcl.lisp	/^(defmethod arglist% ((f symbol))$/;"	f
arglist-dispatch	slime/contrib/swank-arglists.lisp	/^(defgeneric arglist-dispatch (operator-type operator arguments &key remove-args))$/;"	f
arglist-dispatch	slime/contrib/swank-arglists.lisp	/^(defmethod arglist-dispatch ((operator-type (eql :declaration))$/;"	f
arglist-dispatch	slime/contrib/swank-arglists.lisp	/^(defmethod arglist-dispatch ((operator-type (eql :function)) (operator (eql 'declare))$/;"	f
arglist-dispatch	slime/contrib/swank-arglists.lisp	/^(defmethod arglist-dispatch ((operator-type (eql :function)) (operator (eql 'defmethod))$/;"	f
arglist-dispatch	slime/contrib/swank-arglists.lisp	/^(defmethod arglist-dispatch ((operator-type (eql :function)) (operator (eql 'eval-when))$/;"	f
arglist-dispatch	slime/contrib/swank-arglists.lisp	/^(defmethod arglist-dispatch ((operator-type (eql :type-specifier))$/;"	f
arglist-dispatch	slime/contrib/swank-arglists.lisp	/^(defmethod arglist-dispatch ((operator-type t) operator arguments &key (remove-args t))$/;"	f
arglist-for-echo-area	slime/contrib/swank-arglists.lisp	/^(defslimefun arglist-for-echo-area (raw-specs &key arg-indices$/;"	f
arglist-from-form-spec	slime/contrib/swank-arglists.lisp	/^(defun arglist-from-form-spec (form-spec &key (remove-args t))$/;"	f
arglist-keywords	slime/contrib/swank-arglists.lisp	/^(defun arglist-keywords (arglist)$/;"	f
arglist-ref	slime/contrib/swank-arglists.lisp	/^(defun arglist-ref (decoded-arglist operator &rest indices)$/;"	f
arglist-to-string	slime/contrib/swank-arglists.lisp	/^(defun arglist-to-string (arglist package &key print-right-margin highlight)$/;"	f
arith	macro_test.lisp	/^(defmacro arith (/;"	f
arithmetic-error-operands	slime/xref.lisp	/^(define-caller-pattern arithmetic-error-operands (form) :lisp2)$/;"	f
arithmetic-error-operation	slime/xref.lisp	/^(define-caller-pattern arithmetic-error-operation (form) :lisp2)$/;"	f
array-dimension	slime/xref.lisp	/^(define-caller-pattern array-dimension (form form) :lisp)$/;"	f
array-dimension-limit	slime/xref.lisp	/^(define-variable-pattern array-dimension-limit :lisp)$/;"	f
array-dimensions	slime/xref.lisp	/^(define-caller-pattern array-dimensions (form) :lisp)$/;"	f
array-element-type	slime/xref.lisp	/^(define-caller-pattern array-element-type (form) :lisp)$/;"	f
array-has-fill-pointer-p	slime/xref.lisp	/^(define-caller-pattern array-has-fill-pointer-p (form) :lisp)$/;"	f
array-in-bounds-p	slime/xref.lisp	/^(define-caller-pattern array-in-bounds-p (form (:star form)) :lisp)$/;"	f
array-rank	slime/xref.lisp	/^(define-caller-pattern array-rank (form) :lisp)$/;"	f
array-rank-limit	slime/xref.lisp	/^(define-variable-pattern array-rank-limit :lisp)$/;"	f
array-row-major-index	slime/xref.lisp	/^(define-caller-pattern array-row-major-index (form (:star form)) :lisp)$/;"	f
array-total-size	slime/xref.lisp	/^(define-caller-pattern array-total-size (form) :lisp)$/;"	f
array-total-size-limit	slime/xref.lisp	/^(define-variable-pattern array-total-size-limit :lisp)$/;"	f
arrayp	slime/xref.lisp	/^(define-caller-pattern arrayp (form) :lisp)$/;"	f
artist	practicals-1.0.3/Chapter25/id3v2.lisp	/^(defun artist (id3) (get-text-info id3 "TP1" "TPE1"))$/;"	f
as-keyword	practicals-1.0.3/Chapter24/binary-data.lisp	/^(defun as-keyword (sym) (intern (string sym) :keyword))$/;"	f
as-keyword	practicals-1.0.3/Chapter27/database.lisp	/^(defun as-keyword (symbol)$/;"	f
ascii-char-p	slime/swank.lisp	/^(defun ascii-char-p (c) $/;"	f
ascii-string-p	slime/swank.lisp	/^(defun ascii-string-p (o)$/;"	f
asdf-central-registry	slime/contrib/swank-asdf.lisp	/^(defun asdf-central-registry ()$/;"	f
ash	slime/xref.lisp	/^(define-caller-pattern ash (form form) :lisp)$/;"	f
asin	slime/xref.lisp	/^(define-caller-pattern asin (form) :lisp)$/;"	f
asinh	slime/xref.lisp	/^(define-caller-pattern asinh (form) :lisp)$/;"	f
assert	slime/contrib/swank-kawa.scm	/^(define-syntax assert$/;"	f
assert	slime/xref.lisp	/^(define-caller-pattern assert $/;"	f
assign-index	slime/contrib/swank-mit-scheme.scm	/^(define (assign-index o parts)$/;"	f
assign-index	slime/swank.lisp	/^(defun assign-index (object vector)$/;"	f
assoc	slime/xref.lisp	/^(define-caller-pattern assoc (form form &key (:star form)) :lisp)$/;"	f
assoc-if	slime/xref.lisp	/^(define-caller-pattern assoc-if (fn form) :lisp)$/;"	f
assoc-if-not	slime/xref.lisp	/^(define-caller-pattern assoc-if-not (fn form) :lisp)$/;"	f
async-eval-debugging	slime/slime.el	/^(def-slime-test async-eval-debugging (depth)$/;"	f
at-end-p	practicals-1.0.3/Chapter29/playlist.lisp	/^(defun at-end-p (playlist)$/;"	f
atan	slime/xref.lisp	/^(define-caller-pattern atan (form &optional form) :lisp)$/;"	f
atanh	slime/xref.lisp	/^(define-caller-pattern atanh (form) :lisp)$/;"	f
atom	slime/xref.lisp	/^(define-caller-pattern atom (form) :lisp)$/;"	f
augment-environment	slime/xref.lisp	/^(define-caller-pattern augment-environment (form &key (:star :ignore)) :lisp2)$/;"	f
auto-abbreviated-package-name	slime/swank.lisp	/^(defun auto-abbreviated-package-name (package)$/;"	f
average	nifty_funs.lisp	/^(defun average (list)$/;"	f
background-message	slime/swank-cmucl.lisp	/^(defun background-message (message)$/;"	f
background-message	slime/swank.lisp	/^(defun background-message  (format-string &rest args)$/;"	f
backslash	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<h4><a name="backslash" class=none>Backslashes may confuse you...<\/a><\/h4>$/;"	a
backtrace	slime/swank.lisp	/^(defslimefun backtrace (start end)$/;"	f
backtrace-as-list-ignoring-swank-calls	slime/swank-abcl.lisp	/^(defun backtrace-as-list-ignoring-swank-calls ()$/;"	f
backtrace-context	slime/swank-openmcl.lisp	/^(defun backtrace-context ()$/;"	f
backtrack-next	sudoku/sudoku.lisp	/^(defun backtrack-next (x y puzzle)$/;"	f
backtracking	sudoku/sudoku.lisp	/^(defun backtracking (file &optional (outfile ".\/solution.txt"))$/;"	f
backwards	macro_test.lisp	/^(defmacro backwards (command)$/;"	f
base64->obj	practicals-1.0.3/Chapter29/mp3-browser.lisp	/^(defun base64->obj (string)$/;"	f
bayesian-spam-probability	practicals-1.0.3/Chapter23/spam.lisp	/^(defun bayesian-spam-probability (feature &optional$/;"	f
before	onlisp.lisp	/^(defun before (x y lst &key (test #'eql))$/;"	f
before-init	slime/swank.lisp	/^(defun before-init (version load-path)$/;"	f
begin-transaction	chiglug-macros/power-of-lisp-macros.lisp	/^(defun begin-transaction ()$/;"	f
bench	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<h4><a name="bench" class=none>Benchmarking<\/a><\/h4>$/;"	a
best	onlisp.lisp	/^(defun best (fn lst)$/;"	f
binary-pathname	slime/swank-loader.lisp	/^(defun binary-pathname (src-pathname binary-dir)$/;"	f
bit	slime/xref.lisp	/^(define-caller-pattern bit (form (:star form)) :lisp)$/;"	f
bit-and	slime/xref.lisp	/^(define-caller-pattern bit-and (form form (:optional form)) :lisp)$/;"	f
bit-andc1	slime/xref.lisp	/^(define-caller-pattern bit-andc1 (form form (:optional form)) :lisp)$/;"	f
bit-andc2	slime/xref.lisp	/^(define-caller-pattern bit-andc2 (form form (:optional form)) :lisp)$/;"	f
bit-eqv	slime/xref.lisp	/^(define-caller-pattern bit-eqv (form form (:optional form)) :lisp)$/;"	f
bit-ior	slime/xref.lisp	/^(define-caller-pattern bit-ior (form form (:optional form)) :lisp)$/;"	f
bit-nand	slime/xref.lisp	/^(define-caller-pattern bit-nand (form form (:optional form)) :lisp)$/;"	f
bit-nor	slime/xref.lisp	/^(define-caller-pattern bit-nor (form form (:optional form)) :lisp)$/;"	f
bit-not	slime/xref.lisp	/^(define-caller-pattern bit-not (form (:optional form)) :lisp)$/;"	f
bit-orc1	slime/xref.lisp	/^(define-caller-pattern bit-orc1 (form form (:optional form)) :lisp)$/;"	f
bit-orc2	slime/xref.lisp	/^(define-caller-pattern bit-orc2 (form form (:optional form)) :lisp)$/;"	f
bit-vector-p	slime/xref.lisp	/^(define-caller-pattern bit-vector-p (form) :lisp)$/;"	f
bit-xor	slime/xref.lisp	/^(define-caller-pattern bit-xor (form form (:optional form)) :lisp)$/;"	f
block	slime/xref.lisp	/^(define-caller-pattern block (name (:star form)) :lisp)$/;"	f
block-element-p	practicals-1.0.3/Chapter31/html.lisp	/^(defun block-element-p (tag) (find tag *block-elements*))$/;"	f
bmh-matcher-aux	practicals-1.0.3/libraries/cl-ppcre-1.2.3/scanner.lisp	/^(defmacro bmh-matcher-aux (&key case-insensitive-p)$/;"	f
body	slime/xref.lisp	/^(define-pattern-substitution body$/;"	f
boole	slime/xref.lisp	/^(define-caller-pattern boole (form form form) :lisp)$/;"	f
boole-1	slime/xref.lisp	/^(define-variable-pattern boole-1 :lisp)$/;"	f
boole-2	slime/xref.lisp	/^(define-variable-pattern boole-2 :lisp)$/;"	f
boole-and	slime/xref.lisp	/^(define-variable-pattern boole-and :lisp)$/;"	f
boole-andc1	slime/xref.lisp	/^(define-variable-pattern boole-andc1 :lisp)$/;"	f
boole-andc2	slime/xref.lisp	/^(define-variable-pattern boole-andc2 :lisp)$/;"	f
boole-c1	slime/xref.lisp	/^(define-variable-pattern boole-c1 :lisp)$/;"	f
boole-c2	slime/xref.lisp	/^(define-variable-pattern boole-c2 :lisp)$/;"	f
boole-clr	slime/xref.lisp	/^(define-variable-pattern boole-clr :lisp)$/;"	f
boole-eqv	slime/xref.lisp	/^(define-variable-pattern boole-eqv :lisp)$/;"	f
boole-ior	slime/xref.lisp	/^(define-variable-pattern boole-ior :lisp)$/;"	f
boole-nand	slime/xref.lisp	/^(define-variable-pattern boole-nand :lisp)$/;"	f
boole-nor	slime/xref.lisp	/^(define-variable-pattern boole-nor :lisp)$/;"	f
boole-orc1	slime/xref.lisp	/^(define-variable-pattern boole-orc1 :lisp)$/;"	f
boole-orc2	slime/xref.lisp	/^(define-variable-pattern boole-orc2 :lisp)$/;"	f
boole-set	slime/xref.lisp	/^(define-variable-pattern boole-set :lisp)$/;"	f
boole-xor	slime/xref.lisp	/^(define-variable-pattern boole-xor :lisp)$/;"	f
boring-frame-p	slime/swank-clisp.lisp	/^(defun boring-frame-p (frame)$/;"	f
both-case-p	slime/xref.lisp	/^(define-caller-pattern both-case-p (form) :lisp)$/;"	f
boundp	slime/xref.lisp	/^(define-caller-pattern boundp (form) :lisp)$/;"	f
br	chiglug-macros/power-of-lisp-macros.lisp	/^(define-html-tag br no-body clear)$/;"	f
break	slime/slime.el	/^(def-slime-test break $/;"	f
break	slime/swank-corman.lisp	/^(defun break (&optional (format-control "Break") &rest format-arguments)$/;"	f
break	slime/xref.lisp	/^(define-caller-pattern break (&optional form (:star form)) :lisp)$/;"	f
break-in-sldb	slime/swank-openmcl.lisp	/^(defun break-in-sldb (&optional string &rest args)$/;"	f
break-loop	onlisp.lisp	/^(defun break-loop (fn quit &rest args)$/;"	f
break-on-return	slime/swank-cmucl.lisp	/^(defun break-on-return (frame)$/;"	f
break-on-return	slime/swank-scl.lisp	/^(defun break-on-return (frame)$/;"	f
breakpoint	slime/swank-cmucl.lisp	/^(define-condition breakpoint (simple-condition) $/;"	f
breakpoint	slime/swank-scl.lisp	/^(define-condition breakpoint (simple-condition) $/;"	f
breakpoint-values	slime/swank-cmucl.lisp	/^(defun breakpoint-values (breakpoint)$/;"	f
breakpoint-values	slime/swank-scl.lisp	/^(defun breakpoint-values (breakpoint)$/;"	f
bridge-call-handler	slime/contrib/bridge.el	/^(defun bridge-call-handler (handler proc string)$/;"	f
bridge-chunk-size	slime/contrib/bridge.el	/^(defvar bridge-chunk-size 512$/;"	f
bridge-destination-insert	slime/contrib/bridge.el	/^(defvar bridge-destination-insert t$/;"	f
bridge-end-regexp	slime/contrib/bridge.el	/^(defvar bridge-end-regexp ""$/;"	f
bridge-filter	slime/contrib/bridge.el	/^(defun bridge-filter (process output)$/;"	f
bridge-handlers	slime/contrib/bridge.el	/^(defvar bridge-handlers nil$/;"	f
bridge-hook	slime/contrib/bridge.el	/^(defvar bridge-hook nil$/;"	f
bridge-in-progress	slime/contrib/bridge.el	/^(defvar bridge-in-progress nil$/;"	f
bridge-insert	slime/contrib/bridge.el	/^(defun bridge-insert (output)$/;"	f
bridge-last-failure	slime/contrib/bridge.el	/^(defvar bridge-last-failure ()$/;"	f
bridge-leftovers	slime/contrib/bridge.el	/^(defvar bridge-leftovers nil$/;"	f
bridge-old-filter	slime/contrib/bridge.el	/^(defvar bridge-old-filter nil$/;"	f
bridge-prompt-regexp	slime/contrib/bridge.el	/^(defvar bridge-prompt-regexp nil$/;"	f
bridge-send-handler	slime/contrib/bridge.el	/^(defun bridge-send-handler (process input)$/;"	f
bridge-send-to-buffer	slime/contrib/bridge.el	/^(defvar bridge-send-to-buffer nil$/;"	f
bridge-source-insert	slime/contrib/bridge.el	/^(defvar bridge-source-insert t$/;"	f
bridge-start-regexp	slime/contrib/bridge.el	/^(defvar bridge-start-regexp ""$/;"	f
bridge-string	slime/contrib/bridge.el	/^(defvar bridge-string nil $/;"	f
brief-compiler-message-for-emacs	slime/swank-cmucl.lisp	/^(defun brief-compiler-message-for-emacs (condition)$/;"	f
brief-compiler-message-for-emacs	slime/swank-sbcl.lisp	/^(defun brief-compiler-message-for-emacs (condition)$/;"	f
brief-compiler-message-for-emacs	slime/swank-scl.lisp	/^(defun brief-compiler-message-for-emacs (condition)$/;"	f
briefly-describe-symbol-for-emacs	slime/swank.lisp	/^(defun briefly-describe-symbol-for-emacs (symbol)$/;"	f
broadcast-stream-streams	slime/xref.lisp	/^(define-caller-pattern broadcast-stream-streams (form) :lisp2)$/;"	f
browse	practicals-1.0.3/Chapter29/mp3-browser.lisp	/^(define-url-function browse$/;"	f
browse-link	practicals-1.0.3/Chapter29/mp3-browser.lisp	/^(defun browse-link (new-what what value)$/;"	f
browse-page-title	practicals-1.0.3/Chapter29/mp3-browser.lisp	/^(defun browse-page-title (what random genre artist album)$/;"	f
buffer-first-change	slime/contrib/swank-kawa.scm	/^(defslimefun buffer-first-change (#!rest y) '())$/;"	f
buffer-first-change	slime/swank-backend.lisp	/^(definterface buffer-first-change (filename)$/;"	f
buffer-first-change	slime/swank-source-file-cache.lisp	/^(defimplementation buffer-first-change (filename)$/;"	f
bugs	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<br>&nbsp;<br><h3><a name="bugs" class=none>Bugs and problems<\/a><\/h3>$/;"	a
build-replacement	practicals-1.0.3/libraries/cl-ppcre-1.2.3/api.lisp	/^(defun build-replacement (replacement-template$/;"	f
build-replacement-template	practicals-1.0.3/libraries/cl-ppcre-1.2.3/api.lisp	/^(defmethod build-replacement-template ((replacement-function function))$/;"	f
build-replacement-template	practicals-1.0.3/libraries/cl-ppcre-1.2.3/api.lisp	/^(defmethod build-replacement-template ((replacement-function-symbol symbol))$/;"	f
build-replacement-template	practicals-1.0.3/libraries/cl-ppcre-1.2.3/api.lisp	/^(defmethod build-replacement-template ((replacement-list list))$/;"	f
butlast	slime/xref.lisp	/^(define-caller-pattern butlast (form (:optional form)) :lisp)$/;"	f
byte	slime/xref.lisp	/^(define-caller-pattern byte (form form) :lisp)$/;"	f
byte-code-function-arglist	slime/swank-cmucl.lisp	/^(defun byte-code-function-arglist (fn)$/;"	f
byte-code-function-arglist	slime/swank-scl.lisp	/^(defun byte-code-function-arglist (fn)$/;"	f
byte-function-location	slime/swank-cmucl.lisp	/^(defun byte-function-location (fun)$/;"	f
byte-function-location	slime/swank-scl.lisp	/^(defun byte-function-location (fn)$/;"	f
byte-position	slime/xref.lisp	/^(define-caller-pattern byte-position (form) :lisp)$/;"	f
byte-size	slime/xref.lisp	/^(define-caller-pattern byte-size (form) :lisp)$/;"	f
bytes-left	practicals-1.0.3/Chapter25/id3v2.lisp	/^(defun bytes-left (bytes-read)$/;"	f
c-error	slime/swank-clisp.lisp	/^(defun c-error (cstring &rest args)$/;"	f
c-style-warn	slime/swank-clisp.lisp	/^(defun c-style-warn (cstring &rest args)$/;"	f
c-warn	slime/swank-clisp.lisp	/^(defun c-warn (cstring &rest args)$/;"	f
c2i	config-parser.lisp	/^(defun c2i (c)$/;"	f
c2i	sudoku/config-parser.lisp	/^(defun c2i (c)$/;"	f
caaaar	slime/xref.lisp	/^(define-caller-pattern caaaar (form) :lisp)$/;"	f
caaadr	slime/xref.lisp	/^(define-caller-pattern caaadr (form) :lisp)$/;"	f
caaar	slime/xref.lisp	/^(define-caller-pattern caaar (form) :lisp)$/;"	f
caadar	slime/xref.lisp	/^(define-caller-pattern caadar (form) :lisp)$/;"	f
caaddr	slime/xref.lisp	/^(define-caller-pattern caaddr (form) :lisp)$/;"	f
caadr	slime/xref.lisp	/^(define-caller-pattern caadr (form) :lisp)$/;"	f
caar	slime/xref.lisp	/^(define-caller-pattern caar (form) :lisp)$/;"	f
cadaar	slime/xref.lisp	/^(define-caller-pattern cadaar (form) :lisp)$/;"	f
cadadr	slime/xref.lisp	/^(define-caller-pattern cadadr (form) :lisp)$/;"	f
cadar	slime/xref.lisp	/^(define-caller-pattern cadar (form) :lisp)$/;"	f
caddar	slime/xref.lisp	/^(define-caller-pattern caddar (form) :lisp)$/;"	f
cadddr	slime/xref.lisp	/^(define-caller-pattern cadddr (form) :lisp)$/;"	f
caddr	slime/xref.lisp	/^(define-caller-pattern caddr (form) :lisp)$/;"	f
cadr	slime/xref.lisp	/^(define-caller-pattern cadr (form) :lisp)$/;"	f
calc	rpn.lisp	/^(defun calc (stack opt)$/;"	f
call-compiler	slime/contrib/swank-mit-scheme.scm	/^(define (call-compiler fun)$/;"	f
call-method	slime/xref.lisp	/^(define-caller-pattern call-method (form form) :lisp2)$/;"	f
call-next-method	slime/xref.lisp	/^(define-caller-pattern call-next-method ((:star form)) :lisp2)$/;"	f
call-with-bindings	slime/swank.lisp	/^(defun call-with-bindings (alist fun)$/;"	f
call-with-buffer-syntax	slime/swank.lisp	/^(defun call-with-buffer-syntax (fun)$/;"	f
call-with-compilation-hooks	slime/swank-abcl.lisp	/^(defimplementation call-with-compilation-hooks (function)$/;"	f
call-with-compilation-hooks	slime/swank-allegro.lisp	/^(defimplementation call-with-compilation-hooks (function)$/;"	f
call-with-compilation-hooks	slime/swank-backend.lisp	/^(definterface call-with-compilation-hooks (func)$/;"	f
call-with-compilation-hooks	slime/swank-clisp.lisp	/^(defimplementation call-with-compilation-hooks (function)$/;"	f
call-with-compilation-hooks	slime/swank-cmucl.lisp	/^(defimplementation call-with-compilation-hooks (function)$/;"	f
call-with-compilation-hooks	slime/swank-corman.lisp	/^(defimplementation call-with-compilation-hooks (FN)$/;"	f
call-with-compilation-hooks	slime/swank-ecl.lisp	/^(defimplementation call-with-compilation-hooks (function)$/;"	f
call-with-compilation-hooks	slime/swank-lispworks.lisp	/^(defimplementation call-with-compilation-hooks (function)$/;"	f
call-with-compilation-hooks	slime/swank-openmcl.lisp	/^(defimplementation call-with-compilation-hooks (function)$/;"	f
call-with-compilation-hooks	slime/swank-sbcl.lisp	/^(defimplementation call-with-compilation-hooks (function)$/;"	f
call-with-compilation-hooks	slime/swank-scl.lisp	/^(defimplementation call-with-compilation-hooks (function)$/;"	f
call-with-connection	slime/swank.lisp	/^(defun call-with-connection (connection fun)$/;"	f
call-with-debootstrapping	slime/swank-sbcl.lisp	/^(defun call-with-debootstrapping (fun)$/;"	f
call-with-debugger-hook	slime/swank-backend.lisp	/^(definterface call-with-debugger-hook (hook fun)$/;"	f
call-with-debugger-hook	slime/swank-ecl.lisp	/^(defimplementation call-with-debugger-hook (hook fun)$/;"	f
call-with-debugger-hook	slime/swank-lispworks.lisp	/^(defimplementation call-with-debugger-hook (hook fun)$/;"	f
call-with-debugger-hook	slime/swank-sbcl.lisp	/^(defimplementation call-with-debugger-hook (hook fun)$/;"	f
call-with-debugging-environment	slime/swank-abcl.lisp	/^(defimplementation call-with-debugging-environment (debugger-loop-fn)$/;"	f
call-with-debugging-environment	slime/swank-allegro.lisp	/^(defimplementation call-with-debugging-environment (debugger-loop-fn)$/;"	f
call-with-debugging-environment	slime/swank-backend.lisp	/^(definterface call-with-debugging-environment (debugger-loop-fn)$/;"	f
call-with-debugging-environment	slime/swank-clisp.lisp	/^(defimplementation call-with-debugging-environment (debugger-loop-fn)$/;"	f
call-with-debugging-environment	slime/swank-cmucl.lisp	/^(defimplementation call-with-debugging-environment (debugger-loop-fn)$/;"	f
call-with-debugging-environment	slime/swank-corman.lisp	/^(defimplementation call-with-debugging-environment (fn)$/;"	f
call-with-debugging-environment	slime/swank-ecl.lisp	/^(defimplementation call-with-debugging-environment (debugger-loop-fn)$/;"	f
call-with-debugging-environment	slime/swank-lispworks.lisp	/^(defimplementation call-with-debugging-environment (fn)$/;"	f
call-with-debugging-environment	slime/swank-openmcl.lisp	/^(defimplementation call-with-debugging-environment (debugger-loop-fn)$/;"	f
call-with-debugging-environment	slime/swank-sbcl.lisp	/^(defimplementation call-with-debugging-environment (debugger-loop-fn)$/;"	f
call-with-debugging-environment	slime/swank-scl.lisp	/^(defimplementation call-with-debugging-environment (debugger-loop-fn)$/;"	f
call-with-describe-settings	slime/swank.lisp	/^(defun call-with-describe-settings (fn)$/;"	f
call-with-ignored-reader-errors	slime/contrib/swank-arglists.lisp	/^(defun call-with-ignored-reader-errors (thunk)$/;"	f
call-with-lock-held	slime/swank-abcl.lisp	/^(defimplementation call-with-lock-held (lock function)$/;"	f
call-with-lock-held	slime/swank-allegro.lisp	/^(defimplementation call-with-lock-held (lock function)$/;"	f
call-with-lock-held	slime/swank-backend.lisp	/^(definterface call-with-lock-held (lock function)$/;"	f
call-with-lock-held	slime/swank-lispworks.lisp	/^(defimplementation call-with-lock-held (lock function)$/;"	f
call-with-lock-held	slime/swank-openmcl.lisp	/^(defimplementation call-with-lock-held (lock function)$/;"	f
call-with-lock-held	slime/swank-scl.lisp	/^(defimplementation call-with-lock-held (lock function)$/;"	f
call-with-recursive-lock-held	slime/swank-backend.lisp	/^(definterface call-with-recursive-lock-held (lock function)$/;"	f
call-with-redirected-io	slime/swank.lisp	/^(defun call-with-redirected-io (connection function)$/;"	f
call-with-syntax-hooks	slime/swank-allegro.lisp	/^(defimplementation call-with-syntax-hooks (fn)$/;"	f
call-with-syntax-hooks	slime/swank-backend.lisp	/^(definterface call-with-syntax-hooks (fn)$/;"	f
call-with-syntax-hooks	slime/swank-sbcl.lisp	/^(defimplementation call-with-syntax-hooks (fn)$/;"	f
call-with-temp-file	slime/swank-allegro.lisp	/^(defun call-with-temp-file (fn)$/;"	f
call-with-thread-description	slime/swank.lisp	/^(defun call-with-thread-description (description thunk)$/;"	f
call-without-interrupts	slime/swank-abcl.lisp	/^(defimplementation call-without-interrupts (fn)$/;"	f
call-without-interrupts	slime/swank-allegro.lisp	/^(defimplementation call-without-interrupts (fn)$/;"	f
call-without-interrupts	slime/swank-backend.lisp	/^(definterface call-without-interrupts (fn)$/;"	f
call-without-interrupts	slime/swank-clisp.lisp	/^(defimplementation call-without-interrupts (fn)$/;"	f
call-without-interrupts	slime/swank-cmucl.lisp	/^(defimplementation call-without-interrupts (fn)$/;"	f
call-without-interrupts	slime/swank-lispworks.lisp	/^(defimplementation call-without-interrupts (fn)$/;"	f
call-without-interrupts	slime/swank-openmcl.lisp	/^(defimplementation call-without-interrupts (fn)$/;"	f
call-without-interrupts	slime/swank-sbcl.lisp	/^(defimplementation call-without-interrupts (fn)$/;"	f
call-without-interrupts	slime/swank-scl.lisp	/^(defimplementation call-without-interrupts (fn)$/;"	f
caller-info	slime/xref.lisp	/^(defun caller-info (tree)$/;"	f
caller-tree-children	slime/xref.lisp	/^(defun caller-tree-children (tree)$/;"	f
caller-tree-node	slime/xref.lisp	/^(defun caller-tree-node (tree)$/;"	f
callers-list	slime/xref.lisp	/^(defsetf callers-list (name &optional (database :callers)) (caller)$/;"	f
callers-list	slime/xref.lisp	/^(defun callers-list (name &optional (database :callers))$/;"	f
calls-who	slime/swank-allegro.lisp	/^(defxref calls-who        :calls       x :wild)$/;"	f
calls-who	slime/swank-backend.lisp	/^(definterface calls-who (function-name)$/;"	f
calls-who	slime/swank-lispworks.lisp	/^(defxref calls-who      hcl:calls-who)$/;"	f
can-present-readable-objects	slime/contrib/swank-presentation-streams.lisp	/^(defun can-present-readable-objects (&optional stream)$/;"	f
canonical-package-nickname	slime/swank.lisp	/^(defun canonical-package-nickname (package)$/;"	f
canonicalize-location	slime/swank-openmcl.lisp	/^(defun canonicalize-location (file symbol &optional snippet)$/;"	f
car	slime/xref.lisp	/^(define-caller-pattern car (form) :lisp)$/;"	f
car-eq	slime/xref.lisp	/^(defun car-eq (list item)$/;"	f
carefully-pa	slime/contrib/swank-mit-scheme.scm	/^(define (carefully-pa o)$/;"	f
case	slime/xref.lisp	/^(define-caller-pattern case$/;"	f
case-insensitive-mode-p	practicals-1.0.3/libraries/cl-ppcre-1.2.3/convert.lisp	/^(defmacro case-insensitive-mode-p (flags)$/;"	f
case-mode	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defgeneric case-mode (regex old-case-mode)$/;"	f
case-mode	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod case-mode ((regex regex) old-case-mode)$/;"	f
case-mode	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod case-mode ((str str) old-case-mode)$/;"	f
casify-char	slime/swank.lisp	/^(defun casify-char (char)$/;"	f
cat	slime/contrib/swank-kawa.scm	/^(define cat string-append)$/;"	f
cat	slime/swank.lisp	/^(defun cat (&rest strings)$/;"	f
catch	slime/xref.lisp	/^(define-caller-pattern catch (tag (:star form)) :lisp)$/;"	f
ccase	slime/xref.lisp	/^(define-caller-pattern ccase $/;"	f
ccl::application-error	slime/swank-openmcl.lisp	/^(defmethod ccl::application-error :before (application condition error-pointer)$/;"	f
cdaaar	slime/xref.lisp	/^(define-caller-pattern cdaaar (form) :lisp)$/;"	f
cdaadr	slime/xref.lisp	/^(define-caller-pattern cdaadr (form) :lisp)$/;"	f
cdaar	slime/xref.lisp	/^(define-caller-pattern cdaar (form) :lisp)$/;"	f
cdadar	slime/xref.lisp	/^(define-caller-pattern cdadar (form) :lisp)$/;"	f
cdaddr	slime/xref.lisp	/^(define-caller-pattern cdaddr (form) :lisp)$/;"	f
cdadr	slime/xref.lisp	/^(define-caller-pattern cdadr (form) :lisp)$/;"	f
cdar	slime/xref.lisp	/^(define-caller-pattern cdar (form) :lisp)$/;"	f
cddaar	slime/xref.lisp	/^(define-caller-pattern cddaar (form) :lisp)$/;"	f
cddadr	slime/xref.lisp	/^(define-caller-pattern cddadr (form) :lisp)$/;"	f
cddar	slime/xref.lisp	/^(define-caller-pattern cddar (form) :lisp)$/;"	f
cdddar	slime/xref.lisp	/^(define-caller-pattern cdddar (form) :lisp)$/;"	f
cddddr	slime/xref.lisp	/^(define-caller-pattern cddddr (form) :lisp)$/;"	f
cdddr	slime/xref.lisp	/^(define-caller-pattern cdddr (form) :lisp)$/;"	f
cddr	slime/xref.lisp	/^(define-caller-pattern cddr (form) :lisp)$/;"	f
cdr	slime/xref.lisp	/^(define-caller-pattern cdr (form) :lisp)$/;"	f
ceiling	slime/xref.lisp	/^(define-caller-pattern ceiling (form (:optional form)) :lisp)$/;"	f
cell-error-name	slime/xref.lisp	/^(define-caller-pattern cell-error-name (form) :lisp2)$/;"	f
cerror	slime/xref.lisp	/^(define-caller-pattern cerror (form form (:star form)) :lisp)$/;"	f
change-class	slime/xref.lisp	/^(define-caller-pattern change-class (form form) :lisp2)$/;"	f
char	slime/xref.lisp	/^(define-caller-pattern char (form form) :lisp)$/;"	f
char->hex-digit	slime/contrib/swank-mit-scheme.scm	/^(define (char->hex-digit c)$/;"	f
char-bit	slime/xref.lisp	/^(define-caller-pattern char-bit (form form) :lisp)$/;"	f
char-bits	slime/xref.lisp	/^(define-caller-pattern char-bits (form) :lisp)$/;"	f
char-bits-limit	slime/xref.lisp	/^(define-variable-pattern char-bits-limit :lisp)$/;"	f
char-code	slime/xref.lisp	/^(define-caller-pattern char-code (form) :lisp)$/;"	f
char-code-limit	slime/xref.lisp	/^(define-variable-pattern char-code-limit :lisp)$/;"	f
char-control-bit	slime/xref.lisp	/^(define-variable-pattern char-control-bit :lisp)$/;"	f
char-downcase	slime/xref.lisp	/^(define-caller-pattern char-downcase (form) :lisp)$/;"	f
char-equal	slime/xref.lisp	/^(define-caller-pattern char-equal ((:star form)) :lisp)$/;"	f
char-font	slime/xref.lisp	/^(define-caller-pattern char-font (form) :lisp)$/;"	f
char-font-limit	slime/xref.lisp	/^(define-variable-pattern char-font-limit :lisp)$/;"	f
char-greaterp	slime/xref.lisp	/^(define-caller-pattern char-greaterp ((:star form)) :lisp)$/;"	f
char-hyper-bit	slime/xref.lisp	/^(define-variable-pattern char-hyper-bit :lisp)$/;"	f
char-int	slime/xref.lisp	/^(define-caller-pattern char-int (form) :lisp)$/;"	f
char-lessp	slime/xref.lisp	/^(define-caller-pattern char-lessp ((:star form)) :lisp)$/;"	f
char-meta-bit	slime/xref.lisp	/^(define-variable-pattern char-meta-bit :lisp)$/;"	f
char-name	slime/xref.lisp	/^(define-caller-pattern char-name (form) :lisp)$/;"	f
char-not-equal	slime/xref.lisp	/^(define-caller-pattern char-not-equal ((:star form)) :lisp)$/;"	f
char-not-greaterp	slime/xref.lisp	/^(define-caller-pattern char-not-greaterp ((:star form)) :lisp)$/;"	f
char-not-lessp	slime/xref.lisp	/^(define-caller-pattern char-not-lessp ((:star form)) :lisp)$/;"	f
char-searcher-aux	practicals-1.0.3/libraries/cl-ppcre-1.2.3/scanner.lisp	/^(defmacro char-searcher-aux (&key case-insensitive-p)$/;"	f
char-super-bit	slime/xref.lisp	/^(define-variable-pattern char-super-bit :lisp)$/;"	f
char-upcase	slime/xref.lisp	/^(define-caller-pattern char-upcase (form) :lisp)$/;"	f
char/=	slime/xref.lisp	/^(define-caller-pattern char\/= ((:star form)) :lisp)$/;"	f
char<	slime/xref.lisp	/^(define-caller-pattern char< ((:star form)) :lisp)$/;"	f
char<=	slime/xref.lisp	/^(define-caller-pattern char<= ((:star form)) :lisp)$/;"	f
char=	slime/xref.lisp	/^(define-caller-pattern char= ((:star form)) :lisp)$/;"	f
char>	slime/xref.lisp	/^(define-caller-pattern char> ((:star form)) :lisp)$/;"	f
char>=	slime/xref.lisp	/^(define-caller-pattern char>= ((:star form)) :lisp)$/;"	f
character-completion-set	slime/swank-allegro.lisp	/^(defimplementation character-completion-set (prefix matchp)$/;"	f
character-completion-set	slime/swank-backend.lisp	/^(definterface character-completion-set (prefix matchp)$/;"	f
characterp	slime/xref.lisp	/^(define-caller-pattern characterp (form) :lisp)$/;"	f
check	practicals-1.0.3/Chapter09/test.lisp	/^(defmacro check (&body forms)$/;"	f
check-source-path	slime/swank-source-path-parser.lisp	/^(defun check-source-path (path)$/;"	f
check-type	slime/xref.lisp	/^(define-caller-pattern check-type (form form (:optional form)) :lisp)$/;"	f
circularp	project-euler.lisp	/^(defun circularp (n primes)$/;"	f
cis	slime/xref.lisp	/^(define-caller-pattern cis (form) :lisp)$/;"	f
cl-indent	slime/contrib/slime-indentation.el	/^(defun cl-indent ()$/;"	f
cl-indent-body-introducing-loop-macro-keyword	slime/contrib/slime-indentation.el	/^(defvar cl-indent-body-introducing-loop-macro-keyword$/;"	f
cl-indent-clause-joining-loop-macro-keyword	slime/contrib/slime-indentation.el	/^(defvar cl-indent-clause-joining-loop-macro-keyword$/;"	f
cl-indent-indent-loop-macro-1	slime/contrib/slime-indentation.el	/^(defun cl-indent-indent-loop-macro-1 (parse-state indent-point)$/;"	f
cl-indent-indented-loop-macro-keyword	slime/contrib/slime-indentation.el	/^(defvar cl-indent-indented-loop-macro-keyword$/;"	f
cl-indent-indenting-loop-macro-keyword	slime/contrib/slime-indentation.el	/^(defvar cl-indent-indenting-loop-macro-keyword$/;"	f
cl-indent-loop-advance-past-keyword-on-line	slime/contrib/slime-indentation.el	/^(defun cl-indent-loop-advance-past-keyword-on-line ()$/;"	f
cl-indent-loop-macro-else-keyword	slime/contrib/slime-indentation.el	/^(defvar cl-indent-loop-macro-else-keyword "else")$/;"	f
cl-indent-parse-state-depth	slime/contrib/slime-indentation.el	/^(defun cl-indent-parse-state-depth (parse-state)$/;"	f
cl-indent-parse-state-prev	slime/contrib/slime-indentation.el	/^(defun cl-indent-parse-state-prev (parse-state)$/;"	f
cl-indent-parse-state-start	slime/contrib/slime-indentation.el	/^(defun cl-indent-parse-state-start (parse-state)$/;"	f
cl-indent-prefix-loop-macro-keyword	slime/contrib/slime-indentation.el	/^(defvar cl-indent-prefix-loop-macro-keyword$/;"	f
cl-indent::bad-method	slime/contrib/slime-indentation.el	/^(defun cl-indent::bad-method (m)$/;"	f
cl-indent::check-method	slime/contrib/slime-indentation.el	/^(defun cl-indent::check-method (tem method)$/;"	f
cl-indent::form-method	slime/contrib/slime-indentation.el	/^(defun cl-indent::form-method (method path state indent-point$/;"	f
cl-indent::get-method	slime/contrib/slime-indentation.el	/^(defun cl-indent::get-method (function)$/;"	f
cl-indent::indent-loop-macro	slime/contrib/slime-indentation.el	/^(defun cl-indent::indent-loop-macro$/;"	f
cl-indent::line-number	slime/contrib/slime-indentation.el	/^(defun cl-indent::line-number ()$/;"	f
cl-indent::maximum-backtracking	slime/contrib/slime-indentation.el	/^(defvar cl-indent::maximum-backtracking 3$/;"	f
cl-indent::method	slime/contrib/slime-indentation.el	/^(defun cl-indent::method (function)$/;"	f
cl-indent::normal	slime/contrib/slime-indentation.el	/^(defun cl-indent::normal (state)$/;"	f
cl-indent:function	slime/contrib/slime-indentation.el	/^(defun cl-indent:function (indent-point state)$/;"	f
cl-indent:indent-cond	slime/contrib/slime-indentation.el	/^(defun cl-indent:indent-cond (path state indent-point sexp-column normal-indent)$/;"	f
cl-indent:indent-defgeneric	slime/contrib/slime-indentation.el	/^(defun cl-indent:indent-defgeneric (path state indent-point$/;"	f
cl-indent:indent-defmethod	slime/contrib/slime-indentation.el	/^(defun cl-indent:indent-defmethod (path state indent-point$/;"	f
cl-indent:indent-do	slime/contrib/slime-indentation.el	/^(defun cl-indent:indent-do (path state indent-point$/;"	f
cl-indent:indent-function-lambda-hack	slime/contrib/slime-indentation.el	/^(defun cl-indent:indent-function-lambda-hack (path state indent-point$/;"	f
cl-indent:indent-tagbody	slime/contrib/slime-indentation.el	/^(defun cl-indent:indent-tagbody (path state indent-point$/;"	f
cl-indent:local-methods	slime/contrib/slime-indentation.el	/^(defvar cl-indent:local-methods nil$/;"	f
cl-indent:mode-methods	slime/contrib/slime-indentation.el	/^(defvar cl-indent:mode-methods nil$/;"	f
cl-indent:tag-body-indentation	slime/contrib/slime-indentation.el	/^(defvar cl-indent:tag-body-indentation 3$/;"	f
cl-indent:tag-indentation	slime/contrib/slime-indentation.el	/^(defvar cl-indent:tag-indentation 1$/;"	f
cl-package	slime/swank.lisp	/^(defconstant cl-package (find-package :cl)$/;"	f
cl-symbol-p	slime/swank.lisp	/^(defun cl-symbol-p (symbol)$/;"	f
class-definitions	slime/swank-cmucl.lisp	/^(defun class-definitions (name)$/;"	f
class-definitions	slime/swank-scl.lisp	/^(defun class-definitions (name)$/;"	f
class-from-class-name-form	slime/contrib/swank-arglists.lisp	/^(defun class-from-class-name-form (class-name-form)$/;"	f
class-location	slime/swank-cmucl.lisp	/^(defun class-location (class)$/;"	f
class-location	slime/swank-scl.lisp	/^(defun class-location (class)$/;"	f
class-name	slime/xref.lisp	/^(define-caller-pattern class-name (form) :lisp2)$/;"	f
class-of	slime/xref.lisp	/^(define-caller-pattern class-of (form) :lisp2)$/;"	f
class-prototype	slime/swank-abcl.lisp	/^(defun class-prototype (class))$/;"	f
class-slots	slime/swank-abcl.lisp	/^(defun class-slots (class)$/;"	f
classification	practicals-1.0.3/Chapter23/spam.lisp	/^(defun classification (score)$/;"	f
classify	practicals-1.0.3/Chapter23/spam.lisp	/^(defun classify (text)$/;"	f
classify-symbol	slime/swank.lisp	/^(defun classify-symbol (symbol)$/;"	f
clean-arglist	slime/swank.lisp	/^(defun clean-arglist (arglist)$/;"	f
cleanup-connection-threads	slime/swank.lisp	/^(defun cleanup-connection-threads (connection)$/;"	f
clear-database	practicals-1.0.3/Chapter23/spam.lisp	/^(defun clear-database ()$/;"	f
clear-db	practicals-1.0.3/Chapter03/simple-database.lisp	/^(defun clear-db () (setq *db* nil))$/;"	f
clear-input	slime/xref.lisp	/^(define-caller-pattern clear-input ((:optional form)) :lisp)$/;"	f
clear-output	slime/xref.lisp	/^(define-caller-pattern clear-output ((:optional form)) :lisp)$/;"	f
clear-patterns	slime/xref.lisp	/^(defun clear-patterns ()$/;"	f
clear-playlist	practicals-1.0.3/Chapter29/playlist.lisp	/^(defun clear-playlist (playlist)$/;"	f
clear-presentation-tables	slime/contrib/swank-presentations.lisp	/^(defun clear-presentation-tables ()$/;"	f
clear-presentations	slime/contrib/swank-presentation-streams.lisp	/^(ccl::def-load-pointers clear-presentations ()$/;"	f
clear-repl-results	slime/contrib/swank-presentations.lisp	/^(defslimefun clear-repl-results ()$/;"	f
clear-tables	slime/xref.lisp	/^(defun clear-tables ()$/;"	f
clear-timing-data	practicals-1.0.3/Chapter32/profiler.lisp	/^(defun clear-timing-data ()$/;"	f
clear-user-input	slime/swank.lisp	/^(defun clear-user-input  ()$/;"	f
clear-xref-info	slime/swank-cmucl.lisp	/^(defun clear-xref-info (namestring)$/;"	f
clisp-subdirectories-wildcard	practicals-1.0.3/Chapter15/pathnames.lisp	/^(defun clisp-subdirectories-wildcard (wildcard)$/;"	f
close	slime/swank-scl.lisp	/^(defmethod close ((stream slime-input-stream) &key ((:abort abort) nil))$/;"	f
close	slime/swank-scl.lisp	/^(defmethod close ((stream slime-output-stream) &key ((:abort abort) nil))$/;"	f
close	slime/xref.lisp	/^(define-caller-pattern close (form (:rest :ignore)) :lisp)$/;"	f
close-connection	slime/swank.lisp	/^(defun close-connection (c &optional condition backtrace)$/;"	f
close-socket	slime/swank-abcl.lisp	/^(defimplementation close-socket (socket)$/;"	f
close-socket	slime/swank-allegro.lisp	/^(defimplementation close-socket (socket)$/;"	f
close-socket	slime/swank-backend.lisp	/^(definterface close-socket (socket)$/;"	f
close-socket	slime/swank-clisp.lisp	/^(defimplementation close-socket (socket)$/;"	f
close-socket	slime/swank-cmucl.lisp	/^(defimplementation close-socket (socket)$/;"	f
close-socket	slime/swank-corman.lisp	/^(defimplementation close-socket (socket)$/;"	f
close-socket	slime/swank-ecl.lisp	/^(defimplementation close-socket (socket)$/;"	f
close-socket	slime/swank-lispworks.lisp	/^(defimplementation close-socket (socket)$/;"	f
close-socket	slime/swank-openmcl.lisp	/^(defimplementation close-socket (socket)$/;"	f
close-socket	slime/swank-sbcl.lisp	/^(defimplementation close-socket (socket)$/;"	f
close-socket	slime/swank-scl.lisp	/^(defimplementation close-socket (socket)$/;"	f
closure-closed-over-values	slime/swank-openmcl.lisp	/^(defun closure-closed-over-values (closure)$/;"	f
clrhash	slime/xref.lisp	/^(define-caller-pattern clrhash (form) :lisp)$/;"	f
cmucl-inspect	slime/swank-cmucl.lisp	/^(defun cmucl-inspect (o)$/;"	f
code-char	slime/xref.lisp	/^(define-caller-pattern code-char (form (:optional form form)) :lisp)$/;"	f
code-component-entry-points	slime/swank-cmucl.lisp	/^(defun code-component-entry-points (code)$/;"	f
code-component-entry-points	slime/swank-scl.lisp	/^(defun code-component-entry-points (code)$/;"	f
code-in-interpreter	practicals-1.0.3/Chapter31/embed-foo-with-conditions-and-restarts.lisp	/^(define-condition code-in-interpreter (embedded-lisp-in-interpreter) ()$/;"	f
code-location-debug-fun-fun	slime/swank-sbcl.lisp	/^(defun code-location-debug-fun-fun (code-location)$/;"	f
code-location-debug-source-created	slime/swank-sbcl.lisp	/^(defun code-location-debug-source-created (code-location)$/;"	f
code-location-debug-source-name	slime/swank-sbcl.lisp	/^(defun code-location-debug-source-name (code-location)$/;"	f
code-location-has-debug-block-info-p	slime/swank-sbcl.lisp	/^(defun code-location-has-debug-block-info-p (code-location)$/;"	f
code-location-source-location	slime/swank-cmucl.lisp	/^(defun code-location-source-location (code-location)$/;"	f
code-location-source-location	slime/swank-sbcl.lisp	/^(defun code-location-source-location (code-location)$/;"	f
code-location-source-location	slime/swank-scl.lisp	/^(defun code-location-source-location (code-location)$/;"	f
code-location-stream-position	slime/swank-cmucl.lisp	/^(defun code-location-stream-position (code-location stream)$/;"	f
code-location-stream-position	slime/swank-scl.lisp	/^(defun code-location-stream-position (code-location stream)$/;"	f
code-location-string-offset	slime/swank-cmucl.lisp	/^(defun code-location-string-offset (code-location string)$/;"	f
code-location-string-offset	slime/swank-scl.lisp	/^(defun code-location-string-offset (code-location string)$/;"	f
codegen-html	practicals-1.0.3/Chapter31/html.lisp	/^(defun codegen-html (ops pretty)$/;"	f
coerce	slime/xref.lisp	/^(define-caller-pattern coerce (form :ignore) :lisp)$/;"	f
collect-char-class	practicals-1.0.3/libraries/cl-ppcre-1.2.3/lexer.lisp	/^(defun collect-char-class (lexer)$/;"	f
column	practicals-1.0.3/Chapter27/database.lisp	/^(defclass column ()$/;"	f
column-bindings	practicals-1.0.3/Chapter27/database.lisp	/^(defun column-bindings (vars row)$/;"	f
column-matcher	practicals-1.0.3/Chapter27/database.lisp	/^(defun column-matcher (column value)$/;"	f
column-matchers	practicals-1.0.3/Chapter27/database.lisp	/^(defun column-matchers (schema names-and-values)$/;"	f
column-value	practicals-1.0.3/Chapter27/database.lisp	/^(defun column-value (row column-name)$/;"	f
combine-all	paip/aip_ch2.lisp	/^(defun combine-all (xlist ylist)$/;"	f
combine-results	practicals-1.0.3/Chapter09/test.lisp	/^(defmacro combine-results (&body forms)$/;"	f
comma-separated	slime/swank-corman.lisp	/^(defun comma-separated (list &optional (callback (lambda (v)$/;"	f
comment-frame	practicals-1.0.3/Chapter25/id3v2.lisp	/^(define-binary-class comment-frame ()$/;"	f
comment-frame-v2.2	practicals-1.0.3/Chapter25/id3v2.lisp	/^(define-binary-class comment-frame-v2.2 (id3v2.2-frame comment-frame) ())$/;"	f
comment-frame-v2.3	practicals-1.0.3/Chapter25/id3v2.lisp	/^(define-binary-class comment-frame-v2.3 (id3v2.3-frame comment-frame) ())$/;"	f
commit-edited-value	slime/swank.lisp	/^(defslimefun commit-edited-value (form value)$/;"	f
commit-transaction	chiglug-macros/power-of-lisp-macros.lisp	/^(defun commit-transaction ()$/;"	f
common-lisp-glossary-4.0	slime/hyperspec.el	/^(defun common-lisp-glossary-4.0 (string)$/;"	f
common-lisp-glossary-6.0	slime/hyperspec.el	/^(defun common-lisp-glossary-6.0 (string)$/;"	f
common-lisp-glossary-fun	slime/hyperspec.el	/^(defvar common-lisp-glossary-fun 'common-lisp-glossary-6.0)$/;"	f
common-lisp-hyperspec	slime/hyperspec.el	/^(defun common-lisp-hyperspec (symbol-name)$/;"	f
common-lisp-hyperspec-format	slime/hyperspec.el	/^(defun common-lisp-hyperspec-format (character-name)$/;"	f
common-lisp-hyperspec-format-characters	slime/hyperspec.el	/^(defvar common-lisp-hyperspec-format-characters (make-vector 67 0))$/;"	f
common-lisp-hyperspec-format-history	slime/hyperspec.el	/^(defvar common-lisp-hyperspec-format-history nil$/;"	f
common-lisp-hyperspec-history	slime/hyperspec.el	/^(defvar common-lisp-hyperspec-history nil$/;"	f
common-lisp-hyperspec-issuex-symbols	slime/hyperspec.el	/^(defvar common-lisp-hyperspec-issuex-symbols (make-vector 67 0))$/;"	f
common-lisp-hyperspec-issuex-table	slime/hyperspec.el	/^(defvar common-lisp-hyperspec-issuex-table nil$/;"	f
common-lisp-hyperspec-root	slime/hyperspec.el	/^(defvar common-lisp-hyperspec-root$/;"	f
common-lisp-hyperspec-section	slime/hyperspec.el	/^(defun common-lisp-hyperspec-section (indices)$/;"	f
common-lisp-hyperspec-section-4.0	slime/hyperspec.el	/^(defun common-lisp-hyperspec-section-4.0 (indices)$/;"	f
common-lisp-hyperspec-section-6.0	slime/hyperspec.el	/^(defun common-lisp-hyperspec-section-6.0 (indices)$/;"	f
common-lisp-hyperspec-section-fun	slime/hyperspec.el	/^(defvar common-lisp-hyperspec-section-fun 'common-lisp-hyperspec-section-6.0)$/;"	f
common-lisp-hyperspec-strip-cl-package	slime/hyperspec.el	/^(defun common-lisp-hyperspec-strip-cl-package (name)$/;"	f
common-lisp-hyperspec-symbol-table	slime/hyperspec.el	/^(defvar common-lisp-hyperspec-symbol-table nil$/;"	f
common-lisp-hyperspec-symbols	slime/hyperspec.el	/^(defvar common-lisp-hyperspec-symbols (make-vector 67 0))$/;"	f
common-lisp-indent-function	slime/contrib/slime-indentation.el	/^(defun common-lisp-indent-function (indent-point state)$/;"	f
common-lisp-issuex	slime/hyperspec.el	/^(defun common-lisp-issuex (issue-name)$/;"	f
common-seperated-spec	slime/contrib/swank-fancy-inspector.lisp	/^(defun common-seperated-spec (list &optional (callback (lambda (v) $/;"	f
commonp	slime/xref.lisp	/^(define-caller-pattern commonp (form) :lisp)$/;"	f
compilation-messages	slime/contrib/swank-kawa.scm	/^(define-constant compilation-messages (<gnu.text.SourceMessages>))$/;"	f
compile	slime/xref.lisp	/^(define-caller-pattern compile (form (:optional form)) :lisp)$/;"	f
compile-buffer	practicals-1.0.3/Chapter31/html.lisp	/^(defun compile-buffer (buf ops)$/;"	f
compile-contribs	slime/swank-loader.lisp	/^(defun compile-contribs (&key (src-dir (contrib-dir *source-directory*))$/;"	f
compile-file	slime/xref.lisp	/^(define-caller-pattern compile-file (form &key (:star form)) :lisp)$/;"	f
compile-file-for-emacs	slime/contrib/swank-kawa.scm	/^(defslimefun compile-file-for-emacs (env (filename <str>) load?)$/;"	f
compile-file-for-emacs	slime/swank.lisp	/^(defslimefun compile-file-for-emacs (filename load-p)$/;"	f
compile-file-frobbing-notes	slime/swank-clisp.lisp	/^(defmacro compile-file-frobbing-notes ((&rest args) &body body)$/;"	f
compile-file-if-needed	slime/swank.lisp	/^(defslimefun compile-file-if-needed (filename loadp)$/;"	f
compile-file-pathname	slime/xref.lisp	/^(define-caller-pattern compile-file-pathname (form &key form) :lisp2)$/;"	f
compile-files	slime/swank-loader.lisp	/^(defun compile-files (files fasl-dir load)$/;"	f
compile-from-stream	slime/swank-ecl.lisp	/^(defun compile-from-stream (stream &rest args)$/;"	f
compile-from-temp-file	slime/swank-allegro.lisp	/^(defun compile-from-temp-file (string)$/;"	f
compile-from-temp-file	slime/swank-lispworks.lisp	/^(defun compile-from-temp-file (string filename)$/;"	f
compile-string-for-emacs	slime/contrib/swank-kawa.scm	/^(defslimefun compile-string-for-emacs (env string buffer offset dir)$/;"	f
compile-string-for-emacs	slime/swank.lisp	/^(defslimefun compile-string-for-emacs (string buffer position directory debug)$/;"	f
compile-timing-data	practicals-1.0.3/Chapter32/profiler.lisp	/^(defun compile-timing-data () $/;"	f
compiled-function-location	slime/swank-cmucl.lisp	/^(defun compiled-function-location (function)$/;"	f
compiled-function-location	slime/swank-scl.lisp	/^(defun compiled-function-location (function)$/;"	f
compiled-function-p	slime/xref.lisp	/^(define-caller-pattern compiled-function-p (form) :lisp)$/;"	f
compiler-condition	slime/swank-backend.lisp	/^(define-condition compiler-condition (condition)$/;"	f
compiler-let	slime/xref.lisp	/^(define-caller-pattern compiler-let$/;"	f
compiler-macro-definitions	slime/swank-cmucl.lisp	/^(defun compiler-macro-definitions (symbol)$/;"	f
compiler-macro-definitions	slime/swank-scl.lisp	/^(defun compiler-macro-definitions (symbol)$/;"	f
compiler-macro-function	slime/xref.lisp	/^(define-caller-pattern compiler-macro-function (form) :lisp2)$/;"	f
compiler-macroexpand	slime/swank-backend.lisp	/^(definterface compiler-macroexpand (form &optional env)$/;"	f
compiler-macroexpand	slime/swank-cmucl.lisp	/^(defimplementation compiler-macroexpand (form &optional env)$/;"	f
compiler-macroexpand	slime/xref.lisp	/^(define-caller-pattern compiler-macroexpand (form (:optional :ignore)) :lisp2)$/;"	f
compiler-macroexpand-1	slime/swank-backend.lisp	/^(definterface compiler-macroexpand-1 (form &optional env)$/;"	f
compiler-macroexpand-1	slime/swank-cmucl.lisp	/^(defimplementation compiler-macroexpand-1 (form &optional env)$/;"	f
compiler-macroexpand-1	slime/xref.lisp	/^(define-caller-pattern compiler-macroexpand-1 (form (:optional :ignore)) :lisp2)$/;"	f
compiler-note	slime/swank-allegro.lisp	/^(deftype compiler-note ()$/;"	f
compiler-note-location	slime/swank-clisp.lisp	/^(defun compiler-note-location ()$/;"	f
compiler-note-location	slime/swank-cmucl.lisp	/^(defun compiler-note-location (context)$/;"	f
compiler-note-location	slime/swank-sbcl.lisp	/^(defun compiler-note-location (context)$/;"	f
compiler-note-location	slime/swank-scl.lisp	/^(defun compiler-note-location (context)$/;"	f
compiler-note-p	slime/swank-allegro.lisp	/^(defun compiler-note-p (object)$/;"	f
compiler-notes-for-emacs	slime/contrib/swank-kawa.scm	/^(defslimefun compiler-notes-for-emacs (env) $/;"	f
compiler-source-path	slime/swank-sbcl.lisp	/^(defun compiler-source-path (context)$/;"	f
compiler-undefined-functions-called-warning-p	slime/swank-allegro.lisp	/^(defun compiler-undefined-functions-called-warning-p (object)$/;"	f
complement	slime/xref.lisp	/^(define-caller-pattern complement (fn) :lisp2)$/;"	f
complete-form	slime/contrib/swank-arglists.lisp	/^(defslimefun complete-form (form-string)$/;"	f
complete-symbol	slime/slime.el	/^(def-slime-test complete-symbol$/;"	f
completion-output-case-converter	slime/contrib/swank-c-p-c.lisp	/^(defun completion-output-case-converter (input &optional with-escaping-p)$/;"	f
completion-output-package-converter	slime/contrib/swank-c-p-c.lisp	/^(defun completion-output-package-converter (input)$/;"	f
completion-output-symbol-converter	slime/contrib/swank-c-p-c.lisp	/^(defun completion-output-symbol-converter (input)$/;"	f
completion-set	slime/contrib/swank-c-p-c.lisp	/^(defun completion-set (string default-package-name matchp)$/;"	f
completions	slime/contrib/swank-c-p-c.lisp	/^(defslimefun completions (string default-package-name)$/;"	f
completions-for-character	slime/contrib/swank-c-p-c.lisp	/^(defslimefun completions-for-character (prefix)$/;"	f
completions-for-keyword	slime/contrib/swank-arglists.lisp	/^(defslimefun completions-for-keyword (raw-specs keyword-string arg-index-specs)$/;"	f
complex	slime/xref.lisp	/^(define-caller-pattern complex (form (:optional form)) :lisp)$/;"	f
complexp	slime/xref.lisp	/^(define-caller-pattern complexp (form) :lisp)$/;"	f
compose	onlisp.lisp	/^(defun compose (&rest fns)$/;"	f
composer	practicals-1.0.3/Chapter25/id3v2.lisp	/^(defun composer (id3) (get-text-info id3 "TCM" "TCOM"))$/;"	f
compound-prefix-match	slime/contrib/swank-c-p-c.lisp	/^(defun compound-prefix-match (prefix target)$/;"	f
compute-applicable-methods	slime/xref.lisp	/^(define-caller-pattern compute-applicable-methods (fn (:star form)) :lisp2)$/;"	f
compute-backtrace	slime/swank-abcl.lisp	/^(defimplementation compute-backtrace (start end)$/;"	f
compute-backtrace	slime/swank-allegro.lisp	/^(defimplementation compute-backtrace (start end)$/;"	f
compute-backtrace	slime/swank-backend.lisp	/^(definterface compute-backtrace (start end)$/;"	f
compute-backtrace	slime/swank-clisp.lisp	/^(defimplementation compute-backtrace (start end)$/;"	f
compute-backtrace	slime/swank-cmucl.lisp	/^(defimplementation compute-backtrace (start end)$/;"	f
compute-backtrace	slime/swank-corman.lisp	/^(defimplementation compute-backtrace (start end)$/;"	f
compute-backtrace	slime/swank-ecl.lisp	/^(defimplementation compute-backtrace (start end)$/;"	f
compute-backtrace	slime/swank-lispworks.lisp	/^(defimplementation compute-backtrace (start end)$/;"	f
compute-backtrace	slime/swank-openmcl.lisp	/^(defimplementation compute-backtrace (start-frame-number end-frame-number)$/;"	f
compute-backtrace	slime/swank-sbcl.lisp	/^(defimplementation compute-backtrace (start end)$/;"	f
compute-backtrace	slime/swank-scl.lisp	/^(defimplementation compute-backtrace (start end)$/;"	f
compute-enriched-decoded-arglist	slime/contrib/swank-arglists.lisp	/^(defgeneric compute-enriched-decoded-arglist (operator-form argument-forms)$/;"	f
compute-enriched-decoded-arglist	slime/contrib/swank-arglists.lisp	/^(defmethod compute-enriched-decoded-arglist ((operator-form (eql 'apply))$/;"	f
compute-enriched-decoded-arglist	slime/contrib/swank-arglists.lisp	/^(defmethod compute-enriched-decoded-arglist ((operator-form (eql 'with-open-file))$/;"	f
compute-enriched-decoded-arglist	slime/contrib/swank-arglists.lisp	/^(defmethod compute-enriched-decoded-arglist (operator-form argument-forms)$/;"	f
compute-highest-scoring-completion	slime/contrib/swank-fuzzy.lisp	/^(defun compute-highest-scoring-completion (short full)$/;"	f
compute-min-rest	practicals-1.0.3/libraries/cl-ppcre-1.2.3/optimize.lisp	/^(defgeneric compute-min-rest (regex current-min-rest)$/;"	f
compute-min-rest	practicals-1.0.3/libraries/cl-ppcre-1.2.3/optimize.lisp	/^(defmethod compute-min-rest ((alternation alternation) current-min-rest)$/;"	f
compute-min-rest	practicals-1.0.3/libraries/cl-ppcre-1.2.3/optimize.lisp	/^(defmethod compute-min-rest ((branch branch) current-min-rest)$/;"	f
compute-min-rest	practicals-1.0.3/libraries/cl-ppcre-1.2.3/optimize.lisp	/^(defmethod compute-min-rest ((filter filter) current-min-rest)$/;"	f
compute-min-rest	practicals-1.0.3/libraries/cl-ppcre-1.2.3/optimize.lisp	/^(defmethod compute-min-rest ((lookahead lookahead) current-min-rest)$/;"	f
compute-min-rest	practicals-1.0.3/libraries/cl-ppcre-1.2.3/optimize.lisp	/^(defmethod compute-min-rest ((lookbehind lookbehind) current-min-rest)$/;"	f
compute-min-rest	practicals-1.0.3/libraries/cl-ppcre-1.2.3/optimize.lisp	/^(defmethod compute-min-rest ((regex regex) current-min-rest)$/;"	f
compute-min-rest	practicals-1.0.3/libraries/cl-ppcre-1.2.3/optimize.lisp	/^(defmethod compute-min-rest ((register register) current-min-rest)$/;"	f
compute-min-rest	practicals-1.0.3/libraries/cl-ppcre-1.2.3/optimize.lisp	/^(defmethod compute-min-rest ((repetition repetition) current-min-rest)$/;"	f
compute-min-rest	practicals-1.0.3/libraries/cl-ppcre-1.2.3/optimize.lisp	/^(defmethod compute-min-rest ((seq seq) current-min-rest)$/;"	f
compute-min-rest	practicals-1.0.3/libraries/cl-ppcre-1.2.3/optimize.lisp	/^(defmethod compute-min-rest ((standalone standalone) current-min-rest)$/;"	f
compute-min-rest	practicals-1.0.3/libraries/cl-ppcre-1.2.3/optimize.lisp	/^(defmethod compute-min-rest ((str str) current-min-rest)$/;"	f
compute-most-completions	slime/contrib/swank-fuzzy.lisp	/^(defun compute-most-completions (short full)$/;"	f
compute-offsets	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defgeneric compute-offsets (regex start-pos)$/;"	f
compute-offsets	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod compute-offsets ((alternation alternation) start-pos)$/;"	f
compute-offsets	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod compute-offsets ((back-reference back-reference) start-pos)$/;"	f
compute-offsets	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod compute-offsets ((branch branch) start-pos)$/;"	f
compute-offsets	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod compute-offsets ((char-class char-class) start-pos)$/;"	f
compute-offsets	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod compute-offsets ((everything everything) start-pos)$/;"	f
compute-offsets	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod compute-offsets ((filter filter) start-pos)$/;"	f
compute-offsets	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod compute-offsets ((regex regex) start-pos)$/;"	f
compute-offsets	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod compute-offsets ((register register) start-pos)$/;"	f
compute-offsets	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod compute-offsets ((repetition repetition) start-pos)$/;"	f
compute-offsets	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod compute-offsets ((seq seq) start-pos)$/;"	f
compute-offsets	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod compute-offsets ((standalone standalone) start-pos)$/;"	f
compute-offsets	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod compute-offsets ((str str) start-pos)$/;"	f
compute-restarts	slime/xref.lisp	/^(define-caller-pattern compute-restarts (&optional form) :lisp2)$/;"	f
compute-sane-restarts	slime/swank-backend.lisp	/^(definterface compute-sane-restarts (condition)$/;"	f
compute-sane-restarts	slime/swank-clisp.lisp	/^(defimplementation compute-sane-restarts (condition)$/;"	f
concatenate	slime/xref.lisp	/^(define-caller-pattern concatenate (form (:star form)) :lisp)$/;"	f
concatenated-stream-streams	slime/xref.lisp	/^(define-caller-pattern concatenated-stream-streams (form) :lisp2)$/;"	f
cond	slime/xref.lisp	/^(define-caller-pattern cond ((:star (test (:star form)))) :lisp)$/;"	f
condition-class-location	slime/swank-cmucl.lisp	/^(defun condition-class-location (class)$/;"	f
condition-class-location	slime/swank-scl.lisp	/^(defun condition-class-location (class)$/;"	f
condition-extras	slime/swank-backend.lisp	/^(definterface condition-extras (condition)$/;"	f
condition-extras	slime/swank-cmucl.lisp	/^(defimplementation condition-extras (condition)$/;"	f
condition-extras	slime/swank-sbcl.lisp	/^(defimplementation condition-extras (condition)$/;"	f
condition-extras	slime/swank-scl.lisp	/^(defimplementation condition-extras ((c breakpoint))$/;"	f
condition-references	slime/swank-sbcl.lisp	/^(defun condition-references (condition)$/;"	f
condition-source-position	slime/swank-openmcl.lisp	/^(defun condition-source-position (condition)$/;"	f
configure-mp3-browser	practicals-1.0.3/Chapter29/mp3-browser.lisp	/^(defun configure-mp3-browser (&optional force)$/;"	f
conjugate	slime/xref.lisp	/^(define-caller-pattern conjugate (form) :lisp)$/;"	f
connection-info	slime/contrib/swank-kawa.scm	/^(defslimefun connection-info ((env <env>))$/;"	f
connection-info	slime/swank.lisp	/^(defslimefun connection-info ()$/;"	f
cons	slime/xref.lisp	/^(define-caller-pattern cons (form form) :lisp)$/;"	f
cons-form-p	practicals-1.0.3/Chapter31/html.lisp	/^(defun cons-form-p (form &optional (test #'keywordp))$/;"	f
consp	slime/xref.lisp	/^(define-caller-pattern consp (form) :lisp)$/;"	f
constant-repetition-constant-length-closure	practicals-1.0.3/libraries/cl-ppcre-1.2.3/repetition-closures.lisp	/^(defmacro constant-repetition-constant-length-closure (check-curr-pos)$/;"	f
constantp	slime/xref.lisp	/^(define-caller-pattern constantp (form) :lisp)$/;"	f
content-range	slime/swank.lisp	/^(defun content-range (list start end)$/;"	f
contents	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<br>&nbsp;<br><h3><a class=none name="contents">Contents<\/a><\/h3>$/;"	a
continuation>frames	slime/contrib/swank-mit-scheme.scm	/^(define (continuation>frames k)$/;"	f
continue	slime/xref.lisp	/^(define-caller-pattern continue (&optional form) :lisp2)$/;"	f
contrib-dir	slime/swank-loader.lisp	/^(defun contrib-dir (base-dir)$/;"	f
control-string	slime/xref.lisp	/^(define-pattern-substitution control-string string)$/;"	f
convert	practicals-1.0.3/libraries/cl-ppcre-1.2.3/convert.lisp	/^(defun convert (parse-tree)$/;"	f
convert-aux	practicals-1.0.3/libraries/cl-ppcre-1.2.3/convert.lisp	/^(defun convert-aux (parse-tree)$/;"	f
convert-char-class-to-hash	practicals-1.0.3/libraries/cl-ppcre-1.2.3/convert.lisp	/^(defun convert-char-class-to-hash (list)$/;"	f
copy-alist	slime/xref.lisp	/^(define-caller-pattern copy-alist (form) :lisp)$/;"	f
copy-list	slime/xref.lisp	/^(define-caller-pattern copy-list (form) :lisp)$/;"	f
copy-pprint-dispatch	slime/xref.lisp	/^(define-caller-pattern copy-pprint-dispatch (&optional form) :lisp2)$/;"	f
copy-readtable	slime/xref.lisp	/^(define-caller-pattern copy-readtable (&optional form form) :lisp)$/;"	f
copy-regex	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defgeneric copy-regex (regex)$/;"	f
copy-regex	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod copy-regex ((alternation alternation))$/;"	f
copy-regex	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod copy-regex ((anchor anchor))$/;"	f
copy-regex	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod copy-regex ((back-reference back-reference))$/;"	f
copy-regex	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod copy-regex ((branch branch))$/;"	f
copy-regex	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod copy-regex ((char-class char-class))$/;"	f
copy-regex	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod copy-regex ((everything everything))$/;"	f
copy-regex	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod copy-regex ((filter filter))$/;"	f
copy-regex	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod copy-regex ((lookahead lookahead))$/;"	f
copy-regex	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod copy-regex ((lookbehind lookbehind))$/;"	f
copy-regex	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod copy-regex ((register register))$/;"	f
copy-regex	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod copy-regex ((repetition repetition))$/;"	f
copy-regex	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod copy-regex ((seq seq))$/;"	f
copy-regex	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod copy-regex ((standalone standalone))$/;"	f
copy-regex	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod copy-regex ((str str))$/;"	f
copy-regex	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod copy-regex ((void void))$/;"	f
copy-regex	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod copy-regex ((word-boundary word-boundary))$/;"	f
copy-seq	slime/xref.lisp	/^(define-caller-pattern copy-seq (form) :lisp)$/;"	f
copy-symbol	slime/xref.lisp	/^(define-caller-pattern copy-symbol (form (:optional :ignore)) :lisp)$/;"	f
copy-tree	slime/xref.lisp	/^(define-caller-pattern copy-tree (form) :lisp)$/;"	f
correct-p	practicals-1.0.3/Chapter23/spam.lisp	/^(defun correct-p (result)$/;"	f
cos	slime/xref.lisp	/^(define-caller-pattern cos (form) :lisp)$/;"	f
cosh	slime/xref.lisp	/^(define-caller-pattern cosh (form) :lisp)$/;"	f
count	slime/xref.lisp	/^(define-caller-pattern count (form form &key (:star form)) :lisp)$/;"	f
count-cr	slime/swank-allegro.lisp	/^(defun count-cr (file pos)$/;"	f
count-if	slime/xref.lisp	/^(define-caller-pattern count-if (fn form &key (:star form)) :lisp)$/;"	f
count-if-not	slime/xref.lisp	/^(define-caller-pattern count-if-not (fn form &key (:star form)) :lisp)$/;"	f
count-versions	practicals-1.0.3/Chapter25/id3v2.lisp	/^(defun count-versions (dir)$/;"	f
crc-p	practicals-1.0.3/Chapter25/id3v2.lisp	/^(defun crc-p (flags extra-flags)$/;"	f
create-bmh-matcher	practicals-1.0.3/libraries/cl-ppcre-1.2.3/scanner.lisp	/^(defun create-bmh-matcher (pattern case-insensitive-p)$/;"	f
create-char-searcher	practicals-1.0.3/libraries/cl-ppcre-1.2.3/scanner.lisp	/^(defun create-char-searcher (chr case-insensitive-p)$/;"	f
create-connection	slime/swank.lisp	/^(defun create-connection (socket-io style)$/;"	f
create-constant-repetition-constant-length-matcher	practicals-1.0.3/libraries/cl-ppcre-1.2.3/repetition-closures.lisp	/^(defmethod create-constant-repetition-constant-length-matcher$/;"	f
create-constant-repetition-matcher	practicals-1.0.3/libraries/cl-ppcre-1.2.3/repetition-closures.lisp	/^(defmethod create-constant-repetition-matcher ((repetition repetition) next-fn)$/;"	f
create-greedy-constant-length-matcher	practicals-1.0.3/libraries/cl-ppcre-1.2.3/repetition-closures.lisp	/^(defmethod create-greedy-constant-length-matcher ((repetition repetition)$/;"	f
create-greedy-everything-matcher	practicals-1.0.3/libraries/cl-ppcre-1.2.3/repetition-closures.lisp	/^(defun create-greedy-everything-matcher (maximum min-rest next-fn)$/;"	f
create-greedy-matcher	practicals-1.0.3/libraries/cl-ppcre-1.2.3/repetition-closures.lisp	/^(defmethod create-greedy-matcher ((repetition repetition) next-fn)$/;"	f
create-greedy-no-zero-matcher	practicals-1.0.3/libraries/cl-ppcre-1.2.3/repetition-closures.lisp	/^(defmethod create-greedy-no-zero-matcher ((repetition repetition) next-fn)$/;"	f
create-matcher-aux	practicals-1.0.3/libraries/cl-ppcre-1.2.3/closures.lisp	/^(defgeneric create-matcher-aux (regex next-fn)$/;"	f
create-matcher-aux	practicals-1.0.3/libraries/cl-ppcre-1.2.3/closures.lisp	/^(defmethod create-matcher-aux ((alternation alternation) next-fn)$/;"	f
create-matcher-aux	practicals-1.0.3/libraries/cl-ppcre-1.2.3/closures.lisp	/^(defmethod create-matcher-aux ((anchor anchor) next-fn)$/;"	f
create-matcher-aux	practicals-1.0.3/libraries/cl-ppcre-1.2.3/closures.lisp	/^(defmethod create-matcher-aux ((back-reference back-reference) next-fn)$/;"	f
create-matcher-aux	practicals-1.0.3/libraries/cl-ppcre-1.2.3/closures.lisp	/^(defmethod create-matcher-aux ((branch branch) next-fn)$/;"	f
create-matcher-aux	practicals-1.0.3/libraries/cl-ppcre-1.2.3/closures.lisp	/^(defmethod create-matcher-aux ((char-class char-class) next-fn)$/;"	f
create-matcher-aux	practicals-1.0.3/libraries/cl-ppcre-1.2.3/closures.lisp	/^(defmethod create-matcher-aux ((everything everything) next-fn)$/;"	f
create-matcher-aux	practicals-1.0.3/libraries/cl-ppcre-1.2.3/closures.lisp	/^(defmethod create-matcher-aux ((filter filter) next-fn)$/;"	f
create-matcher-aux	practicals-1.0.3/libraries/cl-ppcre-1.2.3/closures.lisp	/^(defmethod create-matcher-aux ((lookahead lookahead) next-fn)$/;"	f
create-matcher-aux	practicals-1.0.3/libraries/cl-ppcre-1.2.3/closures.lisp	/^(defmethod create-matcher-aux ((lookbehind lookbehind) next-fn)$/;"	f
create-matcher-aux	practicals-1.0.3/libraries/cl-ppcre-1.2.3/closures.lisp	/^(defmethod create-matcher-aux ((register register) next-fn)$/;"	f
create-matcher-aux	practicals-1.0.3/libraries/cl-ppcre-1.2.3/closures.lisp	/^(defmethod create-matcher-aux ((seq seq) next-fn)$/;"	f
create-matcher-aux	practicals-1.0.3/libraries/cl-ppcre-1.2.3/closures.lisp	/^(defmethod create-matcher-aux ((standalone standalone) next-fn)$/;"	f
create-matcher-aux	practicals-1.0.3/libraries/cl-ppcre-1.2.3/closures.lisp	/^(defmethod create-matcher-aux ((str str) next-fn)$/;"	f
create-matcher-aux	practicals-1.0.3/libraries/cl-ppcre-1.2.3/closures.lisp	/^(defmethod create-matcher-aux ((void void) next-fn)$/;"	f
create-matcher-aux	practicals-1.0.3/libraries/cl-ppcre-1.2.3/closures.lisp	/^(defmethod create-matcher-aux ((word-boundary word-boundary) next-fn)$/;"	f
create-matcher-aux	practicals-1.0.3/libraries/cl-ppcre-1.2.3/repetition-closures.lisp	/^(defmethod create-matcher-aux ((repetition repetition) next-fn)$/;"	f
create-non-greedy-constant-length-matcher	practicals-1.0.3/libraries/cl-ppcre-1.2.3/repetition-closures.lisp	/^(defmethod create-non-greedy-constant-length-matcher ((repetition repetition) next-fn)$/;"	f
create-non-greedy-matcher	practicals-1.0.3/libraries/cl-ppcre-1.2.3/repetition-closures.lisp	/^(defmethod create-non-greedy-matcher ((repetition repetition) next-fn)$/;"	f
create-non-greedy-no-zero-matcher	practicals-1.0.3/libraries/cl-ppcre-1.2.3/repetition-closures.lisp	/^(defmethod create-non-greedy-no-zero-matcher ((repetition repetition) next-fn)$/;"	f
create-ranges-from-hash	practicals-1.0.3/libraries/cl-ppcre-1.2.3/util.lisp	/^(defun create-ranges-from-hash (hash &key downcasep)$/;"	f
create-scanner	practicals-1.0.3/libraries/cl-ppcre-1.2.3/api.lisp	/^(defgeneric create-scanner (regex &key case-insensitive-mode$/;"	f
create-scanner	practicals-1.0.3/libraries/cl-ppcre-1.2.3/api.lisp	/^(defmethod create-scanner ((parse-tree t) &key case-insensitive-mode$/;"	f
create-scanner	practicals-1.0.3/libraries/cl-ppcre-1.2.3/api.lisp	/^(defmethod create-scanner ((regex-string string) &key case-insensitive-mode$/;"	f
create-scanner	practicals-1.0.3/libraries/cl-ppcre-1.2.3/api.lisp	/^(defmethod create-scanner ((scanner function) &key case-insensitive-mode$/;"	f
create-scanner	practicals-1.0.3/libraries/cl-ppcre-1.2.3/api.lisp	/^(defmethod create-scanner ((scanner regexp::regular-expression) &key case-insensitive-mode$/;"	f
create-scanner	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<br><a class=none name="create-scanner"><b>create-scanner<\/b> <i>(function function)<tt>&amp;key<\/tt> case-insensitive-mode multi-line-mode single-line-mode extended-mode destructive<\/i> =&gt; <i>scanner<\/i><\/a>$/;"	a
create-scanner	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<br><a class=none name="create-scanner"><b>create-scanner<\/b> <i>(string string)<tt>&amp;key<\/tt> case-insensitive-mode multi-line-mode single-line-mode extended-mode destructive<\/i> =&gt; <i>scanner<\/i><\/a>$/;"	a
create-scanner-aux	practicals-1.0.3/libraries/cl-ppcre-1.2.3/scanner.lisp	/^(defun create-scanner-aux (match-fn$/;"	f
create-scanner2	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<br><a class=none name="create-scanner2"><b>create-scanner<\/b> <i>(parse-tree t)<tt>&amp;key<\/tt> case-insensitive-mode multi-line-mode single-line-mode extended-mode destructive<\/i> =&gt; <i>scanner<\/i><\/a>$/;"	a
create-server	slime/swank.lisp	/^(defun create-server (&key (port default-server-port)$/;"	f
create-socket	slime/swank-abcl.lisp	/^(defimplementation create-socket (host port)$/;"	f
create-socket	slime/swank-allegro.lisp	/^(defimplementation create-socket (host port)$/;"	f
create-socket	slime/swank-backend.lisp	/^(definterface create-socket (host port)$/;"	f
create-socket	slime/swank-clisp.lisp	/^(defimplementation create-socket (host port)$/;"	f
create-socket	slime/swank-cmucl.lisp	/^(defimplementation create-socket (host port)$/;"	f
create-socket	slime/swank-corman.lisp	/^(defimplementation create-socket (host port)$/;"	f
create-socket	slime/swank-ecl.lisp	/^(defimplementation create-socket (host port)$/;"	f
create-socket	slime/swank-lispworks.lisp	/^(defimplementation create-socket (host port)$/;"	f
create-socket	slime/swank-openmcl.lisp	/^(defimplementation create-socket (host port)$/;"	f
create-socket	slime/swank-sbcl.lisp	/^(defimplementation create-socket (host port)$/;"	f
create-socket	slime/swank-scl.lisp	/^(defimplementation create-socket (host port)$/;"	f
create-string-from-input	practicals-1.0.3/libraries/cl-ppcre-1.2.3/ppcre-tests.lisp	/^(defun create-string-from-input (input)$/;"	f
css-style	practicals-1.0.3/Chapter31/css.lisp	/^(define-html-special-operator css-style (processor &rest body)$/;"	f
ctypecase	slime/xref.lisp	/^(define-caller-pattern ctypecase (form (:star (symbol (:star form)))) :lisp)$/;"	f
current-binary-object	practicals-1.0.3/Chapter24/binary-data.lisp	/^(defun current-binary-object ()$/;"	f
current-socket-io	slime/swank.lisp	/^(defun current-socket-io ()$/;"	f
current-song	practicals-1.0.3/Chapter28/song-source.lisp	/^(defgeneric current-song (source)$/;"	f
current-song	practicals-1.0.3/Chapter28/song-source.lisp	/^(defmethod current-song ((source simple-song-queue))$/;"	f
current-song	practicals-1.0.3/Chapter29/playlist.lisp	/^(defmethod current-song :around ((playlist playlist))$/;"	f
current-thread	slime/swank-abcl.lisp	/^(defimplementation current-thread ()$/;"	f
current-thread	slime/swank-allegro.lisp	/^(defimplementation current-thread ()$/;"	f
current-thread	slime/swank-backend.lisp	/^(definterface current-thread ()$/;"	f
current-thread	slime/swank-corman.lisp	/^(defimplementation current-thread ()$/;"	f
current-thread	slime/swank-lispworks.lisp	/^(defimplementation current-thread ()$/;"	f
current-thread	slime/swank-openmcl.lisp	/^(defimplementation current-thread ()$/;"	f
current-thread	slime/swank-scl.lisp	/^(defimplementation current-thread ()$/;"	f
data-bytes	practicals-1.0.3/Chapter25/id3v2.lisp	/^(defgeneric data-bytes (frame))$/;"	f
data-bytes	practicals-1.0.3/Chapter25/id3v2.lisp	/^(defmethod data-bytes ((frame id3v2.2-frame))$/;"	f
data-bytes	practicals-1.0.3/Chapter25/id3v2.lisp	/^(defmethod data-bytes ((frame id3v2.3-frame))$/;"	f
dd-location	slime/swank-cmucl.lisp	/^(defun dd-location (dd)$/;"	f
dd-location	slime/swank-scl.lisp	/^(defun dd-location (dd)$/;"	f
debug-function-arglist	slime/swank-cmucl.lisp	/^(defun debug-function-arglist (debug-function)$/;"	f
debug-function-arglist	slime/swank-scl.lisp	/^(defun debug-function-arglist (debug-function)$/;"	f
debug-function-returns	slime/swank-cmucl.lisp	/^(defun debug-function-returns (debug-fun)$/;"	f
debug-function-returns	slime/swank-scl.lisp	/^(defun debug-function-returns (debug-fun)$/;"	f
debug-in-emacs	slime/swank.lisp	/^(defun debug-in-emacs (condition)$/;"	f
debug-info-definitions	slime/swank-cmucl.lisp	/^(defun debug-info-definitions (debug-info)$/;"	f
debug-info-definitions	slime/swank-scl.lisp	/^(defun debug-info-definitions (debug-info)$/;"	f
debug-info-function-name-location	slime/swank-cmucl.lisp	/^(defun debug-info-function-name-location (debug-info)$/;"	f
debug-info-function-name-location	slime/swank-scl.lisp	/^(defun debug-info-function-name-location (debug-info)$/;"	f
debug-nth-thread	slime/swank.lisp	/^(defslimefun debug-nth-thread (index)$/;"	f
debug-source-info-from-emacs-buffer-p	slime/swank-cmucl.lisp	/^(defun debug-source-info-from-emacs-buffer-p (debug-source)$/;"	f
debug-source-info-from-emacs-buffer-p	slime/swank-scl.lisp	/^(defun debug-source-info-from-emacs-buffer-p (debug-source)$/;"	f
debug-var-value	slime/swank-cmucl.lisp	/^(defun debug-var-value (var frame location)$/;"	f
debug-var-value	slime/swank-sbcl.lisp	/^(defun debug-var-value (var frame location)$/;"	f
debug-var-value	slime/swank-scl.lisp	/^(defun debug-var-value (var frame location)$/;"	f
debug-variable-symbol-or-deleted	slime/swank-cmucl.lisp	/^(defun debug-variable-symbol-or-deleted (var)$/;"	f
debug-variable-symbol-or-deleted	slime/swank-scl.lisp	/^(defun debug-variable-symbol-or-deleted (var)$/;"	f
debugger-condition-for-emacs	slime/swank.lisp	/^(defun debugger-condition-for-emacs ()$/;"	f
debugger-info-for-emacs	slime/swank.lisp	/^(defslimefun debugger-info-for-emacs (start end)$/;"	f
decf	slime/xref.lisp	/^(define-caller-pattern decf (form form) :lisp)$/;"	f
declaim	slime/xref.lisp	/^(define-caller-pattern declaim ((:rest :ignore)) :lisp2)$/;"	f
declaration	slime/xref.lisp	/^(define-pattern-substitution declaration ((:eq declare)(:rest :ignore)))$/;"	f
declaration-arglist	slime/swank-backend.lisp	/^(defgeneric declaration-arglist (decl-identifier)$/;"	f
declaration-arglist	slime/swank-sbcl.lisp	/^(defmethod declaration-arglist ((decl-identifier (eql 'optimize)))$/;"	f
declaration-information	slime/xref.lisp	/^(define-caller-pattern declaration-information (form &optional :ignore) :lisp2)$/;"	f
declare	slime/xref.lisp	/^(define-caller-pattern declare ((:rest :ignore)) :lisp)$/;"	f
decode-arglist	slime/contrib/swank-arglists.lisp	/^(defun decode-arglist (arglist)$/;"	f
decode-float	slime/xref.lisp	/^(define-caller-pattern decode-float (form) :lisp)$/;"	f
decode-keyword-arg	slime/contrib/swank-arglists.lisp	/^(defun decode-keyword-arg (arg)$/;"	f
decode-message	slime/swank.lisp	/^(defun decode-message (stream)$/;"	f
decode-message-length	slime/swank.lisp	/^(defun decode-message-length (stream)$/;"	f
decode-optional-arg	slime/contrib/swank-arglists.lisp	/^(defun decode-optional-arg (arg)$/;"	f
decode-required-arg	slime/contrib/swank-arglists.lisp	/^(defun decode-required-arg (arg)$/;"	f
decode-universal-time	slime/xref.lisp	/^(define-caller-pattern decode-universal-time (form &optional form) :lisp)$/;"	f
decoded-arglist-to-string	slime/contrib/swank-arglists.lisp	/^(defun decoded-arglist-to-string (arglist$/;"	f
decoded-arglist-to-template-string	slime/contrib/swank-arglists.lisp	/^(defun decoded-arglist-to-template-string (decoded-arglist package &key (prefix "(") (suffix ")"))$/;"	f
def-slime-selector-method	slime/slime.el	/^(defmacro def-slime-selector-method (key description &rest body)$/;"	f
def-slime-test	slime/slime.el	/^(defmacro def-slime-test (name args doc inputs &rest body)$/;"	f
default-connection	slime/swank.lisp	/^(defun default-connection ()$/;"	f
default-directory	slime/swank-allegro.lisp	/^(defimplementation default-directory ()$/;"	f
default-directory	slime/swank-backend.lisp	/^(definterface default-directory ()$/;"	f
default-directory	slime/swank-cmucl.lisp	/^(defimplementation default-directory ()$/;"	f
default-directory	slime/swank-corman.lisp	/^(defimplementation default-directory ()$/;"	f
default-directory	slime/swank-ecl.lisp	/^(defimplementation default-directory ()$/;"	f
default-directory	slime/swank-scl.lisp	/^(defimplementation default-directory ()$/;"	f
default-fasl-dir	slime/swank-loader.lisp	/^(defun default-fasl-dir ()$/;"	f
default-readtable-alist	slime/swank-backend.lisp	/^(definterface default-readtable-alist ()$/;"	f
default-readtable-alist	slime/swank-sbcl.lisp	/^(defimplementation default-readtable-alist ()$/;"	f
default-server-port	slime/swank.lisp	/^(defconstant default-server-port 4005$/;"	f
defclass	slime/xref.lisp	/^(define-caller-pattern defclass (name &rest :ignore) :lisp2)$/;"	f
defconstant	slime/xref.lisp	/^(define-caller-pattern defconstant$/;"	f
defgeneric	slime/xref.lisp	/^(define-caller-pattern defgeneric (name lambda-list &rest :ignore) :lisp2)$/;"	f
defimplementation	slime/swank-backend.lisp	/^(defmacro defimplementation (name args &body body)$/;"	f
define-binary-class	practicals-1.0.3/Chapter24/binary-data.lisp	/^(defmacro define-binary-class (name (&rest superclasses) slots)$/;"	f
define-binary-type	practicals-1.0.3/Chapter24/binary-data.lisp	/^(defmacro define-binary-type (name (&rest args) &body spec)$/;"	f
define-caller-pattern	slime/xref.lisp	/^(defmacro define-caller-pattern (name pattern &optional caller-type)$/;"	f
define-caller-pattern-synonyms	slime/xref.lisp	/^(defmacro define-caller-pattern-synonyms (source destinations)$/;"	f
define-cl-indent	slime/contrib/slime-indentation.el	/^(defun define-cl-indent (spec &optional mode-methods)$/;"	f
define-compiler-macro	slime/xref.lisp	/^(define-caller-pattern define-compiler-macro$/;"	f
define-condition	slime/xref.lisp	/^(define-caller-pattern define-condition (name &rest :ignore) :lisp2)$/;"	f
define-declaration	slime/xref.lisp	/^(define-caller-pattern define-declaration $/;"	f
define-generic-binary-class	practicals-1.0.3/Chapter24/binary-data.lisp	/^(defmacro define-generic-binary-class (name (&rest superclasses) slots read-method)$/;"	f
define-html-macro	practicals-1.0.3/Chapter31/html.lisp	/^(defmacro define-html-macro (name (&rest args) &body body)$/;"	f
define-html-special-operator	practicals-1.0.3/Chapter31/html.lisp	/^(defmacro define-html-special-operator (name (processor &rest other-parameters) &body body)$/;"	f
define-html-tag	chiglug-macros/power-of-lisp-macros.lisp	/^(defmacro define-html-tag (tag &rest attr-list)$/;"	f
define-method-combination	slime/xref.lisp	/^(define-caller-pattern define-method-combination $/;"	f
define-modify-macro	slime/xref.lisp	/^(define-caller-pattern define-modify-macro $/;"	f
define-parse-tree-synonym	practicals-1.0.3/libraries/cl-ppcre-1.2.3/api.lisp	/^(defmacro define-parse-tree-synonym (name parse-tree)$/;"	f
define-parse-tree-synonym	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<br><a class="none" name="define-parse-tree-synonym"><b>define-parse-tree-synonym<\/b> <i>name parse-tree<\/i> =&gt; <i>parse-tree<\/i><\/a>$/;"	a
define-pattern-substitution	slime/xref.lisp	/^(defmacro define-pattern-substitution (name pattern)$/;"	f
define-setf-method	slime/xref.lisp	/^(define-caller-pattern define-setf-method$/;"	f
define-sldb-face	slime/slime.el	/^(defmacro define-sldb-face (name description &optional default)$/;"	f
define-sldb-faces	slime/slime.el	/^(defmacro define-sldb-faces (&rest faces)$/;"	f
define-special	slime/swank.lisp	/^(defmacro define-special (name doc)$/;"	f
define-stepper-function	slime/swank.lisp	/^(defmacro define-stepper-function (name backend-function-name)$/;"	f
define-tagged-binary-class	practicals-1.0.3/Chapter24/binary-data.lisp	/^(defmacro define-tagged-binary-class (name (&rest superclasses) slots &rest options)$/;"	f
define-test	chiglug-macros/power-of-lisp-macros.lisp	/^(defmacro define-test (name (&optional condition) &body body)$/;"	f
define-url-function	practicals-1.0.3/Chapter26/html-infrastructure.lisp	/^(defmacro define-url-function (name (request &rest params) &body body)$/;"	f
define-variable-pattern	slime/xref.lisp	/^(defmacro define-variable-pattern (name &optional caller-type)$/;"	f
definition-source-location	slime/swank-cmucl.lisp	/^(defun definition-source-location (object name)$/;"	f
definition-source-location	slime/swank-scl.lisp	/^(defun definition-source-location (object name)$/;"	f
definterface	slime/swank-backend.lisp	/^(defmacro definterface (name args documentation &rest default-body)$/;"	f
defmacro	slime/xref.lisp	/^(define-caller-pattern defmacro$/;"	f
defmethod	slime/xref.lisp	/^(define-caller-pattern defmethod $/;"	f
defpackage	slime/xref.lisp	/^(define-caller-pattern defpackage (name (:rest :ignore)) :lisp2)$/;"	f
defparameter	slime/xref.lisp	/^(define-caller-pattern defparameter$/;"	f
defsetf	slime/xref.lisp	/^(define-caller-pattern defsetf $/;"	f
defslime-repl-shortcut	slime/slime.el	/^(defmacro defslime-repl-shortcut (elisp-name names &rest options)$/;"	f
defslimefun	slime/contrib/swank-kawa.scm	/^(define-syntax defslimefun $/;"	f
defslimefun	slime/swank.lisp	/^(defmacro defslimefun (name arglist &body rest)$/;"	f
defstruct	slime/xref.lisp	/^(define-caller-pattern defstruct $/;"	f
deftest	practicals-1.0.3/Chapter09/test.lisp	/^(defmacro deftest (name parameters &body body)$/;"	f
defun	slime/xref.lisp	/^(define-caller-pattern defun $/;"	f
defvar	slime/xref.lisp	/^(define-caller-pattern defvar $/;"	f
defxref	slime/swank-abcl.lisp	/^(defmacro defxref (name function)$/;"	f
defxref	slime/swank-allegro.lisp	/^(defmacro defxref (name relation name1 name2)$/;"	f
defxref	slime/swank-clisp.lisp	/^(defmacro defxref (name function)$/;"	f
defxref	slime/swank-cmucl.lisp	/^(defmacro defxref (name function)$/;"	f
defxref	slime/swank-lispworks.lisp	/^(defmacro defxref (name function)$/;"	f
deinstall-fd-handler	slime/swank.lisp	/^(defun deinstall-fd-handler (connection)$/;"	f
deinstall-sigio-handler	slime/swank.lisp	/^(defun deinstall-sigio-handler (connection)$/;"	f
delay	chiglug-macros/lazy-eval.lisp	/^(defmacro delay (expr)$/;"	f
delay	chiglug-macros/lazy-eval.lisp	/^(defstruct delay forced closure)$/;"	f
delete	slime/xref.lisp	/^(define-caller-pattern delete (form form &key (:star form)) :lisp)$/;"	f
delete-all-rows	practicals-1.0.3/Chapter27/database.lisp	/^(defun delete-all-rows (table)$/;"	f
delete-duplicates	slime/xref.lisp	/^(define-caller-pattern delete-duplicates (form &key (:star form)) :lisp)$/;"	f
delete-file	slime/xref.lisp	/^(define-caller-pattern delete-file (form) :lisp)$/;"	f
delete-if	slime/xref.lisp	/^(define-caller-pattern delete-if (fn form &key (:star form)) :lisp)$/;"	f
delete-if-not	slime/xref.lisp	/^(define-caller-pattern delete-if-not (fn form &key (:star form)) :lisp)$/;"	f
delete-package	slime/xref.lisp	/^(define-caller-pattern delete-package ((:rest :ignore)) :lisp2)$/;"	f
delete-rows	db.lisp	/^(defun delete-rows (selector-fn)$/;"	f
delete-rows	practicals-1.0.3/Chapter03/simple-database.lisp	/^(defun delete-rows (selector-fn)$/;"	f
delete-rows	practicals-1.0.3/Chapter27/database.lisp	/^(defun delete-rows (&key from where)$/;"	f
delete-songs	practicals-1.0.3/Chapter29/playlist.lisp	/^(defun delete-songs (playlist &rest names-and-values)$/;"	f
delete-songs-link	practicals-1.0.3/Chapter29/mp3-browser.lisp	/^(defun delete-songs-link (what value)$/;"	f
denominator	slime/xref.lisp	/^(define-caller-pattern denominator (form) :lisp)$/;"	f
deposit-field	slime/xref.lisp	/^(define-caller-pattern deposit-field (form form form) :lisp)$/;"	f
dequeue-annotation	slime/sbcl-pprint-patch.lisp	/^(defun dequeue-annotation (stream &key end-posn)$/;"	f
describe	slime/xref.lisp	/^(define-caller-pattern describe (form &optional form) :lisp)$/;"	f
describe-definition	slime/swank-abcl.lisp	/^(defimplementation describe-definition (symbol namespace)$/;"	f
describe-definition	slime/swank-allegro.lisp	/^(defimplementation describe-definition (symbol namespace)$/;"	f
describe-definition	slime/swank-backend.lisp	/^(definterface describe-definition (name type)$/;"	f
describe-definition	slime/swank-clisp.lisp	/^(defimplementation describe-definition (symbol namespace)$/;"	f
describe-definition	slime/swank-cmucl.lisp	/^(defimplementation describe-definition (symbol namespace)$/;"	f
describe-definition	slime/swank-corman.lisp	/^(defimplementation describe-definition (symbol namespace)$/;"	f
describe-definition	slime/swank-ecl.lisp	/^(defimplementation describe-definition (name type)$/;"	f
describe-definition	slime/swank-lispworks.lisp	/^(defimplementation describe-definition (symbol type)$/;"	f
describe-definition	slime/swank-openmcl.lisp	/^(defimplementation describe-definition (symbol namespace)$/;"	f
describe-definition	slime/swank-sbcl.lisp	/^(defimplementation describe-definition (symbol type)$/;"	f
describe-definition	slime/swank-scl.lisp	/^(defimplementation describe-definition (symbol namespace)$/;"	f
describe-definition-for-emacs	slime/swank.lisp	/^(defslimefun describe-definition-for-emacs (name kind)$/;"	f
describe-function	slime/swank-lispworks.lisp	/^(defun describe-function (symbol)$/;"	f
describe-function	slime/swank.lisp	/^(defslimefun describe-function (name)$/;"	f
describe-inspectee	slime/swank.lisp	/^(defslimefun describe-inspectee ()$/;"	f
describe-object	slime/xref.lisp	/^(define-caller-pattern describe-object (form &optional form) :lisp2)$/;"	f
describe-primitive-type	slime/swank-backend.lisp	/^(definterface describe-primitive-type (object)$/;"	f
describe-primitive-type	slime/swank-cmucl.lisp	/^(defimplementation describe-primitive-type (object)$/;"	f
describe-primitive-type	slime/swank-openmcl.lisp	/^(defimplementation describe-primitive-type (thing)$/;"	f
describe-primitive-type	slime/swank-scl.lisp	/^(defimplementation describe-primitive-type (object)$/;"	f
describe-symbol	slime/swank-lispworks.lisp	/^(defun describe-symbol (sym)$/;"	f
describe-symbol	slime/swank.lisp	/^(defslimefun describe-symbol (symbol-name)$/;"	f
describe-symbol-for-emacs	slime/swank-abcl.lisp	/^(defimplementation describe-symbol-for-emacs (symbol)$/;"	f
describe-symbol-for-emacs	slime/swank-allegro.lisp	/^(defimplementation describe-symbol-for-emacs (symbol)$/;"	f
describe-symbol-for-emacs	slime/swank-backend.lisp	/^(definterface describe-symbol-for-emacs (symbol)$/;"	f
describe-symbol-for-emacs	slime/swank-clisp.lisp	/^(defimplementation describe-symbol-for-emacs (symbol)$/;"	f
describe-symbol-for-emacs	slime/swank-cmucl.lisp	/^(defimplementation describe-symbol-for-emacs (symbol)$/;"	f
describe-symbol-for-emacs	slime/swank-corman.lisp	/^(defimplementation describe-symbol-for-emacs (symbol)$/;"	f
describe-symbol-for-emacs	slime/swank-ecl.lisp	/^(defimplementation describe-symbol-for-emacs (symbol)$/;"	f
describe-symbol-for-emacs	slime/swank-lispworks.lisp	/^(defimplementation describe-symbol-for-emacs (symbol)$/;"	f
describe-symbol-for-emacs	slime/swank-openmcl.lisp	/^(defimplementation describe-symbol-for-emacs (symbol)$/;"	f
describe-symbol-for-emacs	slime/swank-sbcl.lisp	/^(defimplementation describe-symbol-for-emacs (symbol)$/;"	f
describe-symbol-for-emacs	slime/swank-scl.lisp	/^(defimplementation describe-symbol-for-emacs (symbol)$/;"	f
describe-to-string	slime/swank.lisp	/^(defun describe-to-string (object)$/;"	f
describe_002dbindings	slime/doc/html/Key-bindings.html	/^     <p><a name="describe_002dbindings"><\/a><br><dt><kbd>C-h b<\/kbd><dd><code>describe-bindings<\/code>$/;"	a
describe_002dkey	slime/doc/html/Key-bindings.html	/^<a name="describe_002dkey"><\/a><dt><kbd>C-h k &lt;key&gt;<\/kbd><dd><code>describe-key<\/code>$/;"	a
describe_002dmode	slime/doc/html/Key-bindings.html	/^     <p><a name="describe_002dmode"><\/a><br><dt><kbd>C-h m<\/kbd><dd><code>describe-mode<\/code>$/;"	a
destination	slime/xref.lisp	/^(define-pattern-substitution destination form)$/;"	f
destructure-case	slime/slime.el	/^(defmacro destructure-case (value &rest patterns)$/;"	f
destructure-case	slime/swank.lisp	/^(defmacro destructure-case (value &rest patterns)$/;"	f
destructuring-bind	slime/xref.lisp	/^(define-caller-pattern destructuring-bind $/;"	f
determine-case	slime/contrib/swank-c-p-c.lisp	/^(defun determine-case (string)$/;"	f
determine-file-dependencies	slime/xref.lisp	/^(defun determine-file-dependencies (&optional (database *callers-database*))$/;"	f
df	slime/contrib/swank-kawa.scm	/^(define-syntax df$/;"	f
dict	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<br>&nbsp;<br><h3><a class=none name="dict">The CL-PPCRE dictionary<\/a><\/h3>$/;"	a
digit-char	slime/xref.lisp	/^(define-caller-pattern digit-char (form (:optional form form)) :lisp)$/;"	f
digit-char-p	slime/xref.lisp	/^(define-caller-pattern digit-char-p (form (:optional form)) :lisp)$/;"	f
digits	nifty_funs.lisp	/^(defun digits (num)$/;"	f
direct-slots	practicals-1.0.3/Chapter24/binary-data.lisp	/^(defun direct-slots (name)$/;"	f
directory	slime/xref.lisp	/^(define-caller-pattern directory (form &key (:star form)) :lisp)$/;"	f
directory-namestring	slime/xref.lisp	/^(define-caller-pattern directory-namestring (form) :lisp)$/;"	f
directory-p	practicals-1.0.3/Chapter15/pathnames.lisp	/^(defun directory-p (name)$/;"	f
directory-pathname-p	practicals-1.0.3/Chapter15/pathnames.lisp	/^(defun directory-pathname-p (p)$/;"	f
directory-wildcard	practicals-1.0.3/Chapter15/pathnames.lisp	/^(defun directory-wildcard (dirname)$/;"	f
disassemble	slime/xref.lisp	/^(define-caller-pattern disassemble (form) :lisp)$/;"	f
disassemble-frame	slime/swank-abcl.lisp	/^(defimplementation disassemble-frame (index)$/;"	f
disassemble-frame	slime/swank-allegro.lisp	/^(defimplementation disassemble-frame (index)$/;"	f
disassemble-frame	slime/swank-backend.lisp	/^(definterface disassemble-frame (frame-number)$/;"	f
disassemble-frame	slime/swank-cmucl.lisp	/^(defimplementation disassemble-frame (frame-number)$/;"	f
disassemble-frame	slime/swank-ecl.lisp	/^(defimplementation disassemble-frame (frame-number)$/;"	f
disassemble-frame	slime/swank-openmcl.lisp	/^(defimplementation disassemble-frame (the-frame-number)$/;"	f
disassemble-frame	slime/swank-scl.lisp	/^(defimplementation disassemble-frame (frame-number)$/;"	f
disassemble-symbol	slime/contrib/swank-kawa.scm	/^(defslimefun disassemble-symbol (env name)$/;"	f
disassemble-symbol	slime/swank.lisp	/^(defslimefun disassemble-symbol (name)$/;"	f
disconnect	slime/contrib/swank-mit-scheme.scm	/^(define (disconnect) $/;"	f
disconnect	slime/slime.el	/^(def-slime-test disconnect$/;"	f
dispatch	slime/contrib/swank-mit-scheme.scm	/^(define (dispatch request socket level)$/;"	f
dispatch-event	slime/swank.lisp	/^(defun dispatch-event (event socket-io)$/;"	f
dispatch-loop	slime/swank.lisp	/^(defun dispatch-loop (socket-io connection)$/;"	f
display-database	slime/xref.lisp	/^(defun display-database (&optional (database :callers) $/;"	f
display-monitoring-results	slime/metering.lisp	/^(defun display-monitoring-results (&optional (threshold 0.01) (key :percent-time)$/;"	f
distinct-rows	practicals-1.0.3/Chapter27/database.lisp	/^(defun distinct-rows (rows schema)$/;"	f
division-by-zero	chiglug-macros/power-of-lisp-macros.lisp	/^(define-test division-by-zero (division-by-zero)$/;"	f
divisors	nifty_funs.lisp	/^(defun divisors (x)$/;"	f
do	slime/xref.lisp	/^(define-caller-pattern do$/;"	f
do*	slime/xref.lisp	/^(define-caller-pattern do*$/;"	f
do-all-symbols	slime/xref.lisp	/^(define-caller-pattern do-all-symbols $/;"	f
do-external-symbols	slime/xref.lisp	/^(define-caller-pattern do-external-symbols $/;"	f
do-matches	practicals-1.0.3/libraries/cl-ppcre-1.2.3/api.lisp	/^(defmacro do-matches ((match-start match-end regex$/;"	f
do-matches	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<br><a class=none name="do-matches"><b>do-matches<\/b> <i>(match-start match-end regex target-string <tt>&amp;optional<\/tt> result-form <tt>&amp;key<\/tt> start end) declaration* statement*<\/i> =&gt; <i>result*<\/i><\/a>$/;"	a
do-matches-as-strings	practicals-1.0.3/libraries/cl-ppcre-1.2.3/api.lisp	/^(defmacro do-matches-as-strings ((match-var regex$/;"	f
do-matches-as-strings	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<br><a class=none name="do-matches-as-strings"><b>do-matches-as-strings<\/b> <i>(match-var regex target-string <tt>&amp;optional<\/tt> result-form <tt>&amp;key<\/tt> start end sharedp) declaration* statement*<\/i> =&gt; <i>result*<\/i><\/a>$/;"	a
do-primes	macro.lisp	/^(defmacro do-primes ((var start end) &body body)$/;"	f
do-register-groups	practicals-1.0.3/libraries/cl-ppcre-1.2.3/api.lisp	/^(defmacro do-register-groups (var-list (regex target-string$/;"	f
do-register-groups	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<br><a class=none name="do-register-groups"><b>do-register-groups<\/b> <i>var-list (regex target-string <tt>&amp;optional<\/tt> result-form <tt>&amp;key<\/tt> start end sharedp) declaration* statement*<\/i> =&gt; <i>result*<\/i><\/a>$/;"	a
do-rows	practicals-1.0.3/Chapter27/database.lisp	/^(defmacro do-rows ((row table) &body body)$/;"	f
do-scans	practicals-1.0.3/libraries/cl-ppcre-1.2.3/api.lisp	/^(defmacro do-scans ((match-start match-end reg-starts reg-ends regex$/;"	f
do-scans	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<br><a class=none name="do-scans"><b>do-scans<\/b> <i>(match-start match-end reg-starts reg-ends regex target-string <tt>&amp;optional<\/tt> result-form <tt>&amp;key<\/tt> start end) declaration* statement*<\/i> =&gt; <i>result*<\/i><\/a>$/;"	a
do-symbols	slime/xref.lisp	/^(define-caller-pattern do-symbols $/;"	f
do-symbols*	slime/swank.lisp	/^(defmacro do-symbols* ((var &optional (package '*package*) result-form) &body body)$/;"	f
do-with-all-symbols	practicals-1.0.3/libraries/cl-ppcre-1.2.3/api.lisp	/^(defmacro do-with-all-symbols ((variable package-packagelist) &body body)$/;"	f
docstring-ispec	slime/contrib/swank-fancy-inspector.lisp	/^(defun docstring-ispec (label object kind)$/;"	f
documentation	slime/swank-corman.lisp	/^(defun documentation (thing &optional (type 'function))$/;"	f
documentation	slime/xref.lisp	/^(define-caller-pattern documentation (form form) :lisp)$/;"	f
documentation-string	slime/xref.lisp	/^(define-pattern-substitution documentation-string string)$/;"	f
documentation-symbol	slime/swank.lisp	/^(defslimefun documentation-symbol (symbol-name &optional default)$/;"	f
dolist	slime/contrib/swank-kawa.scm	/^(define-syntax dolist $/;"	f
dolist	slime/xref.lisp	/^(define-caller-pattern dolist$/;"	f
dot-product	paip/aip_ch1.lisp	/^(defun dot-product (elem1 elem2)$/;"	f
dotimes	slime/contrib/swank-kawa.scm	/^(define-syntax dotimes $/;"	f
dotimes	slime/xref.lisp	/^(define-caller-pattern dotimes$/;"	f
double-float-epsilon	slime/xref.lisp	/^(define-variable-pattern double-float-epsilon :lisp)$/;"	f
double-float-negative-epsilon	slime/xref.lisp	/^(define-variable-pattern double-float-negative-epsilon :lisp)$/;"	f
dpb	slime/xref.lisp	/^(define-caller-pattern dpb (form form form) :lisp)$/;"	f
dribble	slime/xref.lisp	/^(define-caller-pattern dribble ((:optional form)) :lisp)$/;"	f
dspec-buffer-position	slime/swank-lispworks.lisp	/^(defun dspec-buffer-position (dspec offset)$/;"	f
dspec-file-position	slime/swank-lispworks.lisp	/^(defun dspec-file-position (file dspec)$/;"	f
dspec-stream-position	slime/swank-lispworks.lisp	/^(defun dspec-stream-position (stream dspec)$/;"	f
dump-db	db.lisp	/^(defun dump-db ()$/;"	f
dump-db	practicals-1.0.3/Chapter03/simple-database.lisp	/^(defun dump-db ()$/;"	f
dump-event	slime/swank.lisp	/^(defun dump-event (event stream)$/;"	f
dump-event-history	slime/swank.lisp	/^(defun dump-event-history (stream)$/;"	f
duplicate	onlisp.lisp	/^(defun duplicate (obj lst &key (test #'eql))$/;"	f
dynamic-flet	slime/swank-clisp.lisp	/^(defmacro dynamic-flet (names-functions &body body)$/;"	f
ecase	slime/xref.lisp	/^(define-caller-pattern ecase$/;"	f
echo-stream-input-stream	slime/xref.lisp	/^(define-caller-pattern echo-stream-input-stream (form) :lisp2)$/;"	f
echo-stream-output-stream	slime/xref.lisp	/^(define-caller-pattern echo-stream-output-stream (form) :lisp2)$/;"	f
ed	slime/xref.lisp	/^(define-caller-pattern ed ((:optional form)) :lisp)$/;"	f
ed-in-emacs	slime/swank.lisp	/^(defslimefun ed-in-emacs (&optional what)$/;"	f
eighth	slime/xref.lisp	/^(define-caller-pattern eighth (form) :lisp)$/;"	f
elisp-false?	slime/contrib/swank-mit-scheme.scm	/^(define (elisp-false? o) (member o '(nil ())))$/;"	f
elisp-true?	slime/contrib/swank-mit-scheme.scm	/^(define (elisp-true? o) (not (elisp-false? o)))$/;"	f
elt	slime/xref.lisp	/^(define-caller-pattern elt (form form) :lisp)$/;"	f
emacs-buffer-location-p	slime/swank-lispworks.lisp	/^(defun emacs-buffer-location-p (location)$/;"	f
emacs-buffer-source-location	slime/swank-sbcl.lisp	/^(defun emacs-buffer-source-location (code-location plist)$/;"	f
emacs-connected	slime/swank-backend.lisp	/^(definterface emacs-connected ()$/;"	f
emacs-connected	slime/swank-cmucl.lisp	/^(defimplementation emacs-connected ()$/;"	f
emacs-connected	slime/swank-lispworks.lisp	/^(defimplementation emacs-connected ()$/;"	f
emacs-connected	slime/swank-openmcl.lisp	/^(defimplementation emacs-connected ()$/;"	f
emacs-connected	slime/swank-scl.lisp	/^(defimplementation emacs-connected ())$/;"	f
emacs-inspect	slime/contrib/swank-fancy-inspector.lisp	/^(defmethod emacs-inspect ((%container %package-symbols-container))$/;"	f
emacs-inspect	slime/contrib/swank-fancy-inspector.lisp	/^(defmethod emacs-inspect ((c complex))$/;"	f
emacs-inspect	slime/contrib/swank-fancy-inspector.lisp	/^(defmethod emacs-inspect ((class standard-class))$/;"	f
emacs-inspect	slime/contrib/swank-fancy-inspector.lisp	/^(defmethod emacs-inspect ((condition stream-error))$/;"	f
emacs-inspect	slime/contrib/swank-fancy-inspector.lisp	/^(defmethod emacs-inspect ((f float))$/;"	f
emacs-inspect	slime/contrib/swank-fancy-inspector.lisp	/^(defmethod emacs-inspect ((gf standard-generic-function)) $/;"	f
emacs-inspect	slime/contrib/swank-fancy-inspector.lisp	/^(defmethod emacs-inspect ((i integer))$/;"	f
emacs-inspect	slime/contrib/swank-fancy-inspector.lisp	/^(defmethod emacs-inspect ((method standard-method))$/;"	f
emacs-inspect	slime/contrib/swank-fancy-inspector.lisp	/^(defmethod emacs-inspect ((n number))$/;"	f
emacs-inspect	slime/contrib/swank-fancy-inspector.lisp	/^(defmethod emacs-inspect ((object standard-object))$/;"	f
emacs-inspect	slime/contrib/swank-fancy-inspector.lisp	/^(defmethod emacs-inspect ((package package))$/;"	f
emacs-inspect	slime/contrib/swank-fancy-inspector.lisp	/^(defmethod emacs-inspect ((pathname logical-pathname))$/;"	f
emacs-inspect	slime/contrib/swank-fancy-inspector.lisp	/^(defmethod emacs-inspect ((pathname pathname))$/;"	f
emacs-inspect	slime/contrib/swank-fancy-inspector.lisp	/^(defmethod emacs-inspect ((r ratio))$/;"	f
emacs-inspect	slime/contrib/swank-fancy-inspector.lisp	/^(defmethod emacs-inspect ((slot swank-mop:standard-slot-definition))$/;"	f
emacs-inspect	slime/contrib/swank-fancy-inspector.lisp	/^(defmethod emacs-inspect ((stream file-stream))$/;"	f
emacs-inspect	slime/contrib/swank-fancy-inspector.lisp	/^(defmethod emacs-inspect ((symbol symbol))$/;"	f
emacs-inspect	slime/swank-abcl.lisp	/^(defmethod emacs-inspect ((f function))$/;"	f
emacs-inspect	slime/swank-abcl.lisp	/^(defmethod emacs-inspect ((o t))$/;"	f
emacs-inspect	slime/swank-abcl.lisp	/^(defmethod emacs-inspect ((slot mop::slot-definition))$/;"	f
emacs-inspect	slime/swank-allegro.lisp	/^(defmethod emacs-inspect ((f function))$/;"	f
emacs-inspect	slime/swank-allegro.lisp	/^(defmethod emacs-inspect ((o function))$/;"	f
emacs-inspect	slime/swank-allegro.lisp	/^(defmethod emacs-inspect ((o standard-object))$/;"	f
emacs-inspect	slime/swank-allegro.lisp	/^(defmethod emacs-inspect ((o t))$/;"	f
emacs-inspect	slime/swank-backend.lisp	/^(defgeneric emacs-inspect (object)$/;"	f
emacs-inspect	slime/swank-backend.lisp	/^(defmethod emacs-inspect ((object t))$/;"	f
emacs-inspect	slime/swank-clisp.lisp	/^(defmethod emacs-inspect ((o t))$/;"	f
emacs-inspect	slime/swank-cmucl.lisp	/^(defmethod emacs-inspect ((o array))$/;"	f
emacs-inspect	slime/swank-cmucl.lisp	/^(defmethod emacs-inspect ((o function))$/;"	f
emacs-inspect	slime/swank-cmucl.lisp	/^(defmethod emacs-inspect ((o kernel:code-component))$/;"	f
emacs-inspect	slime/swank-cmucl.lisp	/^(defmethod emacs-inspect ((o kernel:fdefn))$/;"	f
emacs-inspect	slime/swank-cmucl.lisp	/^(defmethod emacs-inspect ((o kernel:funcallable-instance))$/;"	f
emacs-inspect	slime/swank-cmucl.lisp	/^(defmethod emacs-inspect ((o simple-vector))$/;"	f
emacs-inspect	slime/swank-cmucl.lisp	/^(defmethod emacs-inspect ((o t))$/;"	f
emacs-inspect	slime/swank-corman.lisp	/^(defmethod emacs-inspect ((class standard-class))$/;"	f
emacs-inspect	slime/swank-corman.lisp	/^(defmethod emacs-inspect ((o t))$/;"	f
emacs-inspect	slime/swank-corman.lisp	/^(defmethod emacs-inspect ((pathname pathnames::pathname-internal))$/;"	f
emacs-inspect	slime/swank-corman.lisp	/^(defmethod emacs-inspect ((slot cons))$/;"	f
emacs-inspect	slime/swank-ecl.lisp	/^(defmethod emacs-inspect ((o t))$/;"	f
emacs-inspect	slime/swank-lispworks.lisp	/^(defmethod emacs-inspect ((o function))$/;"	f
emacs-inspect	slime/swank-lispworks.lisp	/^(defmethod emacs-inspect ((o standard-object))$/;"	f
emacs-inspect	slime/swank-lispworks.lisp	/^(defmethod emacs-inspect ((o t))$/;"	f
emacs-inspect	slime/swank-openmcl.lisp	/^(defmethod emacs-inspect ((c ccl::compiled-lexical-closure))$/;"	f
emacs-inspect	slime/swank-openmcl.lisp	/^(defmethod emacs-inspect ((o t))$/;"	f
emacs-inspect	slime/swank-openmcl.lisp	/^(defmethod emacs-inspect ((uv uvector-inspector))$/;"	f
emacs-inspect	slime/swank-openmcl.lisp	/^(defmethod emacs-inspect :around ((o t))$/;"	f
emacs-inspect	slime/swank-sbcl.lisp	/^(defmethod emacs-inspect ((o function))$/;"	f
emacs-inspect	slime/swank-sbcl.lisp	/^(defmethod emacs-inspect ((o sb-ext:weak-pointer))$/;"	f
emacs-inspect	slime/swank-sbcl.lisp	/^(defmethod emacs-inspect ((o sb-kernel:code-component))$/;"	f
emacs-inspect	slime/swank-sbcl.lisp	/^(defmethod emacs-inspect ((o sb-kernel:fdefn))$/;"	f
emacs-inspect	slime/swank-sbcl.lisp	/^(defmethod emacs-inspect ((o t))$/;"	f
emacs-inspect	slime/swank-sbcl.lisp	/^(defmethod emacs-inspect :around ((o generic-function))$/;"	f
emacs-inspect	slime/swank-scl.lisp	/^(defmethod emacs-inspect ((o array))$/;"	f
emacs-inspect	slime/swank-scl.lisp	/^(defmethod emacs-inspect ((o function))$/;"	f
emacs-inspect	slime/swank-scl.lisp	/^(defmethod emacs-inspect ((o kernel:code-component))$/;"	f
emacs-inspect	slime/swank-scl.lisp	/^(defmethod emacs-inspect ((o kernel:fdefn))$/;"	f
emacs-inspect	slime/swank-scl.lisp	/^(defmethod emacs-inspect ((o simple-vector))$/;"	f
emacs-inspect	slime/swank-scl.lisp	/^(defmethod emacs-inspect ((o t))$/;"	f
emacs-inspect	slime/swank.lisp	/^(defmethod emacs-inspect ((array array))$/;"	f
emacs-inspect	slime/swank.lisp	/^(defmethod emacs-inspect ((char character))$/;"	f
emacs-inspect	slime/swank.lisp	/^(defmethod emacs-inspect ((ht hash-table))$/;"	f
emacs-inspect	slime/swank.lisp	/^(defmethod emacs-inspect ((o cons))$/;"	f
emacs-rex	slime/contrib/swank-mit-scheme.scm	/^(define (emacs-rex socket level sexp package thread id)$/;"	f
embed-code	practicals-1.0.3/Chapter31/embed-foo-with-conditions-and-restarts.lisp	/^(defmethod embed-code ((pp html-pretty-printer) code)$/;"	f
embed-code	practicals-1.0.3/Chapter31/html.lisp	/^(defgeneric embed-code (processor code))$/;"	f
embed-code	practicals-1.0.3/Chapter31/html.lisp	/^(defmethod embed-code ((compiler html-compiler) code)$/;"	f
embed-code	practicals-1.0.3/Chapter31/html.lisp	/^(defmethod embed-code ((pp html-pretty-printer) code)$/;"	f
embed-value	practicals-1.0.3/Chapter31/embed-foo-with-conditions-and-restarts.lisp	/^(defmethod embed-value ((pp html-pretty-printer) value)$/;"	f
embed-value	practicals-1.0.3/Chapter31/html.lisp	/^(defgeneric embed-value (processor value))$/;"	f
embed-value	practicals-1.0.3/Chapter31/html.lisp	/^(defmethod embed-value ((compiler html-compiler) value)$/;"	f
embed-value	practicals-1.0.3/Chapter31/html.lisp	/^(defmethod embed-value ((pp html-pretty-printer) value)$/;"	f
embedded-lisp-in-interpreter	practicals-1.0.3/Chapter31/embed-foo-with-conditions-and-restarts.lisp	/^(define-condition embedded-lisp-in-interpreter (error)$/;"	f
emit	practicals-1.0.3/Chapter31/html.lisp	/^(defun emit (ip string)$/;"	f
emit-attributes	practicals-1.0.3/Chapter31/html.lisp	/^(defun emit-attributes (processor attributes)$/;"	f
emit-close-tag	practicals-1.0.3/Chapter31/html.lisp	/^(defun emit-close-tag (processor tag body-p)$/;"	f
emit-css-import	practicals-1.0.3/Chapter31/css.lisp	/^(defun emit-css-import (processor sexp)$/;"	f
emit-css-selector	practicals-1.0.3/Chapter31/css.lisp	/^(defun emit-css-selector (processor selector)$/;"	f
emit-element-body	practicals-1.0.3/Chapter31/html.lisp	/^(defun emit-element-body (processor tag body)$/;"	f
emit-freshline	practicals-1.0.3/Chapter31/html.lisp	/^(defun emit-freshline (ip)$/;"	f
emit-html	chiglug-macros/power-of-lisp-macros.lisp	/^(defmacro emit-html ((tag &rest attributes) &body body)$/;"	f
emit-html	practicals-1.0.3/Chapter31/html.lisp	/^(defun emit-html (sexp) (process (get-pretty-printer) sexp))$/;"	f
emit-newline	practicals-1.0.3/Chapter31/html.lisp	/^(defun emit-newline (ip)$/;"	f
emit-open-tag	practicals-1.0.3/Chapter31/html.lisp	/^(defun emit-open-tag (processor tag body-p attributes)$/;"	f
emit/no-newlines	practicals-1.0.3/Chapter31/html.lisp	/^(defun emit\/no-newlines (ip string &key (start 0) end)$/;"	f
empty	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<h4><a name="empty" class=none>Empty strings instead of <code>undef<\/code> in <code>$1<\/code>, <code>$2<\/code>, etc.<\/a><\/h4>$/;"	a
empty-element-p	practicals-1.0.3/Chapter31/html.lisp	/^(defun empty-element-p (tag) (find tag *empty-elements*))$/;"	f
empty-p	practicals-1.0.3/Chapter29/playlist.lisp	/^(defun empty-p (playlist)$/;"	f
enable-sigio-on-fd	slime/swank-sbcl.lisp	/^(defun enable-sigio-on-fd (fd)$/;"	f
enclose	slime/xref.lisp	/^(define-caller-pattern enclose (form &optional :ignore) :lisp2)$/;"	f
encode-arglist	slime/contrib/swank-arglists.lisp	/^(defun encode-arglist (decoded-arglist)$/;"	f
encode-keyword-arg	slime/contrib/swank-arglists.lisp	/^(defun encode-keyword-arg (arg)$/;"	f
encode-message	slime/swank.lisp	/^(defun encode-message (message stream)$/;"	f
encode-optional-arg	slime/contrib/swank-arglists.lisp	/^(defun encode-optional-arg (optional-arg)$/;"	f
encode-required-arg	slime/contrib/swank-arglists.lisp	/^(defun encode-required-arg (arg)$/;"	f
encode-universal-time	slime/xref.lisp	/^(define-caller-pattern encode-universal-time $/;"	f
encoded-string-length	practicals-1.0.3/Chapter25/id3v2.lisp	/^(defun encoded-string-length (string encoding terminated)$/;"	f
encoding-program	practicals-1.0.3/Chapter25/id3v2.lisp	/^(defun encoding-program (id3) (get-text-info id3 "TEN" "TENC"))$/;"	f
end-of-string-p	practicals-1.0.3/libraries/cl-ppcre-1.2.3/lexer.lisp	/^(defun end-of-string-p (lexer)$/;"	f
end-string	practicals-1.0.3/libraries/cl-ppcre-1.2.3/optimize.lisp	/^(defmethod end-string ((regex regex))$/;"	f
end-string-aux	practicals-1.0.3/libraries/cl-ppcre-1.2.3/optimize.lisp	/^(defgeneric end-string-aux (regex &optional old-case-insensitive-p)$/;"	f
end-string-aux	practicals-1.0.3/libraries/cl-ppcre-1.2.3/optimize.lisp	/^(defmethod end-string-aux ((regex regex)$/;"	f
end-string-aux	practicals-1.0.3/libraries/cl-ppcre-1.2.3/optimize.lisp	/^(defmethod end-string-aux ((register register)$/;"	f
end-string-aux	practicals-1.0.3/libraries/cl-ppcre-1.2.3/optimize.lisp	/^(defmethod end-string-aux ((seq seq)$/;"	f
end-string-aux	practicals-1.0.3/libraries/cl-ppcre-1.2.3/optimize.lisp	/^(defmethod end-string-aux ((standalone standalone)$/;"	f
end-string-aux	practicals-1.0.3/libraries/cl-ppcre-1.2.3/optimize.lisp	/^(defmethod end-string-aux ((str str)$/;"	f
endp	slime/xref.lisp	/^(define-caller-pattern endp (form) :lisp)$/;"	f
enough-namestring	slime/xref.lisp	/^(define-caller-pattern enough-namestring (form (:optional form)) :lisp)$/;"	f
enqueue	slime/sbcl-pprint-patch.lisp	/^(defmacro enqueue (stream type &rest args)$/;"	f
enqueue-annotation	slime/sbcl-pprint-patch.lisp	/^(defun enqueue-annotation (stream handler record)$/;"	f
enrich-decoded-arglist-with-extra-keywords	slime/contrib/swank-arglists.lisp	/^(defun enrich-decoded-arglist-with-extra-keywords (decoded-arglist form)$/;"	f
enrich-decoded-arglist-with-keywords	slime/contrib/swank-arglists.lisp	/^(defun enrich-decoded-arglist-with-keywords (decoded-arglist keywords allow-other-keys-p)$/;"	f
ensure-generic-function	slime/xref.lisp	/^(define-caller-pattern ensure-generic-function (name &key (:star form)) :lisp2)$/;"	f
ensure-list	slime/contrib/swank-arglists.lisp	/^(defun ensure-list (thing)$/;"	f
env-internals:confirm-p	slime/swank-lispworks.lisp	/^(defmethod env-internals:confirm-p ((e slime-env) &optional msg &rest args)$/;"	f
env-internals:environment-display-debugger	slime/swank-lispworks.lisp	/^(defmethod env-internals:environment-display-debugger ((env slime-env))$/;"	f
env-internals:environment-display-notifier	slime/swank-lispworks.lisp	/^(defmethod env-internals:environment-display-notifier$/;"	f
environment-names	slime/contrib/swank-mit-scheme.scm	/^(define (environment-names env)$/;"	f
environment>frame-vars	slime/contrib/swank-mit-scheme.scm	/^(define (environment>frame-vars environment)$/;"	f
eq	slime/xref.lisp	/^(define-caller-pattern eq (form form) :lisp)$/;"	f
eql	slime/xref.lisp	/^(define-caller-pattern eql (form form) :lisp)$/;"	f
equal	slime/xref.lisp	/^(define-caller-pattern equal (form form) :lisp)$/;"	f
equalp	slime/xref.lisp	/^(define-caller-pattern equalp (form form) :lisp)$/;"	f
erat	nifty_funs.lisp	/^(defun erat (n)$/;"	f
eratosthenes-sieve	nifty_funs.lisp	/^(defun eratosthenes-sieve (n &optional (composites nil) (primes nil))$/;"	f
error	slime/xref.lisp	/^(define-caller-pattern error (form (:star form)) :lisp)$/;"	f
esc	slime/contrib/swank-kawa.scm	/^(define-syntax esc$/;"	f
escape	practicals-1.0.3/Chapter31/html.lisp	/^(defun escape (in to-escape)$/;"	f
escape-char	practicals-1.0.3/Chapter31/html.lisp	/^(defun escape-char (char)$/;"	f
escape-non-ascii	slime/swank.lisp	/^(defun escape-non-ascii (string)$/;"	f
etypecase	slime/xref.lisp	/^(define-caller-pattern etypecase (form (:star (symbol (:star form)))) :lisp)$/;"	f
euler-totient	nifty_funs.lisp	/^(defun euler-totient (n)$/;"	f
eval	slime/xref.lisp	/^(define-caller-pattern eval (form) :lisp)$/;"	f
eval-and-grab-output	slime/swank.lisp	/^(defslimefun eval-and-grab-output (string)$/;"	f
eval-code	practicals-1.0.3/Chapter31/embed-foo-with-conditions-and-restarts.lisp	/^(defun eval-code (&optional condition)$/;"	f
eval-dynamic-variables	practicals-1.0.3/Chapter31/embed-foo-with-conditions-and-restarts.lisp	/^(defun eval-dynamic-variables (&optional condition)$/;"	f
eval-for-emacs	slime/swank.lisp	/^(defun eval-for-emacs (form buffer-package id)$/;"	f
eval-in-emacs	slime/swank.lisp	/^(defun eval-in-emacs (form &optional nowait)$/;"	f
eval-in-frame	slime/swank-abcl.lisp	/^(defimplementation eval-in-frame (form frame-number)$/;"	f
eval-in-frame	slime/swank-allegro.lisp	/^(defimplementation eval-in-frame (form frame-number)$/;"	f
eval-in-frame	slime/swank-backend.lisp	/^(definterface eval-in-frame (form frame-number)$/;"	f
eval-in-frame	slime/swank-clisp.lisp	/^(defimplementation eval-in-frame (form frame-number)$/;"	f
eval-in-frame	slime/swank-cmucl.lisp	/^(defimplementation eval-in-frame (form index)$/;"	f
eval-in-frame	slime/swank-corman.lisp	/^(defimplementation eval-in-frame (form frame-number)$/;"	f
eval-in-frame	slime/swank-ecl.lisp	/^(defimplementation eval-in-frame (form frame-number)$/;"	f
eval-in-frame	slime/swank-lispworks.lisp	/^(defimplementation eval-in-frame (form frame-number)$/;"	f
eval-in-frame	slime/swank-openmcl.lisp	/^(defimplementation eval-in-frame (form index)$/;"	f
eval-in-frame	slime/swank-sbcl.lisp	/^(defimplementation eval-in-frame (form index)$/;"	f
eval-in-frame	slime/swank-scl.lisp	/^(defimplementation eval-in-frame (form index)$/;"	f
eval-region	slime/contrib/swank-mit-scheme.scm	/^(define (eval-region string socket)$/;"	f
eval-region	slime/swank.lisp	/^(defun eval-region (string)$/;"	f
eval-string-in-frame	slime/swank.lisp	/^(defslimefun eval-string-in-frame (string index)$/;"	f
eval-when	slime/xref.lisp	/^(define-caller-pattern eval-when$/;"	f
evalhook	slime/xref.lisp	/^(define-caller-pattern evalhook (form fn fn &optional :ignore) :lisp)$/;"	f
evaluate	practicals-1.0.3/Chapter31/embed-foo-with-conditions-and-restarts.lisp	/^(defun evaluate (&optional condition)$/;"	f
evenp	slime/xref.lisp	/^(define-caller-pattern evenp (form) :lisp)$/;"	f
event-history-to-list	slime/swank.lisp	/^(defun event-history-to-list ()$/;"	f
every	slime/xref.lisp	/^(define-caller-pattern every (fn form (:star form)) :lisp)$/;"	f
everythingp	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defgeneric everythingp (regex)$/;"	f
everythingp	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod everythingp ((alternation alternation))$/;"	f
everythingp	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod everythingp ((everything everything))$/;"	f
everythingp	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod everythingp ((regex regex))$/;"	f
everythingp	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod everythingp ((register register))$/;"	f
everythingp	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod everythingp ((repetition repetition))$/;"	f
everythingp	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod everythingp ((seq seq))$/;"	f
everythingp	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod everythingp ((standalone standalone))$/;"	f
ex-while	chiglug-macros/presentation.lisp	/^(defun ex-while (n)$/;"	f
exactly-one-p	slime/contrib/swank-arglists.lisp	/^(defun exactly-one-p (&rest values)$/;"	f
execute-menu-choice-for-presentation-id	slime/contrib/swank-presentations.lisp	/^(defun execute-menu-choice-for-presentation-id (id count item)$/;"	f
exp	slime/xref.lisp	/^(define-caller-pattern exp (form) :lisp)$/;"	f
expand-macro-form	practicals-1.0.3/Chapter31/html.lisp	/^(defun expand-macro-form (form)$/;"	f
explain-classification	practicals-1.0.3/Chapter23/spam.lisp	/^(defun explain-classification (file)$/;"	f
explode	onlisp.lisp	/^(defun explode (sym)$/;"	f
export	slime/xref.lisp	/^(define-caller-pattern export ((:or symbol ((:star symbol)))$/;"	f
expt	slime/xref.lisp	/^(define-caller-pattern expt (form form) :lisp)$/;"	f
ext:stream-clear-input	slime/swank-scl.lisp	/^(defmethod ext:stream-clear-input ((stream slime-input-stream))$/;"	f
ext:stream-clear-output	slime/swank-scl.lisp	/^(defmethod ext:stream-clear-output ((stream slime-output-stream))$/;"	f
ext:stream-file-position	slime/swank-scl.lisp	/^(defmethod ext:stream-file-position ((stream slime-input-stream)$/;"	f
ext:stream-file-position	slime/swank-scl.lisp	/^(defmethod ext:stream-file-position ((stream slime-output-stream)$/;"	f
ext:stream-finish-output	slime/swank-scl.lisp	/^(defmethod ext:stream-finish-output ((stream slime-output-stream))$/;"	f
ext:stream-force-output	slime/swank-scl.lisp	/^(defmethod ext:stream-force-output ((stream slime-output-stream))$/;"	f
ext:stream-line-column	slime/swank-scl.lisp	/^(defmethod ext:stream-line-column ((stream slime-output-stream))$/;"	f
ext:stream-line-length	slime/swank-scl.lisp	/^(defmethod ext:stream-line-length ((stream slime-output-stream))$/;"	f
ext:stream-listen	slime/swank-scl.lisp	/^(defmethod ext:stream-listen ((stream slime-input-stream))$/;"	f
ext:stream-read-chars	slime/swank-scl.lisp	/^(defmethod ext:stream-read-chars ((stream slime-input-stream) buffer$/;"	f
ext:stream-write-chars	slime/swank-scl.lisp	/^(defmethod ext:stream-write-chars ((stream slime-output-stream)$/;"	f
extended-p	practicals-1.0.3/Chapter25/id3v2.lisp	/^(defun extended-p (flags) (logbitp 6 flags))$/;"	f
externalize-reference	slime/swank-sbcl.lisp	/^(defun externalize-reference (ref)$/;"	f
extra-keywords	slime/contrib/swank-arglists.lisp	/^(defgeneric extra-keywords (operator &rest args)$/;"	f
extra-keywords	slime/contrib/swank-arglists.lisp	/^(defmethod extra-keywords ((operator (eql 'cerror))$/;"	f
extra-keywords	slime/contrib/swank-arglists.lisp	/^(defmethod extra-keywords ((operator (eql 'change-class)) $/;"	f
extra-keywords	slime/contrib/swank-arglists.lisp	/^(defmethod extra-keywords ((operator (eql 'error))$/;"	f
extra-keywords	slime/contrib/swank-arglists.lisp	/^(defmethod extra-keywords ((operator (eql 'make-condition))$/;"	f
extra-keywords	slime/contrib/swank-arglists.lisp	/^(defmethod extra-keywords ((operator (eql 'make-instance))$/;"	f
extra-keywords	slime/contrib/swank-arglists.lisp	/^(defmethod extra-keywords ((operator (eql 'signal))$/;"	f
extra-keywords	slime/contrib/swank-arglists.lisp	/^(defmethod extra-keywords ((operator (eql 'warn))$/;"	f
extra-keywords	slime/contrib/swank-arglists.lisp	/^(defmethod extra-keywords (operator &rest args)$/;"	f
extra-keywords/change-class	slime/contrib/swank-arglists.lisp	/^(defun extra-keywords\/change-class (operator &rest args)$/;"	f
extra-keywords/make-instance	slime/contrib/swank-arglists.lisp	/^(defun extra-keywords\/make-instance (operator &rest args)$/;"	f
extra-keywords/slots	slime/contrib/swank-arglists.lisp	/^(defun extra-keywords\/slots (class)$/;"	f
extract-features	practicals-1.0.3/Chapter23/spam.lisp	/^(defun extract-features (text)$/;"	f
extract-frame-line	slime/swank-clisp.lisp	/^(defun extract-frame-line (frame-string)$/;"	f
extract-function-name	slime/swank-clisp.lisp	/^(defun extract-function-name (string)$/;"	f
extract-schema	practicals-1.0.3/Chapter27/database.lisp	/^(defun extract-schema (column-names schema)$/;"	f
extract-words	practicals-1.0.3/Chapter23/spam.lisp	/^(defun extract-words (text)$/;"	f
extractor	practicals-1.0.3/Chapter27/database.lisp	/^(defun extractor (schema)$/;"	f
fact-tr	nifty_funs.lisp	/^(defun fact-tr (n &optional (acc 1))$/;"	f
fail	practicals-1.0.3/libraries/cl-ppcre-1.2.3/lexer.lisp	/^(defun fail (lexer)$/;"	f
fallback-source-location	slime/swank-sbcl.lisp	/^(defun fallback-source-location (code-location)$/;"	f
false-negative-p	practicals-1.0.3/Chapter23/spam.lisp	/^(defun false-negative-p (result)$/;"	f
false-positive-p	practicals-1.0.3/Chapter23/spam.lisp	/^(defun false-positive-p (result)$/;"	f
favg	chiglug-macros/presentation.lisp	/^(defun favg (&rest args)$/;"	f
fboundp	slime/xref.lisp	/^(define-caller-pattern fboundp (form) :lisp)$/;"	f
fceiling	slime/xref.lisp	/^(define-caller-pattern fceiling (form (:optional form)) :lisp)$/;"	f
fcntl	slime/swank-cmucl.lisp	/^(defun fcntl (fd command arg)$/;"	f
fdefinition	slime/xref.lisp	/^(define-caller-pattern fdefinition (form) :lisp2)$/;"	f
feature-in-list-p	slime/swank-sbcl.lisp	/^(defun feature-in-list-p (feature list)$/;"	f
features-for-emacs	slime/swank.lisp	/^(defun features-for-emacs ()$/;"	f
ffloor	slime/xref.lisp	/^(define-caller-pattern ffloor (form (:optional form)) :lisp)$/;"	f
fib-tr	nifty_funs.lisp	/^(defun fib-tr (n &optional (next 1) (current 0))$/;"	f
fif	onlisp.lisp	/^(defun fif (if then &optional else)$/;"	f
fifth	slime/xref.lisp	/^(define-caller-pattern fifth (form) :lisp)$/;"	f
file->row	practicals-1.0.3/Chapter27/mp3-database.lisp	/^(defun file->row (file)$/;"	f
file->song	practicals-1.0.3/Chapter28/song-source.lisp	/^(defun file->song (file)$/;"	f
file-author	slime/xref.lisp	/^(define-caller-pattern file-author (form) :lisp)$/;"	f
file-error-pathname	slime/xref.lisp	/^(define-caller-pattern file-error-pathname (form) :lisp2)$/;"	f
file-exists-p	practicals-1.0.3/Chapter15/pathnames.lisp	/^(defun file-exists-p (pathname)$/;"	f
file-for-current-idx	practicals-1.0.3/Chapter29/playlist.lisp	/^(defun file-for-current-idx (playlist)$/;"	f
file-length	slime/swank-scl.lisp	/^(defmethod file-length ((stream slime-input-stream))$/;"	f
file-length	slime/swank-scl.lisp	/^(defmethod file-length ((stream slime-output-stream))$/;"	f
file-length	slime/xref.lisp	/^(define-caller-pattern file-length (form) :lisp)$/;"	f
file-namestring	slime/xref.lisp	/^(define-caller-pattern file-namestring (form) :lisp)$/;"	f
file-newer-p	slime/swank-loader.lisp	/^(defun file-newer-p (new-file old-file)$/;"	f
file-newer-p	slime/swank.lisp	/^(defun file-newer-p (new-file old-file)$/;"	f
file-p	practicals-1.0.3/Chapter15/pathnames.lisp	/^(defun file-p (name)$/;"	f
file-pathname-p	practicals-1.0.3/Chapter15/pathnames.lisp	/^(defun file-pathname-p (p)$/;"	f
file-position	slime/xref.lisp	/^(define-caller-pattern file-position (form (:optional form)) :lisp)$/;"	f
file-source-location	slime/swank-sbcl.lisp	/^(defun file-source-location (code-location)$/;"	f
file-source-location-p	slime/swank-cmucl.lisp	/^(defun file-source-location-p (object) $/;"	f
file-stream	slime/swank-corman.lisp	/^(defclass file-stream ())$/;"	f
file-string-length	slime/xref.lisp	/^(define-caller-pattern file-string-length (form form) :lisp2)$/;"	f
file-write-date	slime/xref.lisp	/^(define-caller-pattern file-write-date (form) :lisp)$/;"	f
fill	slime/xref.lisp	/^(define-caller-pattern fill (form form &key (:star form)) :lisp)$/;"	f
fill-buffer!	slime/contrib/swank-mit-scheme.scm	/^(define (fill-buffer! in buffer)$/;"	f
fill-pointer	slime/xref.lisp	/^(define-caller-pattern fill-pointer (form) :lisp)$/;"	f
filter	onlisp.lisp	/^(defun filter (fn lst)$/;"	f
filter	tmp.lisp	/^(defun filter (pred L)$/;"	f
filterdef	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<li><a class=none name="filterdef"><code>(:FILTER &lt;<i>function<\/i>&gt; <tt>&amp;optional<\/tt>$/;"	a
filters	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<br>&nbsp;<br><h3><a name="filters" class=none>Filters<\/a><\/h3>$/;"	a
fin	slime/contrib/swank-kawa.scm	/^(define-syntax fin$/;"	f
find	slime/xref.lisp	/^(define-caller-pattern find (form form &key (:star form)) :lisp)$/;"	f
find-all	paip/aip_ch3.lisp	/^(defun find-all (item sequence &rest keyword-args$/;"	f
find-all-symbols	slime/xref.lisp	/^(define-caller-pattern find-all-symbols (form) :lisp)$/;"	f
find-buffer-package	slime/contrib/swank-mit-scheme.scm	/^(define (find-buffer-package name)$/;"	f
find-class	slime/xref.lisp	/^(define-caller-pattern find-class (form &optional form form) :lisp2)$/;"	f
find-column	practicals-1.0.3/Chapter27/database.lisp	/^(defun find-column (column-name schema)$/;"	f
find-dd	slime/swank-cmucl.lisp	/^(defun find-dd (name)$/;"	f
find-dd	slime/swank-scl.lisp	/^(defun find-dd (name)$/;"	f
find-definition	slime/slime.el	/^(def-slime-test find-definition$/;"	f
find-definition-for-thing	slime/swank.lisp	/^(defslimefun find-definition-for-thing (thing)$/;"	f
find-definition-in-buffer	slime/swank-allegro.lisp	/^(defun find-definition-in-buffer (filename)$/;"	f
find-definition-in-file	slime/swank-allegro.lisp	/^(defun find-definition-in-file (fspec type file top-level)$/;"	f
find-definition.2	slime/slime.el	/^(def-slime-test find-definition.2$/;"	f
find-definitions	slime/swank-abcl.lisp	/^(defimplementation find-definitions (symbol)$/;"	f
find-definitions	slime/swank-allegro.lisp	/^(defimplementation find-definitions (symbol)$/;"	f
find-definitions	slime/swank-backend.lisp	/^(definterface find-definitions (name)$/;"	f
find-definitions	slime/swank-clisp.lisp	/^(defimplementation find-definitions (name)$/;"	f
find-definitions	slime/swank-cmucl.lisp	/^(defimplementation find-definitions (name)$/;"	f
find-definitions	slime/swank-corman.lisp	/^(defimplementation find-definitions (name)$/;"	f
find-definitions	slime/swank-ecl.lisp	/^(defimplementation find-definitions (name)$/;"	f
find-definitions	slime/swank-lispworks.lisp	/^(defimplementation find-definitions (name)$/;"	f
find-definitions	slime/swank-openmcl.lisp	/^(defimplementation find-definitions (symbol)$/;"	f
find-definitions	slime/swank-sbcl.lisp	/^(defimplementation find-definitions (name)$/;"	f
find-definitions	slime/swank-scl.lisp	/^(defimplementation find-definitions (name)$/;"	f
find-definitions-for-emacs	slime/contrib/swank-kawa.scm	/^(defslimefun find-definitions-for-emacs (env name)$/;"	f
find-definitions-for-emacs	slime/swank.lisp	/^(defslimefun find-definitions-for-emacs (name)$/;"	f
find-encapsulation	slime/metering.lisp	/^(defun find-encapsulation (min-args optionals-p)$/;"	f
find-external-format	slime/swank-allegro.lisp	/^(defimplementation find-external-format (coding-system)$/;"	f
find-external-format	slime/swank-backend.lisp	/^(definterface find-external-format (coding-system)$/;"	f
find-external-format	slime/swank-clisp.lisp	/^(defimplementation find-external-format (coding-system)$/;"	f
find-external-format	slime/swank-cmucl.lisp	/^(defimplementation find-external-format (coding-system)$/;"	f
find-external-format	slime/swank-lispworks.lisp	/^(defimplementation find-external-format (coding-system)$/;"	f
find-external-format	slime/swank-openmcl.lisp	/^(defimplementation find-external-format (coding-system)$/;"	f
find-external-format	slime/swank-sbcl.lisp	/^(defimplementation find-external-format (coding-system)$/;"	f
find-external-format	slime/swank-scl.lisp	/^(defimplementation find-external-format (coding-system)$/;"	f
find-external-format-or-lose	slime/swank.lisp	/^(defun find-external-format-or-lose (coding-system)$/;"	f
find-frame	practicals-1.0.3/Chapter25/id3v2.lisp	/^(defun find-frame (id3 ids)$/;"	f
find-frame-class	practicals-1.0.3/Chapter25/id3v2.lisp	/^(defun find-frame-class (name)$/;"	f
find-fspec-location	slime/swank-abcl.lisp	/^(defun find-fspec-location (fspec type)$/;"	f
find-fspec-location	slime/swank-allegro.lisp	/^(defun find-fspec-location (fspec type file top-level)$/;"	f
find-if	slime/xref.lisp	/^(define-caller-pattern find-if (fn form &key (:star form)) :lisp)$/;"	f
find-if-not	slime/xref.lisp	/^(define-caller-pattern find-if-not (fn form &key (:star form)) :lisp)$/;"	f
find-matching-packages	slime/contrib/swank-c-p-c.lisp	/^(defun find-matching-packages (name matcher)$/;"	f
find-matching-symbols	slime/contrib/swank-c-p-c.lisp	/^(defun find-matching-symbols (string package external test)$/;"	f
find-matching-symbols-in-list	slime/contrib/swank-c-p-c.lisp	/^(defun find-matching-symbols-in-list (string list test)$/;"	f
find-method	slime/xref.lisp	/^(define-caller-pattern find-method (fn &rest :ignore) :lisp2)$/;"	f
find-mit-scheme-package	slime/contrib/swank-mit-scheme.scm	/^(defun find-mit-scheme-package ()$/;"	f
find-module	slime/swank.lisp	/^(defun find-module (module)$/;"	f
find-package	slime/xref.lisp	/^(define-caller-pattern find-package ((:rest :ignore)) :lisp)$/;"	f
find-restart	slime/xref.lisp	/^(define-caller-pattern find-restart (form &optional form) :lisp2)$/;"	f
find-roots-and-cycles	slime/xref.lisp	/^(defun find-roots-and-cycles (&optional (mode *default-graphing-mode*)$/;"	f
find-song-source	practicals-1.0.3/Chapter28/song-source.lisp	/^(defgeneric find-song-source (type request)$/;"	f
find-song-source	practicals-1.0.3/Chapter28/song-source.lisp	/^(defmethod find-song-source ((type (eql 'singleton)) request)$/;"	f
find-song-source	practicals-1.0.3/Chapter29/playlist.lisp	/^(defmethod find-song-source ((type (eql 'playlist)) request)$/;"	f
find-source-location	slime/swank-backend.lisp	/^(definterface find-source-location (object)$/;"	f
find-source-location	slime/swank-ecl.lisp	/^(defimplementation find-source-location (obj)$/;"	f
find-source-location	slime/swank-sbcl.lisp	/^(defimplementation find-source-location (obj)$/;"	f
find-symbol	slime/xref.lisp	/^(define-caller-pattern find-symbol (form &optional :ignore) :lisp)$/;"	f
find-thread	slime/swank-abcl.lisp	/^(defimplementation find-thread (id)$/;"	f
find-thread	slime/swank-allegro.lisp	/^(defimplementation find-thread (id)$/;"	f
find-thread	slime/swank-backend.lisp	/^(definterface find-thread (id)$/;"	f
find-thread	slime/swank-corman.lisp	/^(defimplementation find-thread (thread)$/;"	f
find-thread	slime/swank-lispworks.lisp	/^(defimplementation find-thread (id)$/;"	f
find-thread	slime/swank-openmcl.lisp	/^(defimplementation find-thread (id)$/;"	f
find-thread	slime/swank-scl.lisp	/^(defimplementation find-thread (id)$/;"	f
find-top-frame	slime/swank-lispworks.lisp	/^(defun find-top-frame ()$/;"	f
find-topframe	slime/swank-allegro.lisp	/^(defun find-topframe ()$/;"	f
find-worker-thread	slime/swank.lisp	/^(defun find-worker-thread (id)$/;"	f
find2	onlisp.lisp	/^(defun find2 (fn lst)$/;"	f
finish-output	slime/xref.lisp	/^(define-caller-pattern finish-output ((:optional form)) :lisp)$/;"	f
fint	onlisp.lisp	/^(defun fint (fn &rest fns)$/;"	f
first	slime/xref.lisp	/^(define-caller-pattern first (form) :lisp)$/;"	f
fisher	practicals-1.0.3/Chapter23/spam.lisp	/^(defun fisher (probs number-of-probs)$/;"	f
flatten	onlisp.lisp	/^(defun flatten (x)$/;"	f
flatten	practicals-1.0.3/libraries/cl-ppcre-1.2.3/optimize.lisp	/^(defgeneric flatten (regex)$/;"	f
flatten	practicals-1.0.3/libraries/cl-ppcre-1.2.3/optimize.lisp	/^(defmethod flatten ((alternation alternation))$/;"	f
flatten	practicals-1.0.3/libraries/cl-ppcre-1.2.3/optimize.lisp	/^(defmethod flatten ((branch branch))$/;"	f
flatten	practicals-1.0.3/libraries/cl-ppcre-1.2.3/optimize.lisp	/^(defmethod flatten ((regex regex))$/;"	f
flatten	practicals-1.0.3/libraries/cl-ppcre-1.2.3/optimize.lisp	/^(defmethod flatten ((seq seq))$/;"	f
flet	slime/xref.lisp	/^(define-caller-pattern flet$/;"	f
float	slime/xref.lisp	/^(define-caller-pattern float (form (:optional form)) :lisp)$/;"	f
float-digits	slime/xref.lisp	/^(define-caller-pattern float-digits (form) :lisp)$/;"	f
float-precision	slime/xref.lisp	/^(define-caller-pattern float-precision (form) :lisp)$/;"	f
float-radix	slime/xref.lisp	/^(define-caller-pattern float-radix (form) :lisp)$/;"	f
float-sign	slime/xref.lisp	/^(define-caller-pattern float-sign (form (:optional form)) :lisp)$/;"	f
floatp	slime/xref.lisp	/^(define-caller-pattern floatp (form) :lisp)$/;"	f
floor	slime/xref.lisp	/^(define-caller-pattern floor (form (:optional form)) :lisp)$/;"	f
flush-annotations	slime/sbcl-pprint-patch.lisp	/^(defun flush-annotations (stream end truncatep)$/;"	f
flush-streams	slime/swank-abcl.lisp	/^(defun flush-streams ()$/;"	f
fmakunbound	slime/xref.lisp	/^(define-caller-pattern fmakunbound (form) :lisp)$/;"	f
fn	slime/xref.lisp	/^(define-pattern-substitution fn$/;"	f
fn-1	slime/doc/html/Compound-Completion.html	/^<h4>Footnotes<\/h4><p class="footnote"><small>[<a name="fn-1" href="#fnd-1">1<\/a>]<\/small> This style of completion is modelled on <samp><span class="file">completer.el<\/span><\/samp>$/;"	a
fn-1	slime/doc/html/Presentations.html	/^<h4>Footnotes<\/h4><p class="footnote"><small>[<a name="fn-1" href="#fnd-1">1<\/a>]<\/small> Presentations are a feature originating$/;"	a
fn-1	slime/doc/html/Semantic-indentation.html	/^<h4>Footnotes<\/h4><p class="footnote"><small>[<a name="fn-1" href="#fnd-1">1<\/a>]<\/small> <em>Of course<\/em> we made sure it was actually too$/;"	a
fn-1	slime/doc/html/Setting-up-Emacs.html	/^<h4>Footnotes<\/h4><p class="footnote"><small>[<a name="fn-1" href="#fnd-1">1<\/a>]<\/small> By$/;"	a
fn-1	slime/doc/html/Setting-up-the-lisp-image.html	/^<h4>Footnotes<\/h4><p class="footnote"><small>[<a name="fn-1" href="#fnd-1">1<\/a>]<\/small> <acronym>SLIME<\/acronym> also provides an$/;"	a
fn-2	slime/doc/html/Setting-up-the-lisp-image.html	/^   <p class="footnote"><small>[<a name="fn-2" href="#fnd-2">2<\/a>]<\/small> there is a way to connect without an ssh tunnel, but it$/;"	a
fnd-1	slime/doc/html/Compound-Completion.html	/^<a rel="footnote" href="#fn-1" name="fnd-1"><sup>1<\/sup><\/a>$/;"	a
fnd-1	slime/doc/html/Presentations.html	/^A &ldquo;presentation&rdquo;<a rel="footnote" href="#fn-1" name="fnd-1"><sup>1<\/sup><\/a> in$/;"	a
fnd-1	slime/doc/html/Semantic-indentation.html	/^performance. <a rel="footnote" href="#fn-1" name="fnd-1"><sup>1<\/sup><\/a>$/;"	a
fnd-1	slime/doc/html/Setting-up-Emacs.html	/^local machine and the port 4005 on the remote machine<a rel="footnote" href="#fn-1" name="fnd-1"><sup>1<\/sup><\/a>.$/;"	a
fnd-1	slime/doc/html/Setting-up-the-lisp-image.html	/^   <p>inside a running lisp image<a rel="footnote" href="#fn-1" name="fnd-1"><sup>1<\/sup><\/a>. Now all we$/;"	a
fnd-2	slime/doc/html/Setting-up-the-lisp-image.html	/^ssh<a rel="footnote" href="#fn-2" name="fnd-2"><sup>2<\/sup><\/a> and we'll only have one$/;"	a
for	chiglug-macros/presentation.lisp	/^(defmacro for ((var start stop) &body body)$/;"	f
for	slime/contrib/swank-kawa.scm	/^(define-syntax for$/;"	f
force	chiglug-macros/lazy-eval.lisp	/^(defun force (x)$/;"	f
force-output	slime/xref.lisp	/^(define-caller-pattern force-output ((:optional form)) :lisp)$/;"	f
force-pretty-output	slime/sbcl-pprint-patch.lisp	/^(defun force-pretty-output (stream)$/;"	f
force-user-output	slime/swank.lisp	/^(defun force-user-output ()$/;"	f
form-number-stream-position	slime/swank-cmucl.lisp	/^(defun form-number-stream-position (tlf-number form-number stream)$/;"	f
form-number-stream-position	slime/swank-scl.lisp	/^(defun form-number-stream-position (tlf-number form-number stream)$/;"	f
format	slime/xref.lisp	/^(define-caller-pattern format$/;"	f
format-arguments	slime/xref.lisp	/^(define-pattern-substitution format-arguments $/;"	f
format-completion-set	slime/swank.lisp	/^(defun format-completion-set (strings internal-p package-name)$/;"	f
format-fuzzy-completion-set	slime/contrib/swank-fuzzy.lisp	/^(defun format-fuzzy-completion-set (winners)$/;"	f
format-iso8601-time	slime/contrib/swank-fancy-inspector.lisp	/^(defun format-iso8601-time (time-value &optional include-timezone-p)$/;"	f
format-restarts-for-emacs	slime/swank.lisp	/^(defun format-restarts-for-emacs ()$/;"	f
format-sldb-condition	slime/swank-allegro.lisp	/^(defimplementation format-sldb-condition (c)$/;"	f
format-sldb-condition	slime/swank-backend.lisp	/^(definterface format-sldb-condition (condition)$/;"	f
format-sldb-condition	slime/swank-clisp.lisp	/^(defimplementation format-sldb-condition (condition)$/;"	f
format-sldb-condition	slime/swank-sbcl.lisp	/^(defimplementation format-sldb-condition (condition)$/;"	f
format-values	slime/contrib/swank-mit-scheme.scm	/^(define (format-values . values)$/;"	f
format-values-for-echo-area	slime/swank.lisp	/^(defun format-values-for-echo-area (values)$/;"	f
formatter	slime/xref.lisp	/^(define-caller-pattern formatter (control-string) :lisp2)$/;"	f
fortran	jalel-fortran.lisp	/^(defun fortran (n)$/;"	f
fourth	slime/xref.lisp	/^(define-caller-pattern fourth (form) :lisp)$/;"	f
frame	slime/swank-corman.lisp	/^(defstruct frame$/;"	f
frame-actual-args	slime/swank-lispworks.lisp	/^(defun frame-actual-args (frame)$/;"	f
frame-arguments	slime/swank-openmcl.lisp	/^(defun frame-arguments (p context lfun pc)$/;"	f
frame-catch-tags	slime/swank-abcl.lisp	/^(defimplementation frame-catch-tags (index)$/;"	f
frame-catch-tags	slime/swank-allegro.lisp	/^(defimplementation frame-catch-tags (index)$/;"	f
frame-catch-tags	slime/swank-backend.lisp	/^(definterface frame-catch-tags (frame-number)$/;"	f
frame-catch-tags	slime/swank-clisp.lisp	/^(defimplementation frame-catch-tags (index)$/;"	f
frame-catch-tags	slime/swank-cmucl.lisp	/^(defimplementation frame-catch-tags (index)$/;"	f
frame-catch-tags	slime/swank-corman.lisp	/^(defimplementation frame-catch-tags (index)$/;"	f
frame-catch-tags	slime/swank-ecl.lisp	/^(defimplementation frame-catch-tags (frame-number)$/;"	f
frame-catch-tags	slime/swank-lispworks.lisp	/^(defimplementation frame-catch-tags (index)$/;"	f
frame-catch-tags	slime/swank-openmcl.lisp	/^(defimplementation frame-catch-tags (index &aux my-frame)$/;"	f
frame-catch-tags	slime/swank-sbcl.lisp	/^(defimplementation frame-catch-tags (index)$/;"	f
frame-catch-tags	slime/swank-scl.lisp	/^(defimplementation frame-catch-tags (index)$/;"	f
frame-catch-tags-for-emacs	slime/swank.lisp	/^(defslimefun frame-catch-tags-for-emacs (frame-index)$/;"	f
frame-cfp	slime/swank-cmucl.lisp	/^(defun frame-cfp (frame)$/;"	f
frame-cfp	slime/swank-scl.lisp	/^(defun frame-cfp (frame)$/;"	f
frame-compressed-p	practicals-1.0.3/Chapter25/id3v2.lisp	/^(defun frame-compressed-p (flags) (logbitp 7 flags))$/;"	f
frame-debug-vars	slime/swank-cmucl.lisp	/^(defun frame-debug-vars (frame)$/;"	f
frame-debug-vars	slime/swank-sbcl.lisp	/^(defun frame-debug-vars (frame)$/;"	f
frame-debug-vars	slime/swank-scl.lisp	/^(defun frame-debug-vars (frame)$/;"	f
frame-decode-env	slime/swank-ecl.lisp	/^(defun frame-decode-env (frame)$/;"	f
frame-down	slime/swank-cmucl.lisp	/^(defun frame-down (frame)$/;"	f
frame-down	slime/swank-scl.lisp	/^(defun frame-down (frame)$/;"	f
frame-encrypted-p	practicals-1.0.3/Chapter25/id3v2.lisp	/^(defun frame-encrypted-p (flags) (logbitp 6 flags))$/;"	f
frame-function	slime/swank-ecl.lisp	/^(defun frame-function (frame)$/;"	f
frame-grouped-p	practicals-1.0.3/Chapter25/id3v2.lisp	/^(defun frame-grouped-p (flags) (logbitp 5 flags))$/;"	f
frame-header-size	practicals-1.0.3/Chapter25/id3v2.lisp	/^(defgeneric frame-header-size (frame))$/;"	f
frame-header-size	practicals-1.0.3/Chapter25/id3v2.lisp	/^(defmethod frame-header-size ((frame id3v2.2-frame)) 6)$/;"	f
frame-header-size	practicals-1.0.3/Chapter25/id3v2.lisp	/^(defmethod frame-header-size ((frame id3v2.3-frame)) 10)$/;"	f
frame-id	practicals-1.0.3/Chapter25/id3v2.lisp	/^(define-binary-type frame-id (length)$/;"	f
frame-ip	slime/swank-cmucl.lisp	/^(defun frame-ip (frame)$/;"	f
frame-ip	slime/swank-scl.lisp	/^(defun frame-ip (frame)$/;"	f
frame-locals	slime/swank-abcl.lisp	/^(defimplementation frame-locals (index)$/;"	f
frame-locals	slime/swank-allegro.lisp	/^(defimplementation frame-locals (index)$/;"	f
frame-locals	slime/swank-backend.lisp	/^(definterface frame-locals (frame-number)$/;"	f
frame-locals	slime/swank-clisp.lisp	/^(defimplementation frame-locals (frame-number)$/;"	f
frame-locals	slime/swank-cmucl.lisp	/^(defimplementation frame-locals (index)$/;"	f
frame-locals	slime/swank-corman.lisp	/^(defimplementation frame-locals (frame-number)$/;"	f
frame-locals	slime/swank-ecl.lisp	/^(defimplementation frame-locals (frame-number)$/;"	f
frame-locals	slime/swank-lispworks.lisp	/^(defimplementation frame-locals (n)$/;"	f
frame-locals	slime/swank-openmcl.lisp	/^(defimplementation frame-locals (index)$/;"	f
frame-locals	slime/swank-sbcl.lisp	/^(defimplementation frame-locals (index)$/;"	f
frame-locals	slime/swank-scl.lisp	/^(defimplementation frame-locals (index)$/;"	f
frame-locals-for-emacs	slime/swank.lisp	/^(defslimefun frame-locals-for-emacs (index)$/;"	f
frame-location	slime/swank-lispworks.lisp	/^(defun frame-location (dspec callee-name)$/;"	f
frame-name	slime/swank-ecl.lisp	/^(defun frame-name (frame)$/;"	f
frame-name-member	practicals-1.0.3/Chapter25/id3v2.lisp	/^(defun frame-name-member (id)$/;"	f
frame-pointer=	slime/swank-cmucl.lisp	/^(defun frame-pointer= (frame1 frame2)$/;"	f
frame-pointer=	slime/swank-scl.lisp	/^(defun frame-pointer= (frame1 frame2)$/;"	f
frame-registers	slime/swank-cmucl.lisp	/^(defun frame-registers (frame)$/;"	f
frame-registers	slime/swank-scl.lisp	/^(defun frame-registers (frame)$/;"	f
frame-source-location-for-emacs	slime/swank-abcl.lisp	/^(defimplementation frame-source-location-for-emacs (index)$/;"	f
frame-source-location-for-emacs	slime/swank-allegro.lisp	/^(defimplementation frame-source-location-for-emacs (index)$/;"	f
frame-source-location-for-emacs	slime/swank-backend.lisp	/^(definterface frame-source-location-for-emacs (frame-number)$/;"	f
frame-source-location-for-emacs	slime/swank-clisp.lisp	/^(defimplementation frame-source-location-for-emacs (index)$/;"	f
frame-source-location-for-emacs	slime/swank-cmucl.lisp	/^(defimplementation frame-source-location-for-emacs (index)$/;"	f
frame-source-location-for-emacs	slime/swank-corman.lisp	/^(defimplementation frame-source-location-for-emacs (frame-number)$/;"	f
frame-source-location-for-emacs	slime/swank-ecl.lisp	/^(defimplementation frame-source-location-for-emacs (frame-number)$/;"	f
frame-source-location-for-emacs	slime/swank-lispworks.lisp	/^(defimplementation frame-source-location-for-emacs (frame)$/;"	f
frame-source-location-for-emacs	slime/swank-openmcl.lisp	/^(defimplementation frame-source-location-for-emacs (index)$/;"	f
frame-source-location-for-emacs	slime/swank-sbcl.lisp	/^(defimplementation frame-source-location-for-emacs (index)$/;"	f
frame-source-location-for-emacs	slime/swank-scl.lisp	/^(defimplementation frame-source-location-for-emacs (index)$/;"	f
frame-string-type	slime/swank-clisp.lisp	/^(defun frame-string-type (string)$/;"	f
frame-to-string	slime/swank-clisp.lisp	/^(defun frame-to-string (frame)$/;"	f
frame-type	slime/swank-clisp.lisp	/^(defun frame-type (frame)$/;"	f
frame-types	practicals-1.0.3/Chapter25/id3v2.lisp	/^(defun frame-types (file)$/;"	f
frame-types-in-dir	practicals-1.0.3/Chapter25/id3v2.lisp	/^(defun frame-types-in-dir (dir)$/;"	f
frame-var-value	slime/contrib/swank-mit-scheme.scm	/^(define (frame-var-value frame var)$/;"	f
frame-var-value	slime/swank-allegro.lisp	/^(defimplementation frame-var-value (frame var)$/;"	f
frame-var-value	slime/swank-backend.lisp	/^(definterface frame-var-value (frame-number var-id)$/;"	f
frame-var-value	slime/swank-clisp.lisp	/^(defimplementation frame-var-value (frame var)$/;"	f
frame-var-value	slime/swank-cmucl.lisp	/^(defimplementation frame-var-value (frame var)$/;"	f
frame-var-value	slime/swank-corman.lisp	/^(defimplementation frame-var-value (frame-number var)$/;"	f
frame-var-value	slime/swank-ecl.lisp	/^(defimplementation frame-var-value (frame-number var-id)$/;"	f
frame-var-value	slime/swank-lispworks.lisp	/^(defimplementation frame-var-value (frame var)$/;"	f
frame-var-value	slime/swank-openmcl.lisp	/^(defimplementation frame-var-value (frame var)$/;"	f
frame-var-value	slime/swank-sbcl.lisp	/^(defimplementation frame-var-value (frame var)$/;"	f
frame-var-value	slime/swank-scl.lisp	/^(defimplementation frame-var-value (frame var)$/;"	f
frame-var>elisp	slime/contrib/swank-mit-scheme.scm	/^(define (frame-var>elisp b)$/;"	f
frame-vars	slime/contrib/swank-mit-scheme.scm	/^(define (frame-vars frame)$/;"	f
frame-vars	slime/swank-lispworks.lisp	/^(defun frame-vars (frame)$/;"	f
frame-venv	slime/swank-clisp.lisp	/^(defun frame-venv (frame)$/;"	f
frame>string	slime/contrib/swank-mit-scheme.scm	/^(define (frame>string frame)$/;"	f
fresh-line	slime/xref.lisp	/^(define-caller-pattern fresh-line ((:optional form)) :lisp)$/;"	f
freshline	practicals-1.0.3/Chapter31/html.lisp	/^(defgeneric freshline (processor))$/;"	f
freshline	practicals-1.0.3/Chapter31/html.lisp	/^(defmethod freshline ((compiler html-compiler))$/;"	f
freshline	practicals-1.0.3/Chapter31/html.lisp	/^(defmethod freshline ((pp html-pretty-printer))$/;"	f
frob-allegro-field-def	slime/swank-allegro.lisp	/^(defun frob-allegro-field-def (object def)$/;"	f
from-string	slime/swank.lisp	/^(defun from-string (string)$/;"	f
fround	slime/xref.lisp	/^(define-caller-pattern fround (form (:optional form)) :lisp)$/;"	f
fspec->string	slime/swank-allegro.lisp	/^(defun fspec->string (fspec)$/;"	f
fspec-definition-locations	slime/swank-abcl.lisp	/^(defun fspec-definition-locations (fspec)$/;"	f
fspec-definition-locations	slime/swank-allegro.lisp	/^(defun fspec-definition-locations (fspec)$/;"	f
fspec-location	slime/swank-clisp.lisp	/^(defun fspec-location (fspec)$/;"	f
fspec-location	slime/swank-corman.lisp	/^(defun fspec-location (fspec)$/;"	f
fspec-pathname	slime/swank-clisp.lisp	/^(defun fspec-pathname (symbol)$/;"	f
fspec-primary-name	slime/swank-allegro.lisp	/^(defun fspec-primary-name (fspec)$/;"	f
fsum	chiglug-macros/presentation.lisp	/^(defun fsum (x y)$/;"	f
ftruncate	slime/xref.lisp	/^(define-caller-pattern ftruncate (form (:optional form)) :lisp)$/;"	f
full-gc	practicals-1.0.3/libraries/cl-ppcre-1.2.3/ppcre-tests.lisp	/^(defun full-gc ()$/;"	f
full-mapcar	nifty_funs.lisp	/^(defun full-mapcar (function list)$/;"	f
fun	onlisp.lisp	/^(defun fun (fn &rest fns)$/;"	f
fun	slime/contrib/swank-kawa.scm	/^(define-syntax fun$/;"	f
funcall	slime/xref.lisp	/^(define-caller-pattern funcall (fn (:star form)) :lisp)$/;"	f
function	slime/xref.lisp	/^(define-caller-pattern function ((:or fn form)) :lisp)$/;"	f
function-arglist	slime/swank-cmucl.lisp	/^(defun function-arglist (fun)$/;"	f
function-arglist	slime/swank-scl.lisp	/^(defun function-arglist (fun)$/;"	f
function-callees	slime/swank-cmucl.lisp	/^(defun function-callees (function)$/;"	f
function-callees	slime/swank-scl.lisp	/^(defun function-callees (function)$/;"	f
function-callers	slime/swank-allegro.lisp	/^(defun function-callers (name)$/;"	f
function-callers	slime/swank-cmucl.lisp	/^(defun function-callers (function &optional (spaces '(:read-only :static $/;"	f
function-callers	slime/swank-scl.lisp	/^(defun function-callers (function &optional (spaces '(:read-only :static $/;"	f
function-code-object=	slime/swank-cmucl.lisp	/^(defun function-code-object= (closure function)$/;"	f
function-code-object=	slime/swank-scl.lisp	/^(defun function-code-object= (closure function)$/;"	f
function-definitions	slime/swank-cmucl.lisp	/^(defun function-definitions (name)$/;"	f
function-definitions	slime/swank-scl.lisp	/^(defun function-definitions (name)$/;"	f
function-dspec	slime/swank-sbcl.lisp	/^(defun function-dspec (fn)$/;"	f
function-first-code-location	slime/swank-cmucl.lisp	/^(defun function-first-code-location (function)$/;"	f
function-first-code-location	slime/swank-scl.lisp	/^(defun function-first-code-location (function)$/;"	f
function-has-debug-function-p	slime/swank-cmucl.lisp	/^(defun function-has-debug-function-p (function)$/;"	f
function-has-debug-function-p	slime/swank-scl.lisp	/^(defun function-has-debug-function-p (function)$/;"	f
function-info-definitions	slime/swank-cmucl.lisp	/^(defun function-info-definitions (name)$/;"	f
function-info-definitions	slime/swank-scl.lisp	/^(defun function-info-definitions (name)$/;"	f
function-information	slime/xref.lisp	/^(define-caller-pattern function-information (fn &optional :ignore) :lisp2)$/;"	f
function-keywords	slime/xref.lisp	/^(define-caller-pattern function-keywords (&rest :ignore) :lisp2)$/;"	f
function-lambda-expression	slime/xref.lisp	/^(define-caller-pattern function-lambda-expression (fn) :lisp2)$/;"	f
function-location	slime/swank-cmucl.lisp	/^(defun function-location (function)$/;"	f
function-location	slime/swank-scl.lisp	/^(defun function-location (function)$/;"	f
function-name	slime/swank-abcl.lisp	/^(defimplementation function-name (function)$/;"	f
function-name	slime/swank-backend.lisp	/^(definterface function-name (function)$/;"	f
function-name	slime/swank-cmucl.lisp	/^(defimplementation function-name (function)$/;"	f
function-name	slime/swank-corman.lisp	/^(defimplementation function-name (fn)$/;"	f
function-name	slime/swank-ecl.lisp	/^(defimplementation function-name (f)$/;"	f
function-name	slime/swank-lispworks.lisp	/^(defimplementation function-name (function)$/;"	f
function-name	slime/swank-openmcl.lisp	/^(defimplementation function-name (function)$/;"	f
function-name	slime/swank-sbcl.lisp	/^(defimplementation function-name (f)$/;"	f
function-name	slime/swank-scl.lisp	/^(defimplementation function-name (function)$/;"	f
function-position	slime/swank-ecl.lisp	/^(defun function-position (fun)$/;"	f
function-source-location	slime/swank-openmcl.lisp	/^(defun function-source-location (function)$/;"	f
function-source-location	slime/swank-sbcl.lisp	/^(defun function-source-location (function &optional name)$/;"	f
functionp	slime/xref.lisp	/^(define-caller-pattern functionp (form) :lisp)$/;"	f
fuzzy-completion-selected	slime/contrib/swank-fuzzy.lisp	/^(defslimefun fuzzy-completion-selected (original-string completion)$/;"	f
fuzzy-completion-set	slime/contrib/swank-fuzzy.lisp	/^(defun fuzzy-completion-set (string default-package-name &key limit time-limit-in-msec)$/;"	f
fuzzy-completions	slime/contrib/swank-fuzzy.lisp	/^(defslimefun fuzzy-completions (string default-package-name &key limit time-limit-in-msec)$/;"	f
fuzzy-convert-matching-for-emacs	slime/contrib/swank-fuzzy.lisp	/^(defun fuzzy-convert-matching-for-emacs (fuzzy-matching user-input-string)$/;"	f
fuzzy-find-matching-packages	slime/contrib/swank-fuzzy.lisp	/^(defun fuzzy-find-matching-packages (name &key time-limit-in-msec)$/;"	f
fuzzy-find-matching-symbols	slime/contrib/swank-fuzzy.lisp	/^(defun fuzzy-find-matching-symbols$/;"	f
fuzzy-format-matching	slime/contrib/swank-fuzzy.lisp	/^(defun fuzzy-format-matching (fuzzy-matching user-input-string)$/;"	f
fuzzy-generate-matchings	slime/contrib/swank-fuzzy.lisp	/^(defun fuzzy-generate-matchings (string default-package-name time-limit-in-msec)$/;"	f
fuzzy-matching-greaterp	slime/contrib/swank-fuzzy.lisp	/^(defun fuzzy-matching-greaterp (m1 m2)$/;"	f
gather-strings	practicals-1.0.3/libraries/cl-ppcre-1.2.3/optimize.lisp	/^(defgeneric gather-strings (regex)$/;"	f
gather-strings	practicals-1.0.3/libraries/cl-ppcre-1.2.3/optimize.lisp	/^(defmethod gather-strings ((alternation alternation))$/;"	f
gather-strings	practicals-1.0.3/libraries/cl-ppcre-1.2.3/optimize.lisp	/^(defmethod gather-strings ((branch branch))$/;"	f
gather-strings	practicals-1.0.3/libraries/cl-ppcre-1.2.3/optimize.lisp	/^(defmethod gather-strings ((regex regex))$/;"	f
gather-strings	practicals-1.0.3/libraries/cl-ppcre-1.2.3/optimize.lisp	/^(defmethod gather-strings ((seq seq))$/;"	f
gather-tree	slime/xref.lisp	/^(defun gather-tree (parents &optional already-seen $/;"	f
gc-generations	slime/swank-cmucl.lisp	/^(defconstant gc-generations 6)$/;"	f
gcd	slime/xref.lisp	/^(define-caller-pattern gcd ((:star form)) :lisp)$/;"	f
gen-for	chiglug-macros/presentation.lisp	/^(defmacro gen-for ((var start stop) &body body)$/;"	f
generate	paip/aip_ch2.lisp	/^(defun generate (phrase)$/;"	f
generate-all	paip/aip_ch2.lisp	/^(defun generate-all (phrase)$/;"	f
generate-code	practicals-1.0.3/Chapter31/html.lisp	/^(defun generate-code (ops)$/;"	f
generate-macro-no-attributes	practicals-1.0.3/Chapter31/html.lisp	/^(defun generate-macro-no-attributes (name args body)$/;"	f
generate-macro-with-attributes	practicals-1.0.3/Chapter31/html.lisp	/^(defun generate-macro-with-attributes (name attribute-args args body)$/;"	f
generate-tree	paip/aip_ch2.lisp	/^(defun generate-tree (phrase)$/;"	f
generatePrimes	tmp.lisp	/^(defun generatePrimes (primes limit)$/;"	f
generation-stats	slime/swank-cmucl.lisp	/^(defun generation-stats ()$/;"	f
generic-flet	slime/xref.lisp	/^(define-caller-pattern generic-flet (((:star (name lambda-list))) (:star form))$/;"	f
generic-frame	practicals-1.0.3/Chapter25/id3v2.lisp	/^(define-binary-class generic-frame ()$/;"	f
generic-frame-v2.2	practicals-1.0.3/Chapter25/id3v2.lisp	/^(define-binary-class generic-frame-v2.2 (id3v2.2-frame generic-frame) ())$/;"	f
generic-frame-v2.3	practicals-1.0.3/Chapter25/id3v2.lisp	/^(define-binary-class generic-frame-v2.3 (id3v2.3-frame generic-frame) ())$/;"	f
generic-function	slime/xref.lisp	/^(define-caller-pattern generic-function (lambda-list) :lisp2)$/;"	f
generic-function-declarations	slime/swank-abcl.lisp	/^(defun generic-function-declarations (gf))$/;"	f
generic-function-definitions	slime/swank-cmucl.lisp	/^(defun generic-function-definitions (name function)$/;"	f
generic-function-definitions	slime/swank-scl.lisp	/^(defun generic-function-definitions (name function)$/;"	f
generic-function-keywords	slime/contrib/swank-arglists.lisp	/^(defun generic-function-keywords (generic-function)$/;"	f
generic-function-p	slime/swank-lispworks.lisp	/^(defun generic-function-p (object)$/;"	f
generic-labels	slime/xref.lisp	/^(define-caller-pattern generic-labels $/;"	f
generic-string	practicals-1.0.3/Chapter25/id3v2.lisp	/^(define-binary-type generic-string (length character-type)$/;"	f
generic-terminated-string	practicals-1.0.3/Chapter25/id3v2.lisp	/^(define-binary-type generic-terminated-string (terminator character-type)$/;"	f
genericp	slime/swank-cmucl.lisp	/^(defun genericp (fn)$/;"	f
genericp	slime/swank-scl.lisp	/^(defun genericp (fn)$/;"	f
genre	practicals-1.0.3/Chapter25/id3v2.lisp	/^(defun genre (id3) (get-text-info id3 "TCO" "TCON"))$/;"	f
gensym	slime/xref.lisp	/^(define-caller-pattern gensym ((:optional :ignore)) :lisp)$/;"	f
gentemp	slime/xref.lisp	/^(define-caller-pattern gentemp ((:optional :ignore :ignore)) :lisp)$/;"	f
get	slime/xref.lisp	/^(define-caller-pattern get (form form (:optional form)) :lisp)$/;"	f
get-col	sudoku/sudoku.lisp	/^(defun get-col (col-num puzzle)$/;"	f
get-cons	slime/metering.lisp	/^(defmacro get-cons () `(the consing-type (ccl::total-bytes-allocated)))$/;"	f
get-cons	slime/metering.lisp	/^(defun get-cons ()$/;"	f
get-cookie-value	practicals-1.0.3/Chapter26/html-infrastructure.lisp	/^(defun get-cookie-value (request name)$/;"	f
get-decoded-time	slime/xref.lisp	/^(define-caller-pattern get-decoded-time () :lisp)$/;"	f
get-dispatch-macro-character	slime/xref.lisp	/^(define-caller-pattern get-dispatch-macro-character$/;"	f
get-frame-debug-info	slime/swank-corman.lisp	/^(defun get-frame-debug-info (frame)$/;"	f
get-internal-real-time	slime/xref.lisp	/^(define-caller-pattern get-internal-real-time () :lisp)$/;"	f
get-internal-run-time	slime/xref.lisp	/^(define-caller-pattern get-internal-run-time () :lisp)$/;"	f
get-macro-character	slime/xref.lisp	/^(define-caller-pattern get-macro-character (form (:optional form)) :lisp)$/;"	f
get-monitor-info	slime/metering.lisp	/^(defsetf get-monitor-info (name) (info)$/;"	f
get-monitor-info	slime/metering.lisp	/^(defun get-monitor-info (name)$/;"	f
get-number	practicals-1.0.3/libraries/cl-ppcre-1.2.3/lexer.lisp	/^(defun get-number (lexer &key (radix 10) max-length no-whitespace-p)$/;"	f
get-output-stream-string	slime/xref.lisp	/^(define-caller-pattern get-output-stream-string (form) :lisp)$/;"	f
get-pretty-printer	practicals-1.0.3/Chapter31/html.lisp	/^(defun get-pretty-printer ()$/;"	f
get-primes	chiglug-macros/lazy-eval.lisp	/^(defun get-primes (n)$/;"	f
get-properties	slime/xref.lisp	/^(define-caller-pattern get-properties (form form) :lisp)$/;"	f
get-quantifier	practicals-1.0.3/libraries/cl-ppcre-1.2.3/lexer.lisp	/^(defun get-quantifier (lexer)$/;"	f
get-real-time-in-msecs	slime/contrib/swank-fuzzy.lisp	/^(defun get-real-time-in-msecs ()$/;"	f
get-repl-result	slime/contrib/swank-presentations.lisp	/^(defslimefun get-repl-result (id)$/;"	f
get-row	sudoku/sudoku.lisp	/^(defun get-row (row-num puzzle)$/;"	f
get-setf-method	slime/xref.lisp	/^(define-caller-pattern get-setf-method (form) :lisp)$/;"	f
get-setf-method-multiple-value	slime/xref.lisp	/^(define-caller-pattern get-setf-method-multiple-value (form) :lisp)$/;"	f
get-source-code	slime/swank-source-file-cache.lisp	/^(defun get-source-code (filename code-date)$/;"	f
get-square	sudoku/sudoku.lisp	/^(defun get-square (square-num puzzle)$/;"	f
get-square-aid	sudoku/sudoku.lisp	/^(defun get-square-aid (x y puzzle)$/;"	f
get-text-info	practicals-1.0.3/Chapter25/id3v2.lisp	/^(defun get-text-info (id3 &rest ids)$/;"	f
get-time	slime/metering.lisp	/^(defmacro get-time ()$/;"	f
get-token	practicals-1.0.3/libraries/cl-ppcre-1.2.3/lexer.lisp	/^(defun get-token (lexer)$/;"	f
get-universal-time	slime/xref.lisp	/^(define-caller-pattern get-universal-time () :lisp)$/;"	f
getf	slime/xref.lisp	/^(define-caller-pattern getf (form form (:optional form)) :lisp)$/;"	f
gethash	slime/xref.lisp	/^(define-caller-pattern gethash (form form (:optional form)) :lisp)$/;"	f
getpid	slime/swank-abcl.lisp	/^(defimplementation getpid ()$/;"	f
getpid	slime/swank-allegro.lisp	/^(defimplementation getpid ()$/;"	f
getpid	slime/swank-backend.lisp	/^(definterface getpid ()$/;"	f
getpid	slime/swank-cmucl.lisp	/^(defimplementation getpid ()$/;"	f
getpid	slime/swank-corman.lisp	/^(defimplementation getpid ()$/;"	f
getpid	slime/swank-ecl.lisp	/^(defimplementation getpid ()$/;"	f
getpid	slime/swank-lispworks.lisp	/^(defimplementation getpid ()$/;"	f
getpid	slime/swank-openmcl.lisp	/^(defimplementation getpid ()$/;"	f
getpid	slime/swank-sbcl.lisp	/^(defimplementation getpid ()$/;"	f
getpid	slime/swank-scl.lisp	/^(defimplementation getpid ()$/;"	f
gf-location	slime/swank-cmucl.lisp	/^(defun gf-location (gf)$/;"	f
gf-location	slime/swank-scl.lisp	/^(defun gf-location (gf)$/;"	f
gf-method-definitions	slime/swank-cmucl.lisp	/^(defun gf-method-definitions (gf)$/;"	f
gf-method-definitions	slime/swank-scl.lisp	/^(defun gf-method-definitions (gf)$/;"	f
globally-redirect-io-to-connection	slime/swank.lisp	/^(defun globally-redirect-io-to-connection (connection)$/;"	f
go	slime/xref.lisp	/^(define-caller-pattern go (tag) :lisp)$/;"	f
grab-stack-top	slime/swank-openmcl.lisp	/^(defun grab-stack-top ()$/;"	f
graphic-char-p	slime/xref.lisp	/^(define-caller-pattern graphic-char-p (form) :lisp)$/;"	f
greedy-constant-length-closure	practicals-1.0.3/libraries/cl-ppcre-1.2.3/repetition-closures.lisp	/^(defmacro greedy-constant-length-closure (check-curr-pos)$/;"	f
greedy-quant	practicals-1.0.3/libraries/cl-ppcre-1.2.3/parser.lisp	/^(defun greedy-quant (lexer)$/;"	f
group	onlisp.lisp	/^(defun group (source n)$/;"	f
group	practicals-1.0.3/libraries/cl-ppcre-1.2.3/parser.lisp	/^(defun group (lexer)$/;"	f
guess-buffer-package	slime/swank.lisp	/^(defun guess-buffer-package (string)$/;"	f
guess-buffer-readtable	slime/swank.lisp	/^(defun guess-buffer-readtable (package-name)$/;"	f
guess-external-format	slime/swank-backend.lisp	/^(definterface guess-external-format (filename)$/;"	f
guess-package	slime/swank.lisp	/^(defun guess-package (string)$/;"	f
guess-readtable-for-filename	slime/swank-sbcl.lisp	/^(defun guess-readtable-for-filename (filename)$/;"	f
gx	Session.vim	/^nmap gx <Plug>NetrwBrowseX$/;"	m
hairy-byte-function-arglist	slime/swank-cmucl.lisp	/^(defun hairy-byte-function-arglist (fn)$/;"	f
hairy-byte-function-arglist	slime/swank-scl.lisp	/^(defun hairy-byte-function-arglist (fn)$/;"	f
hand-bridge	slime/contrib/bridge.el	/^(defun hand-bridge (start end)$/;"	f
handle-compiler-warning	slime/swank-abcl.lisp	/^(defun handle-compiler-warning (condition)$/;"	f
handle-compiler-warning	slime/swank-allegro.lisp	/^(defun handle-compiler-warning (condition)$/;"	f
handle-compiler-warning	slime/swank-ecl.lisp	/^(defun handle-compiler-warning (condition)$/;"	f
handle-compiler-warning	slime/swank-openmcl.lisp	/^(defun handle-compiler-warning (condition)$/;"	f
handle-file-compiler-termination	slime/swank-sbcl.lisp	/^(defun handle-file-compiler-termination (condition)$/;"	f
handle-loadtime-error	slime/swank-loader.lisp	/^(defun handle-loadtime-error (condition binary-pathname)$/;"	f
handle-notification-condition	slime/swank-clisp.lisp	/^(defun handle-notification-condition (condition)$/;"	f
handle-notification-condition	slime/swank-cmucl.lisp	/^(defun handle-notification-condition (condition)$/;"	f
handle-notification-condition	slime/swank-sbcl.lisp	/^(defun handle-notification-condition (condition)$/;"	f
handle-notification-condition	slime/swank-scl.lisp	/^(defun handle-notification-condition (condition)$/;"	f
handle-request	slime/swank.lisp	/^(defun handle-request (connection)$/;"	f
handle-sldb-condition	slime/swank.lisp	/^(defun handle-sldb-condition (condition)$/;"	f
handle-undefined-functions-warning	slime/swank-allegro.lisp	/^(defun handle-undefined-functions-warning (condition)$/;"	f
handler-bind	slime/xref.lisp	/^(define-caller-pattern handler-bind (((:star (form form)))$/;"	f
handler-case	slime/xref.lisp	/^(define-caller-pattern handler-case (form (:star (form ((:optional var))$/;"	f
has-application-indentation-hint-p	slime/contrib/swank-indentation.lisp	/^(defun has-application-indentation-hint-p (symbol)$/;"	f
hash-table-count	slime/xref.lisp	/^(define-caller-pattern hash-table-count (form) :lisp)$/;"	f
hash-table-p	slime/xref.lisp	/^(define-caller-pattern hash-table-p (form) :lisp)$/;"	f
hash-table-rehash-size	slime/xref.lisp	/^(define-caller-pattern hash-table-rehash-size (form) :lisp2)$/;"	f
hash-table-rehash-threshold	slime/xref.lisp	/^(define-caller-pattern hash-table-rehash-threshold (form) :lisp2)$/;"	f
hash-table-size	slime/xref.lisp	/^(define-caller-pattern hash-table-size (form) :lisp2)$/;"	f
hash-table-test	slime/xref.lisp	/^(define-caller-pattern hash-table-test (form) :lisp2)$/;"	f
hash-table-weakness	slime/swank-allegro.lisp	/^(defimplementation hash-table-weakness (hashtable)$/;"	f
hash-table-weakness	slime/swank-backend.lisp	/^(definterface hash-table-weakness (hashtable)$/;"	f
hash-table-weakness	slime/swank-openmcl.lisp	/^(defimplementation hash-table-weakness (hashtable)$/;"	f
hash-table-weakness	slime/swank-sbcl.lisp	/^(defimplementation hash-table-weakness (hashtable)$/;"	f
helper-79	project-euler.lisp	/^(defun helper-79 (passcode logins)$/;"	f
hex-digit->char	slime/contrib/swank-mit-scheme.scm	/^(define (hex-digit->char n)$/;"	f
highlight-completion	slime/contrib/swank-fuzzy.lisp	/^(defun highlight-completion (completion full)$/;"	f
host-namestring	slime/xref.lisp	/^(define-caller-pattern host-namestring (form) :lisp)$/;"	f
hr	chiglug-macros/power-of-lisp-macros.lisp	/^(define-html-tag hr no-body align noshade size)$/;"	f
html	practicals-1.0.3/Chapter31/html.lisp	/^(defmacro html (&whole whole &body body)$/;"	f
html-compiler	practicals-1.0.3/Chapter31/html.lisp	/^(defclass html-compiler ()$/;"	f
html-pretty-printer	practicals-1.0.3/Chapter31/html.lisp	/^(defclass html-pretty-printer ()$/;"	f
id3-encoded-string	practicals-1.0.3/Chapter25/id3v2.lisp	/^(define-binary-type id3-encoded-string (encoding length terminator)$/;"	f
id3-frames	practicals-1.0.3/Chapter25/id3v2.lisp	/^(define-binary-type id3-frames (tag-size frame-type)$/;"	f
id3-p	practicals-1.0.3/Chapter25/id3v2.lisp	/^(defun id3-p (file)$/;"	f
id3-tag	practicals-1.0.3/Chapter25/id3v2.lisp	/^(define-tagged-binary-class id3-tag ()$/;"	f
id3-tag-size	practicals-1.0.3/Chapter25/id3v2.lisp	/^(define-binary-type id3-tag-size () (unsigned-integer :bytes 4 :bits-per-byte 7))$/;"	f
id3v2.2-frame	practicals-1.0.3/Chapter25/id3v2.lisp	/^(define-tagged-binary-class id3v2.2-frame ()$/;"	f
id3v2.2-tag	practicals-1.0.3/Chapter25/id3v2.lisp	/^(define-binary-class id3v2.2-tag (id3-tag)$/;"	f
id3v2.3-frame	practicals-1.0.3/Chapter25/id3v2.lisp	/^(define-tagged-binary-class id3v2.3-frame ()$/;"	f
id3v2.3-tag	practicals-1.0.3/Chapter25/id3v2.lisp	/^(define-binary-class id3v2.3-tag (id3-tag)$/;"	f
identity	slime/xref.lisp	/^(define-caller-pattern identity (form) :lisp)$/;"	f
if	slime/xref.lisp	/^(define-caller-pattern if (test form (:optional form)) :lisp)$/;"	f
ignore-errors	slime/contrib/swank-kawa.scm	/^(define-syntax ignore-errors$/;"	f
ignore-errors	slime/xref.lisp	/^(define-caller-pattern ignore-errors ((:star form)) :lisp2)$/;"	f
ignored-xref-function-names	slime/swank-sbcl.lisp	/^(defun ignored-xref-function-names ()$/;"	f
iline	slime/contrib/swank-mit-scheme.scm	/^(define (iline label value) `(line ,label ,value))$/;"	f
imagpart	slime/xref.lisp	/^(define-caller-pattern imagpart (form) :lisp)$/;"	f
import	slime/xref.lisp	/^(define-caller-pattern import ((:or symbol ((:star symbol)))$/;"	f
import-from	slime/swank-backend.lisp	/^(defun import-from (package symbol-names &optional (to-package *package*))$/;"	f
import-swank-mop-symbols	slime/swank-backend.lisp	/^(defun import-swank-mop-symbols (package except)$/;"	f
import-to-swank-mop	slime/swank-backend.lisp	/^(defun import-to-swank-mop (symbol-list)$/;"	f
in	practicals-1.0.3/Chapter27/database.lisp	/^(defun in (column-name table)$/;"	f
in-constants-p	slime/swank-allegro.lisp	/^(defun in-constants-p (fun symbol)$/;"	f
in-html-style	practicals-1.0.3/Chapter31/html.lisp	/^(defmacro in-html-style (syntax)$/;"	f
in-package	slime/xref.lisp	/^(define-caller-pattern in-package ((:rest :ignore)) :lisp)$/;"	f
in-padding	practicals-1.0.3/Chapter25/id3v2.lisp	/^(define-condition in-padding () ())$/;"	f
in-sldb-face	slime/slime.el	/^(defmacro in-sldb-face (name string)$/;"	f
in-swank-package-p	slime/swank-ecl.lisp	/^(defun in-swank-package-p (x)$/;"	f
incf	slime/xref.lisp	/^(define-caller-pattern incf (form form) :lisp)$/;"	f
incf-after	practicals-1.0.3/libraries/cl-ppcre-1.2.3/repetition-closures.lisp	/^(defmacro incf-after (place &optional (delta 1) &environment env)$/;"	f
inconsistent	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<h4><a name="inconsistent" class=none>Inconsistent capturing of <code>$1<\/code>, <code>$2<\/code>, etc.<\/a><\/h4>$/;"	a
increment-count	practicals-1.0.3/Chapter23/spam.lisp	/^(defun increment-count (feature type)$/;"	f
increment-total-count	practicals-1.0.3/Chapter23/spam.lisp	/^(defun increment-total-count (type)$/;"	f
indent	practicals-1.0.3/Chapter31/html.lisp	/^(defgeneric indent (processor))$/;"	f
indent	practicals-1.0.3/Chapter31/html.lisp	/^(defmethod indent ((compiler html-compiler))$/;"	f
indent	practicals-1.0.3/Chapter31/html.lisp	/^(defmethod indent ((pp html-pretty-printer))$/;"	f
indent-if-necessary	practicals-1.0.3/Chapter31/html.lisp	/^(defun indent-if-necessary (ip)$/;"	f
indenting-printer	practicals-1.0.3/Chapter31/html.lisp	/^(defclass indenting-printer ()$/;"	f
index-B-208	slime/doc/html/Miscellaneous.html	/^     <br><dt><kbd>B<\/kbd><dt><kbd>M-x sldb-break-with-default-debugger<\/kbd><dd><a name="index-B-208"><\/a><a name="index-sldb_002dbreak_002dwith_002ddefault_002ddebugger-209"><\/a>$/;"	a
index-C_002dM_002dq-9	slime/doc/html/Indentation.html	/^<dt><kbd>C-M-q<\/kbd><dt><kbd>M-x indent-sexp<\/kbd><dd><a name="index-C_002dM_002dq-9"><\/a><a name="index-indent_002dsexp-10"><\/a>$/;"	a
index-C_002dM_002dx-92	slime/doc/html/Evaluation.html	/^     <br><dt><kbd>C-M-x<\/kbd><dt><kbd>M-x slime-eval-defun<\/kbd><dd><a name="index-C_002dM_002dx-92"><\/a><a name="index-slime_002deval_002ddefun-93"><\/a>$/;"	a
index-C_002dRET-139	slime/doc/html/REPL-commands.html	/^     <br><dt><kbd>C-RET<\/kbd><dt><kbd>M-x slime-repl-closing-return<\/kbd><dd><a name="index-C_002dRET-139"><\/a><a name="index-slime_002drepl_002dclosing_002dreturn-140"><\/a>$/;"	a
index-C_002d_003cup_003e-152	slime/doc/html/Input-Navigation.html	/^<dt><kbd>C-&lt;up&gt;, M-x slime-repl-forward-input<\/kbd><dt><kbd>C-&lt;down&gt;, M-x slime-repl-backward-input<\/kbd><dd><a name="index-C_002d_003cup_003e-152"><\/a><a name="index-C_002d_003cdown_003e-153"><\/a><a name="index-slime_002drepl_002dforward_002dinput-154"><\/a><a name="index-slime_002drepl_002dbackward_002dinput-155"><\/a>$/;"	a
index-C_002da-143	slime/doc/html/REPL-commands.html	/^     <br><dt><kbd>C-a<\/kbd><dt><kbd>M-x slime-repl-bol<\/kbd><dd><a name="index-C_002da-143"><\/a><a name="index-slime_002drepl_002dbol-144"><\/a>$/;"	a
index-C_002dc-C_002da-132	slime/doc/html/Other.html	/^<dt><kbd>C-c C-a, M-x slime-nop<\/kbd><dt><kbd>C-c C-v, M-x slime-nop<\/kbd><dd><a name="index-C_002dc-C_002da-132"><\/a><a name="index-C_002dc-C_002dv-133"><\/a><a name="index-slime_002dnop-134"><\/a><a name="index-slime_002dnop-135"><\/a>$/;"	a
index-C_002dc-C_002db-106	slime/doc/html/Recovery.html	/^<dt><kbd>C-c C-b<\/kbd><dt><kbd>M-x slime-interrupt<\/kbd><dd><a name="index-C_002dc-C_002db-106"><\/a><a name="index-slime_002dinterrupt-107"><\/a>$/;"	a
index-C_002dc-C_002dc-145	slime/doc/html/REPL-commands.html	/^     <br><dt><kbd>C-c C-c<\/kbd><dt><kbd>M-x slime-interrupt<\/kbd><dd><a name="index-C_002dc-C_002dc-145"><\/a><a name="index-slime_002dinterrupt-146"><\/a>$/;"	a
index-C_002dc-C_002dc-71	slime/doc/html/Compilation.html	/^<dl><dt><kbd>C-c C-c<\/kbd><dt><kbd>M-x slime-compile-defun<\/kbd><dd><a name="index-C_002dc-C_002dc-71"><\/a><a name="index-slime_002dcompile_002ddefun-72"><\/a>$/;"	a
index-C_002dc-C_002dd-_007e-25	slime/doc/html/Documentation.html	/^     <br><dt><kbd>C-c C-d ~<\/kbd><dt><kbd>M-x common-lisp-hyperspec-format<\/kbd><dd><a name="index-C_002dc-C_002dd-_007e-25"><\/a><a name="index-common_002dlisp_002dhyperspec_002dformat-26"><\/a>$/;"	a
index-C_002dc-C_002dd-a-17	slime/doc/html/Documentation.html	/^     <br><dt><kbd>C-c C-d a<\/kbd><dt><kbd>M-x slime-apropos<\/kbd><dd><a name="index-C_002dc-C_002dd-a-17"><\/a><a name="index-slime_002dapropos-18"><\/a>$/;"	a
index-C_002dc-C_002dd-d-13	slime/doc/html/Documentation.html	/^     <br><dt><kbd>C-c C-d d<\/kbd><dt><kbd>M-x slime-describe-symbol<\/kbd><dd><a name="index-C_002dc-C_002dd-d-13"><\/a><a name="index-slime_002ddescribe_002dsymbol-14"><\/a>$/;"	a
index-C_002dc-C_002dd-h-23	slime/doc/html/Documentation.html	/^     <br><dt><kbd>C-c C-d h<\/kbd><dt><kbd>M-x slime-hyperspec-lookup<\/kbd><dd><a name="index-C_002dc-C_002dd-h-23"><\/a><a name="index-slime_002dhyperspec_002dlookup-24"><\/a>$/;"	a
index-C_002dc-C_002dd-p-21	slime/doc/html/Documentation.html	/^     <br><dt><kbd>C-c C-d p<\/kbd><dt><kbd>M-x slime-apropos-package<\/kbd><dd><a name="index-C_002dc-C_002dd-p-21"><\/a><a name="index-slime_002dapropos_002dpackage-22"><\/a>$/;"	a
index-C_002dc-C_002dd-z-19	slime/doc/html/Documentation.html	/^     <br><dt><kbd>C-c C-d z<\/kbd><dt><kbd>M-x slime-apropos-all<\/kbd><dd><a name="index-C_002dc-C_002dd-z-19"><\/a><a name="index-slime_002dapropos_002dall-20"><\/a>$/;"	a
index-C_002dc-C_002df-15	slime/doc/html/Documentation.html	/^     <br><dt><kbd>C-c C-f<\/kbd><dt><kbd>M-x slime-describe-function<\/kbd><dd><a name="index-C_002dc-C_002df-15"><\/a><a name="index-slime_002ddescribe_002dfunction-16"><\/a>$/;"	a
index-C_002dc-C_002dk-75	slime/doc/html/Compilation.html	/^     <br><dt><kbd>C-c C-k<\/kbd><dt><kbd>M-x slime-compile-and-load-file<\/kbd><dd><a name="index-C_002dc-C_002dk-75"><\/a><a name="index-slime_002dcompile_002dand_002dload_002dfile-76"><\/a>$/;"	a
index-C_002dc-C_002dl-79	slime/doc/html/Compilation.html	/^     <br><dt><kbd>C-c C-l<\/kbd><dt><kbd>M-x slime-load-file<\/kbd><dd><a name="index-C_002dc-C_002dl-79"><\/a><a name="index-slime_002dload_002dfile-80"><\/a>$/;"	a
index-C_002dc-C_002dm-212	slime/doc/html/slime_002dmacroexpansion_002dminor_002dmode.html	/^<dt><kbd>C-c C-m<\/kbd><dt><kbd>M-x slime-macroexpand-1-inplace<\/kbd><dd><a name="index-C_002dc-C_002dm-212"><\/a><a name="index-slime_002dmacroexpand_002d1_002dinplace-213"><\/a>$/;"	a
index-C_002dc-C_002dm-58	slime/doc/html/Macro_002dexpansion.html	/^<dt><kbd>C-c C-m<\/kbd><dt><kbd>M-x slime-macroexpand-1<\/kbd><dd><a name="index-C_002dc-C_002dm-58"><\/a><a name="index-slime_002dmacroexpand_002d1-59"><\/a>$/;"	a
index-C_002dc-C_002dn-164	slime/doc/html/Input-Navigation.html	/^     <br><dt><kbd>C-c C-n, M-x slime-repl-next-prompt<\/kbd><dt><kbd>C-c C-p, M-x slime-repl-previous-prompt<\/kbd><dd><a name="index-C_002dc-C_002dn-164"><\/a><a name="index-C_002dc-C_002dp-165"><\/a><a name="index-slime_002drepl_002dnext_002dprompt-166"><\/a><a name="index-slime_002drepl_002dprevious_002dprompt-167"><\/a>$/;"	a
index-C_002dc-C_002do-149	slime/doc/html/REPL-commands.html	/^     <br><dt><kbd>C-c C-o<\/kbd><dt><kbd>M-x slime-repl-clear-output<\/kbd><dd><a name="index-C_002dc-C_002do-149"><\/a><a name="index-slime_002drepl_002dclear_002doutput-150"><\/a>$/;"	a
index-C_002dc-C_002dp-98	slime/doc/html/Evaluation.html	/^     <br><dt><kbd>C-c C-p<\/kbd><dt><kbd>M-x slime-pprint-eval-last-expression<\/kbd><dd><a name="index-C_002dc-C_002dp-98"><\/a><a name="index-slime_002dpprint_002deval_002dlast_002dexpression-99"><\/a>$/;"	a
index-C_002dc-C_002dr-96	slime/doc/html/Evaluation.html	/^     <br><dt><kbd>C-c C-r<\/kbd><dt><kbd>M-x slime-eval-region<\/kbd><dd><a name="index-C_002dc-C_002dr-96"><\/a><a name="index-slime_002deval_002dregion-97"><\/a>$/;"	a
index-C_002dc-C_002ds-259	slime/doc/html/Compound-Completion.html	/^<dt><kbd>C-c C-s<\/kbd><dt><kbd>M-x slime-complete-form<\/kbd><dd><a name="index-C_002dc-C_002ds-259"><\/a><a name="index-slime_002dcomplete_002dform-260"><\/a>$/;"	a
index-C_002dc-C_002dt-66	slime/doc/html/Disassembly.html	/^     <br><dt><kbd>C-c C-t<\/kbd><dt><kbd>M-x slime-toggle-trace-fdefinition<\/kbd><dd><a name="index-C_002dc-C_002dt-66"><\/a><a name="index-slime_002dtoggle_002dtrace_002dfdefinition-67"><\/a>$/;"	a
index-C_002dc-C_002du-104	slime/doc/html/Evaluation.html	/^     <br><dt><kbd>C-c C-u<\/kbd><dt><kbd>M-x slime-undefine-function<\/kbd><dd><a name="index-C_002dc-C_002du-104"><\/a><a name="index-slime_002dundefine_002dfunction-105"><\/a>$/;"	a
index-C_002dc-C_002dv-SPC-278	slime/doc/html/Presentations.html	/^<dt><kbd>C-c C-v SPC<\/kbd><dt><kbd>M-x slime-mark-presentation<\/kbd><dd><a name="index-C_002dc-C_002dv-SPC-278"><\/a><a name="index-slime_002dmark_002dpresentation-279"><\/a>$/;"	a
index-C_002dc-C_002dv-d-284	slime/doc/html/Presentations.html	/^     <br><dt><kbd>C-c C-v d<\/kbd><dt><kbd>M-x slime-describe-presentation-at-point<\/kbd><dd><a name="index-C_002dc-C_002dv-d-284"><\/a><a name="index-slime_002ddescribe_002dpresentation_002dat_002dpoint-285"><\/a>$/;"	a
index-C_002dc-C_002dv-i-286	slime/doc/html/Presentations.html	/^     <br><dt><kbd>C-c C-v i<\/kbd><dt><kbd>M-x slime-inspect-presentation-at-point<\/kbd><dd><a name="index-C_002dc-C_002dv-i-286"><\/a><a name="index-slime_002dinspect_002dpresentation_002dat_002dpoint-287"><\/a>$/;"	a
index-C_002dc-C_002dv-n-288	slime/doc/html/Presentations.html	/^     <br><dt><kbd>C-c C-v n<\/kbd><dt><kbd>M-x slime-next-presentation<\/kbd><dd><a name="index-C_002dc-C_002dv-n-288"><\/a><a name="index-slime_002dnext_002dpresentation-289"><\/a>$/;"	a
index-C_002dc-C_002dv-p-290	slime/doc/html/Presentations.html	/^     <br><dt><kbd>C-c C-v p<\/kbd><dt><kbd>M-x slime-previous-presentation<\/kbd><dd><a name="index-C_002dc-C_002dv-p-290"><\/a><a name="index-slime_002dprevious_002dpresentation-291"><\/a>$/;"	a
index-C_002dc-C_002dv-r-282	slime/doc/html/Presentations.html	/^     <br><dt><kbd>C-c C-v r<\/kbd><dt><kbd>M-x slime-copy-presentation-at-point-to-repl<\/kbd><dd><a name="index-C_002dc-C_002dv-r-282"><\/a><a name="index-slime_002dcopy_002dpresentation_002dat_002dpoint_002dto_002drepl-283"><\/a>$/;"	a
index-C_002dc-C_002dv-w-280	slime/doc/html/Presentations.html	/^     <br><dt><kbd>C-c C-v w<\/kbd><dt><kbd>M-x slime-copy-presentation-at-point-to-kill-ring<\/kbd><dd><a name="index-C_002dc-C_002dv-w-280"><\/a><a name="index-slime_002dcopy_002dpresentation_002dat_002dpoint_002dto_002dkill_002dring-281"><\/a>$/;"	a
index-C_002dc-C_002dw-b-35	slime/doc/html/Cross_002dreference.html	/^     <br><dt><kbd>C-c C-w b<\/kbd><dt><kbd>M-x slime-who-binds<\/kbd><dd><a name="index-C_002dc-C_002dw-b-35"><\/a><a name="index-slime_002dwho_002dbinds-36"><\/a>$/;"	a
index-C_002dc-C_002dw-c-29	slime/doc/html/Cross_002dreference.html	/^<dt><kbd>C-c C-w c<\/kbd><dt><kbd>M-x slime-who-calls<\/kbd><dd><a name="index-C_002dc-C_002dw-c-29"><\/a><a name="index-slime_002dwho_002dcalls-30"><\/a>$/;"	a
index-C_002dc-C_002dw-m-39	slime/doc/html/Cross_002dreference.html	/^     <br><dt><kbd>C-c C-w m<\/kbd><dt><kbd>M-x slime-who-macroexpands<\/kbd><dd><a name="index-C_002dc-C_002dw-m-39"><\/a><a name="index-slime_002dwho_002dmacroexpands-40"><\/a>$/;"	a
index-C_002dc-C_002dw-r-33	slime/doc/html/Cross_002dreference.html	/^     <br><dt><kbd>C-c C-w r<\/kbd><dt><kbd>M-x slime-who-references<\/kbd><dd><a name="index-C_002dc-C_002dw-r-33"><\/a><a name="index-slime_002dwho_002dreferences-34"><\/a>$/;"	a
index-C_002dc-C_002dw-s-37	slime/doc/html/Cross_002dreference.html	/^     <br><dt><kbd>C-c C-w s<\/kbd><dt><kbd>M-x slime-who-sets<\/kbd><dd><a name="index-C_002dc-C_002dw-s-37"><\/a><a name="index-slime_002dwho_002dsets-38"><\/a>$/;"	a
index-C_002dc-C_002dw-w-31	slime/doc/html/Cross_002dreference.html	/^     <br><dt><kbd>C-c C-w w<\/kbd><dt><kbd>M-x slime-calls-who<\/kbd><dd><a name="index-C_002dc-C_002dw-w-31"><\/a><a name="index-slime_002dcalls_002dwho-32"><\/a>$/;"	a
index-C_002dc-C_002dx-c-218	slime/doc/html/Multiple-connections.html	/^<dt><kbd>C-c C-x c<\/kbd><dt><kbd>M-x slime-list-connections<\/kbd><dd><a name="index-C_002dc-C_002dx-c-218"><\/a><a name="index-slime_002dlist_002dconnections-219"><\/a>$/;"	a
index-C_002dc-C_002dx-t-220	slime/doc/html/Multiple-connections.html	/^     <br><dt><kbd>C-c C-x t<\/kbd><dt><kbd>M-x slime-list-threads<\/kbd><dd><a name="index-C_002dc-C_002dx-t-220"><\/a><a name="index-slime_002dlist_002dthreads-221"><\/a>$/;"	a
index-C_002dc-C_002dy-73	slime/doc/html/Compilation.html	/^     <br><dt><kbd>C-c C-y<\/kbd><dt><kbd>M-x slime-call-defun<\/kbd><dd><a name="index-C_002dc-C_002dy-73"><\/a><a name="index-slime_002dcall_002ddefun-74"><\/a>$/;"	a
index-C_002dc-C_002dz-81	slime/doc/html/Compilation.html	/^     <br><dt><kbd>C-c C-z<\/kbd><dt><kbd>M-x slime-switch-to-output-buffer<\/kbd><dd><a name="index-C_002dc-C_002dz-81"><\/a><a name="index-slime_002dswitch_002dto_002doutput_002dbuffer-82"><\/a>$/;"	a
index-C_002dc-E-100	slime/doc/html/Evaluation.html	/^     <br><dt><kbd>C-c E<\/kbd><dt><kbd>M-x slime-edit-value<\/kbd><dd><a name="index-C_002dc-E-100"><\/a><a name="index-slime_002dedit_002dvalue-101"><\/a>$/;"	a
index-C_002dc-I-112	slime/doc/html/Inspector.html	/^<dt><kbd>C-c I<\/kbd><dt><kbd>M-x slime-inspect<\/kbd><dd><a name="index-C_002dc-I-112"><\/a><a name="index-slime_002dinspect-113"><\/a>$/;"	a
index-C_002dc-M_002dc-88	slime/doc/html/Compilation.html	/^     <br><dt><kbd>C-c M-c<\/kbd><dt><kbd>M-x slime-remove-notes<\/kbd><dd><a name="index-C_002dc-M_002dc-88"><\/a><a name="index-slime_002dremove_002dnotes-89"><\/a>$/;"	a
index-C_002dc-M_002dd-64	slime/doc/html/Disassembly.html	/^<dt><kbd>C-c M-d<\/kbd><dt><kbd>M-x slime-disassemble-symbol<\/kbd><dd><a name="index-C_002dc-M_002dd-64"><\/a><a name="index-slime_002ddisassemble_002dsymbol-65"><\/a>$/;"	a
index-C_002dc-M_002dk-77	slime/doc/html/Compilation.html	/^     <br><dt><kbd>C-c M-k<\/kbd><dt><kbd>M-x slime-compile-file<\/kbd><dd><a name="index-C_002dc-M_002dk-77"><\/a><a name="index-slime_002dcompile_002dfile-78"><\/a>$/;"	a
index-C_002dc-M_002dm-60	slime/doc/html/Macro_002dexpansion.html	/^     <br><dt><kbd>C-c M-m<\/kbd><dt><kbd>M-x slime-macroexpand-all<\/kbd><dd><a name="index-C_002dc-M_002dm-60"><\/a><a name="index-slime_002dmacroexpand_002dall-61"><\/a>$/;"	a
index-C_002dc-M_002do-147	slime/doc/html/REPL-commands.html	/^     <br><dt><kbd>C-c M-o<\/kbd><dt><kbd>M-x slime-repl-clear-buffer<\/kbd><dd><a name="index-C_002dc-M_002do-147"><\/a><a name="index-slime_002drepl_002dclear_002dbuffer-148"><\/a>$/;"	a
index-C_002dc-M_002dp-110	slime/doc/html/Recovery.html	/^     <br><dt><kbd>C-c M-p<\/kbd><dt><kbd>M-x slime-repl-set-package<\/kbd><dd><a name="index-C_002dc-M_002dp-110"><\/a><a name="index-slime_002drepl_002dset_002dpackage-111"><\/a>$/;"	a
index-C_002dc-M_002dq-268	slime/doc/html/Editing-Commands.html	/^<dt><kbd>C-c M-q<\/kbd><dt><kbd>M-x slime-reindent-defun<\/kbd><dd><a name="index-C_002dc-M_002dq-268"><\/a><a name="index-slime_002dreindent_002ddefun-269"><\/a>$/;"	a
index-C_002dc-_003a-94	slime/doc/html/Evaluation.html	/^<dt><kbd>C-c :<\/kbd><dt><kbd>M-x slime-interactive-eval<\/kbd><dd><a name="index-C_002dc-_003a-94"><\/a><a name="index-slime_002dinteractive_002deval-95"><\/a>$/;"	a
index-C_002dc-_003c-42	slime/doc/html/Cross_002dreference.html	/^<dt><kbd>C-c &lt;<\/kbd><dt><kbd>M-x slime-list-callers<\/kbd><dd><a name="index-C_002dc-_003c-42"><\/a><a name="index-slime_002dlist_002dcallers-43"><\/a>$/;"	a
index-C_002dc-_003e-44	slime/doc/html/Cross_002dreference.html	/^     <br><dt><kbd>C-c &gt;<\/kbd><dt><kbd>M-x slime-list-callees<\/kbd><dd><a name="index-C_002dc-_003e-44"><\/a><a name="index-slime_002dlist_002dcallees-45"><\/a>$/;"	a
index-C_002dc-_007e-108	slime/doc/html/Recovery.html	/^     <br><dt><kbd>C-c ~<\/kbd><dt><kbd>M-x slime-sync-package-and-default-directory<\/kbd><dd><a name="index-C_002dc-_007e-108"><\/a><a name="index-slime_002dsync_002dpackage_002dand_002ddefault_002ddirectory-109"><\/a>$/;"	a
index-C_002dj-141	slime/doc/html/REPL-commands.html	/^     <br><dt><kbd>C-j<\/kbd><dt><kbd>M-x slime-repl-newline-and-indent<\/kbd><dd><a name="index-C_002dj-141"><\/a><a name="index-slime_002drepl_002dnewline_002dand_002dindent-142"><\/a>$/;"	a
index-C_002dj-300	slime/doc/html/Scratch-Buffer.html	/^<dt><kbd>C-j<\/kbd><dt><kbd>M-x slime-eval-print-last-expression<\/kbd><dd><a name="index-C_002dj-300"><\/a><a name="index-slime_002deval_002dprint_002dlast_002dexpression-301"><\/a>$/;"	a
index-C_002dx-4-_002e-52	slime/doc/html/Finding-definitions.html	/^     <br><dt><kbd>C-x 4 .<\/kbd><dt><kbd>M-x slime-edit-definition-other-window<\/kbd><dd><a name="index-C_002dx-4-_002e-52"><\/a><a name="index-slime_002dedit_002ddefinition_002dother_002dwindow-53"><\/a>$/;"	a
index-C_002dx-5-_002e-54	slime/doc/html/Finding-definitions.html	/^     <br><dt><kbd>C-x 5 .<\/kbd><dt><kbd>M-x slime-edit-definition-other-frame<\/kbd><dd><a name="index-C_002dx-5-_002e-54"><\/a><a name="index-slime_002dedit_002ddefinition_002dother_002dframe-55"><\/a>$/;"	a
index-C_002dx-C_002de-90	slime/doc/html/Evaluation.html	/^<dt><kbd>C-x C-e<\/kbd><dt><kbd>M-x slime-eval-last-expression<\/kbd><dd><a name="index-C_002dx-C_002de-90"><\/a><a name="index-slime_002deval_002dlast_002dexpression-91"><\/a>$/;"	a
index-C_002dx-M_002de-102	slime/doc/html/Evaluation.html	/^     <br><dt><kbd>C-x M-e<\/kbd><dt><kbd>M-x slime-eval-last-expression-display-output<\/kbd><dd><a name="index-C_002dx-M_002de-102"><\/a><a name="index-slime_002deval_002dlast_002dexpression_002ddisplay_002doutput-103"><\/a>$/;"	a
index-Compilation-69	slime/doc/html/Compilation.html	/^<p><a name="index-Compilation-69"><\/a>$/;"	a
index-Compiling-Functions-70	slime/doc/html/Compilation.html	/^<a name="index-Compiling-Functions-70"><\/a>$/;"	a
index-Completion-5	slime/doc/html/Completion.html	/^<p><a name="index-Completion-5"><\/a><a name="index-Symbol-Completion-6"><\/a>$/;"	a
index-Contribs-256	slime/doc/html/Loading-Contribs.html	/^<p><a name="index-Contribs-256"><\/a><a name="index-Contributions-257"><\/a><a name="index-Plugins-258"><\/a>$/;"	a
index-D-179	slime/doc/html/Examining-frames.html	/^     <br><dt><kbd>D<\/kbd><dt><kbd>M-x sldb-disassemble<\/kbd><dd><a name="index-D-179"><\/a><a name="index-sldb_002ddisassemble-180"><\/a>$/;"	a
index-Debugger-170	slime/doc/html/Debugger.html	/^<p><a name="index-Debugger-170"><\/a>$/;"	a
index-Input-History-151	slime/doc/html/Input-Navigation.html	/^<p><a name="index-Input-History-151"><\/a>$/;"	a
index-Listener-136	slime/doc/html/REPL.html	/^<p><a name="index-Listener-136"><\/a>$/;"	a
index-M_002dC_002da-272	slime/doc/html/Editing-Commands.html	/^     <br><dt><kbd>M-C-a<\/kbd><dt><kbd>M-x slime-beginning-of-defun<\/kbd><dd><a name="index-M_002dC_002da-272"><\/a><a name="index-slime_002dbeginning_002dof_002ddefun-273"><\/a>$/;"	a
index-M_002dC_002de-274	slime/doc/html/Editing-Commands.html	/^<br><dt><kbd>M-C-e<\/kbd><dt><kbd>M-x slime-end-of-defun<\/kbd><dd><a name="index-M_002dC_002de-274"><\/a><a name="index-slime_002dend_002dof_002ddefun-275"><\/a>$/;"	a
index-M_002dRET-124	slime/doc/html/Inspector.html	/^     <br><dt><kbd>M-RET<\/kbd><dt><kbd>M-x slime-inspector-copy-down<\/kbd><dd><a name="index-M_002dRET-124"><\/a><a name="index-slime_002dinspector_002dcopy_002ddown-125"><\/a>$/;"	a
index-M_002dTAB-7	slime/doc/html/Completion.html	/^<dt><kbd>M-TAB<\/kbd><dt><kbd>M-x slime-complete-symbol<\/kbd><dd><a name="index-M_002dTAB-7"><\/a><a name="index-slime_002dcomplete_002dsymbol-8"><\/a>$/;"	a
index-M_002d_002c-50	slime/doc/html/Finding-definitions.html	/^     <br><dt><kbd>M-,<\/kbd><dt><kbd>M-*<\/kbd><dt><kbd>M-x slime-pop-find-definition-stack<\/kbd><dd><a name="index-M_002d_002c-50"><\/a><a name="index-slime_002dpop_002dfind_002ddefinition_002dstack-51"><\/a>Go back to the point where <kbd>M-.<\/kbd> was invoked. This gives multi-level$/;"	a
index-M_002d_002e-48	slime/doc/html/Finding-definitions.html	/^<dt><kbd>M-.<\/kbd><dt><kbd>M-x slime-edit-definition<\/kbd><dd><a name="index-M_002d_002e-48"><\/a><a name="index-slime_002dedit_002ddefinition-49"><\/a>$/;"	a
index-M_002dn-156	slime/doc/html/Input-Navigation.html	/^     <br><dt><kbd>M-n, M-x slime-repl-next-input<\/kbd><dt><kbd>M-p, M-x slime-repl-previous-input<\/kbd><dd><a name="index-M_002dn-156"><\/a><a name="index-M_002dp-157"><\/a><a name="index-slime_002drepl_002dnext_002dinput-158"><\/a><a name="index-slime_002drepl_002dprevious_002dinput-159"><\/a>$/;"	a
index-M_002dn-193	slime/doc/html/Frame-Navigation.html	/^     <br><dt><kbd>M-n, M-x sldb-details-down<\/kbd><dt><kbd>M-p, M-x sldb-details-up<\/kbd><dd><a name="index-M_002dn-193"><\/a><a name="index-M_002dp-194"><\/a><a name="index-sldb_002ddetails_002ddown-195"><\/a><a name="index-sldb_002ddetails_002dup-196"><\/a>$/;"	a
index-M_002dn-84	slime/doc/html/Compilation.html	/^<dt><kbd>M-n<\/kbd><dt><kbd>M-x slime-next-note<\/kbd><dd><a name="index-M_002dn-84"><\/a><a name="index-slime_002dnext_002dnote-85"><\/a>$/;"	a
index-M_002dp-86	slime/doc/html/Compilation.html	/^     <br><dt><kbd>M-p<\/kbd><dt><kbd>M-x slime-previous-note<\/kbd><dd><a name="index-M_002dp-86"><\/a><a name="index-slime_002dprevious_002dnote-87"><\/a>$/;"	a
index-M_002ds-160	slime/doc/html/Input-Navigation.html	/^     <br><dt><kbd>M-s, M-x slime-repl-next-matching-input<\/kbd><dt><kbd>M-r, M-x slime-repl-previous-matching-input<\/kbd><dd><a name="index-M_002ds-160"><\/a><a name="index-M_002dr-161"><\/a><a name="index-slime_002drepl_002dnext_002dmatching_002dinput-162"><\/a><a name="index-slime_002drepl_002dprevious_002dmatching_002dinput-163"><\/a>$/;"	a
index-Macros-57	slime/doc/html/Macro_002dexpansion.html	/^<p><a name="index-Macros-57"><\/a>$/;"	a
index-Meta_002ddot-46	slime/doc/html/Finding-definitions.html	/^<p><a name="index-Meta_002ddot-46"><\/a><a name="index-TAGS-47"><\/a>$/;"	a
index-Methods-276	slime/doc/html/Fancy-Inspector.html	/^<p><a name="index-Methods-276"><\/a>$/;"	a
index-Presentations-277	slime/doc/html/Presentations.html	/^<p><a name="index-Presentations-277"><\/a>$/;"	a
index-R-206	slime/doc/html/Miscellaneous.html	/^     <br><dt><kbd>R<\/kbd><dt><kbd>M-x sldb-return-from-frame<\/kbd><dd><a name="index-R-206"><\/a><a name="index-sldb_002dreturn_002dfrom_002dframe-207"><\/a>$/;"	a
index-R-230	slime/doc/html/Multiple-connections.html	/^     <br><dt><kbd>R<\/kbd><dt><kbd>M-x slime-restart-connection-at-point<\/kbd><dd><a name="index-R-230"><\/a><a name="index-slime_002drestart_002dconnection_002dat_002dpoint-231"><\/a>$/;"	a
index-RET-114	slime/doc/html/Inspector.html	/^<dt><kbd>RET<\/kbd><dt><kbd>M-x slime-inspector-operate-on-point<\/kbd><dd><a name="index-RET-114"><\/a><a name="index-slime_002dinspector_002doperate_002don_002dpoint-115"><\/a>$/;"	a
index-RET-137	slime/doc/html/REPL-commands.html	/^<dt><kbd>RET<\/kbd><dt><kbd>M-x slime-repl-return<\/kbd><dd><a name="index-RET-137"><\/a><a name="index-slime_002drepl_002dreturn-138"><\/a>$/;"	a
index-RET-222	slime/doc/html/Multiple-connections.html	/^<dt><kbd>RET<\/kbd><dt><kbd>M-x slime-goto-connection<\/kbd><dd><a name="index-RET-222"><\/a><a name="index-slime_002dgoto_002dconnection-223"><\/a>$/;"	a
index-SPC-11	slime/doc/html/Documentation.html	/^<dt><kbd>SPC<\/kbd><dt><kbd>M-x slime-space<\/kbd><dd><a name="index-SPC-11"><\/a><a name="index-slime_002dspace-12"><\/a>$/;"	a
index-SWANK_003a_002aCOMMUNICATION_002dSTYLE_002a-246	slime/doc/html/Communication-style.html	/^<p><a name="index-SWANK_003a_002aCOMMUNICATION_002dSTYLE_002a-246"><\/a>$/;"	a
index-SWANK_003a_002aCONFIGURE_002dEMACS_002dINDENTATION_002a-247	slime/doc/html/Other-configurables.html	/^<a name="index-SWANK_003a_002aCONFIGURE_002dEMACS_002dINDENTATION_002a-247"><\/a>$/;"	a
index-SWANK_003a_002aDEDICATED_002dOUTPUT_002dSTREAM_002dPORT_002a-254	slime/doc/html/Other-configurables.html	/^     <p><a name="index-SWANK_003a_002aDEDICATED_002dOUTPUT_002dSTREAM_002dPORT_002a-254"><\/a><br><dt><code>SWANK:*DEDICATED-OUTPUT-STREAM-PORT*<\/code><dd>When <code>*USE-DEDICATED-OUTPUT-STREAM*<\/code> is <code>t<\/code> the stream will$/;"	a
index-SWANK_003a_002aGLOBALLY_002dREDIRECT_002dIO_002a-248	slime/doc/html/Other-configurables.html	/^     <p><a name="index-SWANK_003a_002aGLOBALLY_002dREDIRECT_002dIO_002a-248"><\/a><br><dt><code>SWANK:*GLOBALLY-REDIRECT-IO*<\/code><dd>When true this causes the standard streams (<code>*standard-output*<\/code>,$/;"	a
index-SWANK_003a_002aGLOBAL_002dDEBUGGER_002a-249	slime/doc/html/Other-configurables.html	/^     <p><a name="index-SWANK_003a_002aGLOBAL_002dDEBUGGER_002a-249"><\/a><br><dt><code>SWANK:*GLOBAL-DEBUGGER*<\/code><dd>When true (the default) this causes <code>*DEBUGGER-HOOK*<\/code> to be$/;"	a
index-SWANK_003a_002aLOG_002dEVENTS_002a-255	slime/doc/html/Other-configurables.html	/^     <p><a name="index-SWANK_003a_002aLOG_002dEVENTS_002a-255"><\/a><br><dt><code>SWANK:*LOG-EVENTS*<\/code><dd>Setting this variable to <code>t<\/code> causes all protocol messages$/;"	a
index-SWANK_003a_002aSLDB_002dPRINTER_002dBINDINGS_002a-250	slime/doc/html/Other-configurables.html	/^     <p><a name="index-SWANK_003a_002aSLDB_002dPRINTER_002dBINDINGS_002a-250"><\/a><a name="index-SWANK_003a_002aMACROEXPAND_002dPRINTER_002dBINDINGS_002a-251"><\/a><a name="index-SWANK_003a_002aSWANK_002dPPRINT_002dBINDINGS_002a-252"><\/a><br><dt><code>SWANK:*SLDB-PRINTER-BINDINGS*<\/code><dt><code>SWANK:*MACROEXPAND-PRINTER-BINDINGS*<\/code><dt><code>SWANK:*SWANK-PPRINT-BINDINGS*<\/code><dd>These variables can be used to customize the printer in various$/;"	a
index-SWANK_003a_002aUSE_002dDEDICATED_002dOUTPUT_002dSTREAM_002a-253	slime/doc/html/Other-configurables.html	/^     <p><a name="index-SWANK_003a_002aUSE_002dDEDICATED_002dOUTPUT_002dSTREAM_002a-253"><\/a><br><dt><code>SWANK:*USE-DEDICATED-OUTPUT-STREAM*<\/code><dd>This variable controls whether to use an unsafe efficiency hack for$/;"	a
index-Shortcuts-169	slime/doc/html/Shortcuts.html	/^<p><a name="index-Shortcuts-169"><\/a>$/;"	a
index-Stepping-197	slime/doc/html/Stepping.html	/^<p><a name="index-Stepping-197"><\/a>$/;"	a
index-TRAMP-294	slime/doc/html/TRAMP.html	/^<p><a name="index-TRAMP-294"><\/a>$/;"	a
index-Typeout-Frame-292	slime/doc/html/Typeout-frames.html	/^<p><a name="index-Typeout-Frame-292"><\/a>$/;"	a
index-a-183	slime/doc/html/Restarts.html	/^<dt><kbd>a<\/kbd><dt><kbd>M-x sldb-abort<\/kbd><dd><a name="index-a-183"><\/a><a name="index-sldb_002dabort-184"><\/a>$/;"	a
index-c-187	slime/doc/html/Restarts.html	/^     <br><dt><kbd>c<\/kbd><dt><kbd>M-x sldb-continue<\/kbd><dd><a name="index-c-187"><\/a><a name="index-sldb_002dcontinue-188"><\/a>$/;"	a
index-d-116	slime/doc/html/Inspector.html	/^     <br><dt><kbd>d<\/kbd><dt><kbd>M-x slime-inspector-describe<\/kbd><dd><a name="index-d-116"><\/a><a name="index-slime_002dinspector_002ddescribe-117"><\/a>$/;"	a
index-d-177	slime/doc/html/Examining-frames.html	/^     <br><dt><kbd>d<\/kbd><dt><kbd>M-x sldb-pprint-eval-in-frame<\/kbd><dd><a name="index-d-177"><\/a><a name="index-sldb_002dpprint_002deval_002din_002dframe-178"><\/a>$/;"	a
index-d-224	slime/doc/html/Multiple-connections.html	/^     <br><dt><kbd>d<\/kbd><dt><kbd>M-x slime-connection-list-make-default<\/kbd><dd><a name="index-d-224"><\/a><a name="index-slime_002dconnection_002dlist_002dmake_002ddefault-225"><\/a>$/;"	a
index-e-175	slime/doc/html/Examining-frames.html	/^     <br><dt><kbd>e<\/kbd><dt><kbd>M-x sldb-eval-in-frame<\/kbd><dd><a name="index-e-175"><\/a><a name="index-sldb_002deval_002din_002dframe-176"><\/a>$/;"	a
index-g-214	slime/doc/html/slime_002dmacroexpansion_002dminor_002dmode.html	/^     <br><dt><kbd>g<\/kbd><dt><kbd>M-x slime-macroexpand-1-inplace<\/kbd><dd><a name="index-g-214"><\/a><a name="index-slime_002dmacroexpand_002d1_002dinplace-215"><\/a>$/;"	a
index-g-226	slime/doc/html/Multiple-connections.html	/^     <br><dt><kbd>g<\/kbd><dt><kbd>M-x slime-update-connection-list<\/kbd><dd><a name="index-g-226"><\/a><a name="index-slime_002dupdate_002dconnection_002dlist-227"><\/a>$/;"	a
index-g_t_003a-210	slime/doc/html/Miscellaneous.html	/^     <br><dt><kbd>:<\/kbd><dt><kbd>M-x slime-interactive-eval<\/kbd><dd><a name="index-g_t_003a-210"><\/a><a name="index-slime_002dinteractive_002deval-211"><\/a>$/;"	a
index-i-181	slime/doc/html/Examining-frames.html	/^     <br><dt><kbd>i<\/kbd><dt><kbd>M-x sldb-inspect-in-frame<\/kbd><dd><a name="index-i-181"><\/a><a name="index-sldb_002dinspect_002din_002dframe-182"><\/a>$/;"	a
index-inferior_002dlisp_002dprogram-1	slime/doc/html/Installation.html	/^   <p><a name="index-inferior_002dlisp_002dprogram-1"><\/a><a name="index-load_002dpath-2"><\/a>$/;"	a
index-inferior_002dslime_002dmode-298	slime/doc/html/inferior_002dslime_002dmode.html	/^<dt><kbd>M-x inferior-slime-mode<\/kbd><dd><a name="index-inferior_002dslime_002dmode-298"><\/a>$/;"	a
index-inferior_002dslime_002dmode_002dmap-299	slime/doc/html/inferior_002dslime_002dmode.html	/^   <p><a name="index-inferior_002dslime_002dmode_002dmap-299"><\/a>The variable <code>inferior-slime-mode-map<\/code> contains the extra$/;"	a
index-l-118	slime/doc/html/Inspector.html	/^     <br><dt><kbd>l<\/kbd><dt><kbd>M-x slime-inspector-pop<\/kbd><dd><a name="index-l-118"><\/a><a name="index-slime_002dinspector_002dpop-119"><\/a>$/;"	a
index-n-120	slime/doc/html/Inspector.html	/^     <br><dt><kbd>n<\/kbd><dt><kbd>M-x slime-inspector-next<\/kbd><dd><a name="index-n-120"><\/a><a name="index-slime_002dinspector_002dnext-121"><\/a>$/;"	a
index-n-189	slime/doc/html/Frame-Navigation.html	/^<dt><kbd>n, M-x sldb-down<\/kbd><dt><kbd>p, M-x sldb-up<\/kbd><dd><a name="index-n-189"><\/a><a name="index-p-190"><\/a><a name="index-sldb_002ddown-191"><\/a><a name="index-sldb_002dup-192"><\/a>$/;"	a
index-o-202	slime/doc/html/Stepping.html	/^     <br><dt><kbd>o<\/kbd><dt><kbd>M-x sldb-next<\/kbd><dd><a name="index-o-202"><\/a><a name="index-sldb_002dnext-203"><\/a>$/;"	a
index-q-122	slime/doc/html/Inspector.html	/^     <br><dt><kbd>q<\/kbd><dt><kbd>M-x slime-inspector-quit<\/kbd><dd><a name="index-q-122"><\/a><a name="index-slime_002dinspector_002dquit-123"><\/a>$/;"	a
index-q-185	slime/doc/html/Restarts.html	/^     <br><dt><kbd>q<\/kbd><dt><kbd>M-x sldb-quit<\/kbd><dd><a name="index-q-185"><\/a><a name="index-sldb_002dquit-186"><\/a>$/;"	a
index-q-216	slime/doc/html/slime_002dmacroexpansion_002dminor_002dmode.html	/^     <br><dt><kbd>q<\/kbd><dt><kbd>M-x slime-temp-buffer-quit<\/kbd><dd><a name="index-q-216"><\/a><a name="index-slime_002dtemp_002dbuffer_002dquit-217"><\/a>$/;"	a
index-q-228	slime/doc/html/Multiple-connections.html	/^     <br><dt><kbd>q<\/kbd><dt><kbd>M-x slime-temp-buffer-quit<\/kbd><dd><a name="index-q-228"><\/a><a name="index-slime_002dtemp_002dbuffer_002dquit-229"><\/a>$/;"	a
index-r-204	slime/doc/html/Miscellaneous.html	/^<dt><kbd>r<\/kbd><dt><kbd>M-x sldb-restart-frame<\/kbd><dd><a name="index-r-204"><\/a><a name="index-sldb_002drestart_002dframe-205"><\/a>$/;"	a
index-s-198	slime/doc/html/Stepping.html	/^<dt><kbd>s<\/kbd><dt><kbd>M-x sldb-step<\/kbd><dd><a name="index-s-198"><\/a><a name="index-sldb_002dstep-199"><\/a>$/;"	a
index-sldb_002dhook-245	slime/doc/html/Hooks.html	/^     <p><a name="index-sldb_002dhook-245"><\/a><br><dt><code>sldb-hook<\/code><dd>This hook is run after <acronym>SLDB<\/acronym> is invoked. The hook functions are$/;"	a
index-slime_002dabort_002dconnection-234	slime/doc/html/Multiple-connections.html	/^     <br><dt><kbd>M-x slime-abort-connection<\/kbd><dd><a name="index-slime_002dabort_002dconnection-234"><\/a>$/;"	a
index-slime_002darglist-NAME-263	slime/doc/html/slime_002dautodoc_002dmode.html	/^<dt><kbd>M-x slime-arglist NAME<\/kbd><dd><a name="index-slime_002darglist-NAME-263"><\/a>$/;"	a
index-slime_002dautodoc_002dmode-264	slime/doc/html/slime_002dautodoc_002dmode.html	/^     <br><dt><kbd>M-x slime-autodoc-mode<\/kbd><dd><a name="index-slime_002dautodoc_002dmode-264"><\/a>$/;"	a
index-slime_002dbrowse_002dclasses-295	slime/doc/html/Xref-and-Class-Browser.html	/^<dt><kbd>M-x slime-browse-classes<\/kbd><dd><a name="index-slime_002dbrowse_002dclasses-295"><\/a>$/;"	a
index-slime_002dbrowse_002dxrefs-296	slime/doc/html/Xref-and-Class-Browser.html	/^     <br><dt><kbd>M-x slime-browse-xrefs<\/kbd><dd><a name="index-slime_002dbrowse_002dxrefs-296"><\/a>$/;"	a
index-slime_002dclose_002dall_002dparens_002din_002dsexp-270	slime/doc/html/Editing-Commands.html	/^     <br><dt><kbd>M-x slime-close-all-parens-in-sexp<\/kbd><dd><a name="index-slime_002dclose_002dall_002dparens_002din_002dsexp-270"><\/a>$/;"	a
index-slime_002dcompile_002dregion-83	slime/doc/html/Compilation.html	/^     <br><dt><kbd>M-x slime-compile-region<\/kbd><dd><a name="index-slime_002dcompile_002dregion-83"><\/a>$/;"	a
index-slime_002dcompiler_002dmacroexpand-63	slime/doc/html/Macro_002dexpansion.html	/^     <br><dt><kbd>M-x slime-compiler-macroexpand<\/kbd><dd><a name="index-slime_002dcompiler_002dmacroexpand-63"><\/a>$/;"	a
index-slime_002dcompiler_002dmacroexpand_002d1-62	slime/doc/html/Macro_002dexpansion.html	/^     <br><dt><kbd>M-x slime-compiler-macroexpand-1<\/kbd><dd><a name="index-slime_002dcompiler_002dmacroexpand_002d1-62"><\/a>$/;"	a
index-slime_002dconnect-232	slime/doc/html/Multiple-connections.html	/^     <br><dt><kbd>M-x slime-connect<\/kbd><dd><a name="index-slime_002dconnect-232"><\/a>$/;"	a
index-slime_002ddisconnect-233	slime/doc/html/Multiple-connections.html	/^     <br><dt><kbd>M-x slime-disconnect<\/kbd><dd><a name="index-slime_002ddisconnect-233"><\/a>$/;"	a
index-slime_002dedit_002ddefinition_002dwith_002detags-56	slime/doc/html/Finding-definitions.html	/^     <br><dt><kbd>M-x slime-edit-definition-with-etags<\/kbd><dd><a name="index-slime_002dedit_002ddefinition_002dwith_002detags-56"><\/a>$/;"	a
index-slime_002densure_002dtypeout_002dframe-293	slime/doc/html/Typeout-frames.html	/^<dt><kbd>M-x slime-ensure-typeout-frame<\/kbd><dd><a name="index-slime_002densure_002dtypeout_002dframe-293"><\/a>$/;"	a
index-slime_002dfilename_002dtranslations-236	slime/doc/html/Emacs_002dside-customization.html	/^     <p><a name="index-slime_002dfilename_002dtranslations-236"><\/a><br><dt><code>slime-filename-translations<\/code><dd>This variable controls filename translation between Emacs and the Lisp$/;"	a
index-slime_002dhighlight_002dedits_002dmode-297	slime/doc/html/Highlight-Edits.html	/^<dt><kbd>M-x slime-highlight-edits-mode<\/kbd><dd><a name="index-slime_002dhighlight_002dedits_002dmode-297"><\/a>$/;"	a
index-slime_002dinsert_002dbalanced_002dcomments-271	slime/doc/html/Editing-Commands.html	/^     <br><dt><kbd>M-x slime-insert-balanced-comments<\/kbd><dd><a name="index-slime_002dinsert_002dbalanced_002dcomments-271"><\/a>$/;"	a
index-slime_002dlisp_002dimplementations-4	slime/doc/html/Multiple-Lisps.html	/^   <p><a name="index-slime_002dlisp_002dimplementations-4"><\/a>$/;"	a
index-slime_002dload_002dsystem-NAME-265	slime/doc/html/ASDF.html	/^<dt><kbd>M-x slime-load-system NAME<\/kbd><dd><a name="index-slime_002dload_002dsystem-NAME-265"><\/a>$/;"	a
index-slime_002dmode_002dhook-243	slime/doc/html/Hooks.html	/^<a name="index-slime_002dmode_002dhook-243"><\/a>$/;"	a
index-slime_002dprofile_002dpackage-127	slime/doc/html/Profiling.html	/^<br><dt><kbd>M-x slime-profile-package<\/kbd><dd><a name="index-slime_002dprofile_002dpackage-127"><\/a>$/;"	a
index-slime_002dprofile_002dreport-129	slime/doc/html/Profiling.html	/^<br><dt><kbd>M-x slime-profile-report<\/kbd><dd><a name="index-slime_002dprofile_002dreport-129"><\/a>$/;"	a
index-slime_002dprofile_002dreset-130	slime/doc/html/Profiling.html	/^<br><dt><kbd>M-x slime-profile-reset<\/kbd><dd><a name="index-slime_002dprofile_002dreset-130"><\/a>$/;"	a
index-slime_002dprofiled_002dfunctions-131	slime/doc/html/Profiling.html	/^<br><dt><kbd>M-x slime-profiled-functions<\/kbd><dd><a name="index-slime_002dprofiled_002dfunctions-131"><\/a>$/;"	a
index-slime_002drepl_002dwrap_002dhistory-168	slime/doc/html/Input-Navigation.html	/^   <p><a name="index-slime_002drepl_002dwrap_002dhistory-168"><\/a>The variable <code>slime-repl-wrap-history<\/code> controls wrap around$/;"	a
index-slime_002drestart_002dinferior_002dlisp-3	slime/doc/html/Running.html	/^<dt><kbd>M-x slime-restart-inferior-lisp<\/kbd><dd><a name="index-slime_002drestart_002dinferior_002dlisp-3"><\/a>$/;"	a
index-slime_002dscratch-302	slime/doc/html/Scratch-Buffer.html	/^     <br><dt><kbd>M-x slime-scratch<\/kbd><dd><a name="index-slime_002dscratch-302"><\/a>$/;"	a
index-slime_002dstartup_002danimation-266	slime/doc/html/Banner.html	/^   <p><a name="index-slime_002dstartup_002danimation-266"><\/a><a name="index-slime_002dheader_002dline_002dp-267"><\/a>By setting the variable <code>slime-startup-animation<\/code> to nil you can$/;"	a
index-slime_002dtoggle_002dprofile_002dfdefinition-126	slime/doc/html/Profiling.html	/^<dt><kbd>M-x slime-toggle-profile-fdefinition<\/kbd><dd><a name="index-slime_002dtoggle_002dprofile_002dfdefinition-126"><\/a>$/;"	a
index-slime_002dunprofile_002dall-128	slime/doc/html/Profiling.html	/^<br><dt><kbd>M-x slime-unprofile-all<\/kbd><dd><a name="index-slime_002dunprofile_002dall-128"><\/a>$/;"	a
index-slime_002duntrace_002dall-68	slime/doc/html/Disassembly.html	/^     <br><dt><kbd>M-x slime-untrace-all<\/kbd><dd><a name="index-slime_002duntrace_002dall-68"><\/a>$/;"	a
index-slime_002dwho_002dspecializes-41	slime/doc/html/Cross_002dreference.html	/^     <br><dt><kbd>M-x slime-who-specializes<\/kbd><dd><a name="index-slime_002dwho_002dspecializes-41"><\/a>$/;"	a
index-t-171	slime/doc/html/Examining-frames.html	/^<dt><kbd>t<\/kbd><dt><kbd>M-x sldb-toggle-details<\/kbd><dd><a name="index-t-171"><\/a><a name="index-sldb_002dtoggle_002ddetails-172"><\/a>$/;"	a
index-v-173	slime/doc/html/Examining-frames.html	/^     <br><dt><kbd>v<\/kbd><dt><kbd>M-x sldb-show-source<\/kbd><dd><a name="index-v-173"><\/a><a name="index-sldb_002dshow_002dsource-174"><\/a>$/;"	a
index-x-200	slime/doc/html/Stepping.html	/^     <br><dt><kbd>x<\/kbd><dt><kbd>M-x sldb-next<\/kbd><dd><a name="index-x-200"><\/a><a name="index-sldb_002dnext-201"><\/a>$/;"	a
index-xref-27	slime/doc/html/Cross_002dreference.html	/^<p><a name="index-xref-27"><\/a><a name="index-Cross_002dreferencing-28"><\/a>$/;"	a
inferior-lisp-program	slime/slime.el	/^(defvar inferior-lisp-program "lisp" $/;"	f
inferior-slime-closing-return	slime/contrib/inferior-slime.el	/^(defun inferior-slime-closing-return ()$/;"	f
inferior-slime-indent-line	slime/contrib/inferior-slime.el	/^(defun inferior-slime-indent-line ()$/;"	f
inferior-slime-init-keymap	slime/contrib/inferior-slime.el	/^(defun inferior-slime-init-keymap ()$/;"	f
inferior-slime-input-complete-p	slime/contrib/inferior-slime.el	/^(defun inferior-slime-input-complete-p ()$/;"	f
inferior-slime-mode	slime/contrib/inferior-slime.el	/^(define-minor-mode inferior-slime-mode$/;"	f
inferior-slime-mode	slime/doc/html/inferior_002dslime_002dmode.html	/^<a name="inferior-slime-mode"><\/a>$/;"	a
inferior-slime-return	slime/contrib/inferior-slime.el	/^(defun inferior-slime-return ()$/;"	f
inferior_002dslime_002dmode	slime/doc/html/inferior_002dslime_002dmode.html	/^<a name="inferior_002dslime_002dmode"><\/a>$/;"	a
info	slime/nregex.lisp	/^(defmacro info (message &rest args)$/;"	f
info-from-emacs-buffer-p	slime/swank-cmucl.lisp	/^(defun info-from-emacs-buffer-p (info)$/;"	f
info-from-emacs-buffer-p	slime/swank-scl.lisp	/^(defun info-from-emacs-buffer-p (info)$/;"	f
infodir	slime/doc/Makefile	/^infodir=\/usr\/local\/info$/;"	m
infofiles	slime/doc/Makefile	/^infofiles=slime.info$/;"	m
information	practicals-1.0.3/Chapter25/id3v2.lisp	/^(defmethod information ((frame generic-frame-v2.3))$/;"	f
inherited-slots	practicals-1.0.3/Chapter24/binary-data.lisp	/^(defun inherited-slots (name)$/;"	f
init	slime/swank-loader.lisp	/^(defun init (&key delete reload load-contribs (setup t))$/;"	f
init	slime/swank.lisp	/^(defun init ()$/;"	f
init-global-stream-redirection	slime/swank.lisp	/^(defun init-global-stream-redirection ()$/;"	f
init-inspector	slime/swank.lisp	/^(defslimefun init-inspector (string)$/;"	f
init_002dexample	slime/doc/html/Loading-Swank-faster.html	/^   <p><a name="init_002dexample"><\/a>$/;"	a
initial-value	slime/xref.lisp	/^(define-pattern-substitution initial-value form)$/;"	f
initialize-instance	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod initialize-instance :after ((char-class char-class) &rest init-args)$/;"	f
initialize-instance	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod initialize-instance :after ((str str) &rest init-args)$/;"	f
initialize-instance	slime/xref.lisp	/^(define-caller-pattern initialize-instance (form &key (:star form)) :lisp2)$/;"	f
initialize-multiprocessing	slime/swank-allegro.lisp	/^(defimplementation initialize-multiprocessing (continuation)$/;"	f
initialize-multiprocessing	slime/swank-backend.lisp	/^(definterface initialize-multiprocessing (continuation)$/;"	f
initialize-multiprocessing	slime/swank-lispworks.lisp	/^(defimplementation initialize-multiprocessing (continuation)$/;"	f
initialize-streams-for-connection	slime/swank.lisp	/^(defun initialize-streams-for-connection (connection)$/;"	f
input-available-p	slime/swank.lisp	/^(defun input-available-p (stream)$/;"	f
input-stream-p	slime/xref.lisp	/^(define-caller-pattern input-stream-p (form) :lisp)$/;"	f
insert-advance-fn	practicals-1.0.3/libraries/cl-ppcre-1.2.3/scanner.lisp	/^(defmacro insert-advance-fn (advance-fn)$/;"	f
insert-char-class-tester	practicals-1.0.3/libraries/cl-ppcre-1.2.3/closures.lisp	/^(defmacro insert-char-class-tester ((char-class chr-expr) &body body)$/;"	f
insert-row	practicals-1.0.3/Chapter27/database.lisp	/^(defun insert-row (names-and-values table)$/;"	f
inspect	slime/contrib/swank-mit-scheme.scm	/^(define-generic inspect (o))$/;"	f
inspect	slime/contrib/swank-mit-scheme.scm	/^(define-method inspect ((o <object>))$/;"	f
inspect	slime/contrib/swank-mit-scheme.scm	/^(define-method inspect ((o <pair>))$/;"	f
inspect	slime/xref.lisp	/^(define-caller-pattern inspect (form) :lisp)$/;"	f
inspect-alien-pointer	slime/swank-cmucl.lisp	/^(defun inspect-alien-pointer (alien)$/;"	f
inspect-alien-pointer	slime/swank-scl.lisp	/^(defun inspect-alien-pointer (alien)$/;"	f
inspect-alien-record	slime/swank-cmucl.lisp	/^(defun inspect-alien-record (alien)$/;"	f
inspect-alien-record	slime/swank-scl.lisp	/^(defun inspect-alien-record (alien)$/;"	f
inspect-alien-value	slime/swank-cmucl.lisp	/^(defun inspect-alien-value (alien)$/;"	f
inspect-alien-value	slime/swank-scl.lisp	/^(defun inspect-alien-value (alien)$/;"	f
inspect-code-block	slime/contrib/swank-mit-scheme.scm	/^(define (inspect-code-block o)$/;"	f
inspect-cons	slime/contrib/swank-mit-scheme.scm	/^(define (inspect-cons o)$/;"	f
inspect-cons	slime/swank.lisp	/^(defun inspect-cons (cons)$/;"	f
inspect-current-condition	slime/swank.lisp	/^(defslimefun inspect-current-condition ()$/;"	f
inspect-environment	slime/contrib/swank-mit-scheme.scm	/^(define (inspect-environment o)$/;"	f
inspect-fallback	slime/contrib/swank-mit-scheme.scm	/^(define (inspect-fallback o)$/;"	f
inspect-frame-var	slime/swank.lisp	/^(defslimefun inspect-frame-var (frame var)$/;"	f
inspect-function	slime/contrib/swank-fancy-inspector.lisp	/^(defun inspect-function (f)$/;"	f
inspect-in-emacs	slime/swank.lisp	/^(defslimefun inspect-in-emacs (what)$/;"	f
inspect-in-frame	slime/swank.lisp	/^(defslimefun inspect-in-frame (string index)$/;"	f
inspect-list	slime/contrib/swank-mit-scheme.scm	/^(define (inspect-list o)$/;"	f
inspect-list	slime/swank.lisp	/^(defun inspect-list (list)$/;"	f
inspect-list-aux	slime/swank.lisp	/^(defun inspect-list-aux (list)$/;"	f
inspect-nth-part	slime/swank.lisp	/^(defslimefun inspect-nth-part (index)$/;"	f
inspect-object	slime/contrib/swank-mit-scheme.scm	/^(define (inspect-object o)$/;"	f
inspect-object	slime/swank.lisp	/^(defun inspect-object (o)$/;"	f
inspect-presentation	slime/contrib/swank-presentations.lisp	/^(defslimefun inspect-presentation (id reset-p)$/;"	f
inspect-procedure	slime/contrib/swank-mit-scheme.scm	/^(define (inspect-procedure o)$/;"	f
inspect-scode	slime/contrib/swank-mit-scheme.scm	/^(define (inspect-scode o)$/;"	f
inspect-slot-for-emacs	slime/contrib/swank-fancy-inspector.lisp	/^(defgeneric inspect-slot-for-emacs (class object slot)$/;"	f
inspect-structure	slime/swank-corman.lisp	/^(defun inspect-structure (o)$/;"	f
inspect-system-pair	slime/contrib/swank-mit-scheme.scm	/^(define (inspect-system-pair o)$/;"	f
inspect-vector	slime/contrib/swank-mit-scheme.scm	/^(define (inspect-vector o)$/;"	f
inspector-call-nth-action	slime/swank.lisp	/^(defslimefun inspector-call-nth-action (index &rest args)$/;"	f
inspector-content	slime/swank.lisp	/^(defun inspector-content (specs)$/;"	f
inspector-next	slime/swank.lisp	/^(defslimefun inspector-next ()$/;"	f
inspector-nth-part	slime/swank.lisp	/^(defslimefun inspector-nth-part (index)$/;"	f
inspector-pop	slime/swank.lisp	/^(defslimefun inspector-pop ()$/;"	f
inspector-princ	slime/contrib/swank-fancy-inspector.lisp	/^(defun inspector-princ (list)$/;"	f
inspector-range	slime/swank.lisp	/^(defslimefun inspector-range (from to)$/;"	f
inspector-reinspect	slime/swank.lisp	/^(defslimefun inspector-reinspect ()$/;"	f
inspector-state	slime/contrib/swank-mit-scheme.scm	/^(define-structure (inspector-state (conc-name istate.))$/;"	f
install	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<br>&nbsp;<br><h3><a name="install" class=none>Download and installation<\/a><\/h3>$/;"	a
install-bridge	slime/contrib/bridge.el	/^(defun install-bridge ()$/;"	f
install-debugger	slime/swank.lisp	/^(defun install-debugger (connection)$/;"	f
install-debugger-globally	slime/swank-backend.lisp	/^(definterface install-debugger-globally (function)$/;"	f
install-debugger-globally	slime/swank-lispworks.lisp	/^(defimplementation install-debugger-globally (function)$/;"	f
install-debugger-globally	slime/swank-sbcl.lisp	/^(defimplementation install-debugger-globally (function)$/;"	f
install-fd-handler	slime/swank.lisp	/^(defun install-fd-handler (connection)$/;"	f
install-gc-hooks	slime/swank-cmucl.lisp	/^(defun install-gc-hooks ()$/;"	f
install-sigio-handler	slime/swank.lisp	/^(defun install-sigio-handler (connection)$/;"	f
int-char	slime/xref.lisp	/^(define-caller-pattern int-char (form) :lisp)$/;"	f
integer	slime/xref.lisp	/^(define-pattern-substitution integer (:test #'integerp))$/;"	f
integer-decode-float	slime/xref.lisp	/^(define-caller-pattern integer-decode-float (form) :lisp)$/;"	f
integer-length	slime/xref.lisp	/^(define-caller-pattern integer-length (form) :lisp)$/;"	f
integerp	slime/xref.lisp	/^(define-caller-pattern integerp (form) :lisp)$/;"	f
interactive-eval	slime/contrib/swank-kawa.scm	/^(defslimefun interactive-eval (env str)$/;"	f
interactive-eval	slime/slime.el	/^(def-slime-test interactive-eval $/;"	f
interactive-eval	slime/swank.lisp	/^(defslimefun interactive-eval (string)$/;"	f
interactive-eval-output	slime/slime.el	/^(def-slime-test interactive-eval-output$/;"	f
interactive-eval-region	slime/contrib/swank-kawa.scm	/^(defslimefun interactive-eval-region (env (s <string>))$/;"	f
interactive-eval-region	slime/swank.lisp	/^(defslimefun interactive-eval-region (string)$/;"	f
interactive-stream-p	slime/swank-scl.lisp	/^(defmethod interactive-stream-p ((stream slime-input-stream))$/;"	f
interactive-stream-p	slime/swank-scl.lisp	/^(defmethod interactive-stream-p ((stream slime-output-stream))$/;"	f
interactive-stream-p	slime/xref.lisp	/^(define-caller-pattern interactive-stream-p (form) :lisp2)$/;"	f
interesting-frame-p	slime/swank-lispworks.lisp	/^(defun interesting-frame-p (frame)$/;"	f
intern	slime/xref.lisp	/^(define-caller-pattern intern (form &optional :ignore) :lisp)$/;"	f
intern-catch-tag	slime/swank.lisp	/^(defun intern-catch-tag (tag)$/;"	f
intern-feature	practicals-1.0.3/Chapter23/spam.lisp	/^(defun intern-feature (word)$/;"	f
intern-for-column	practicals-1.0.3/Chapter27/database.lisp	/^(defun intern-for-column (value column)$/;"	f
interned-values-column	practicals-1.0.3/Chapter27/database.lisp	/^(defclass interned-values-column (column)$/;"	f
interrupt-at-toplevel	slime/slime.el	/^(def-slime-test interrupt-at-toplevel$/;"	f
interrupt-bubbling-idiot	slime/slime.el	/^(def-slime-test interrupt-bubbling-idiot $/;"	f
interrupt-in-blocking-read	slime/slime.el	/^(def-slime-test interrupt-in-blocking-read$/;"	f
interrupt-thread	slime/swank-abcl.lisp	/^(defimplementation interrupt-thread (thread fn)$/;"	f
interrupt-thread	slime/swank-allegro.lisp	/^(defimplementation interrupt-thread (thread fn)$/;"	f
interrupt-thread	slime/swank-backend.lisp	/^(definterface interrupt-thread (thread fn)$/;"	f
interrupt-thread	slime/swank-lispworks.lisp	/^(defimplementation interrupt-thread (thread fn)$/;"	f
interrupt-thread	slime/swank-openmcl.lisp	/^(defimplementation interrupt-thread (thread fn)$/;"	f
interrupt-thread	slime/swank-scl.lisp	/^(defimplementation interrupt-thread (thread fn)$/;"	f
interrupt-worker-thread	slime/swank.lisp	/^(defun interrupt-worker-thread (id)$/;"	f
intersection	slime/xref.lisp	/^(define-caller-pattern intersection (form form &key (:star form)) :lisp)$/;"	f
invalid-method-error	slime/xref.lisp	/^(define-caller-pattern invalid-method-error (fn form (:star form)) :lisp2)$/;"	f
inverse-chi-square	practicals-1.0.3/Chapter23/spam.lisp	/^(defun inverse-chi-square (value degrees-of-freedom)$/;"	f
invert-hash-table	slime/xref.lisp	/^(defun invert-hash-table (table &optional (types-to-ignore *types-to-ignore*))$/;"	f
invoke-annotation	slime/sbcl-pprint-patch.lisp	/^(defun invoke-annotation (stream annotation truncatep)$/;"	f
invoke-debugger	slime/xref.lisp	/^(define-caller-pattern invoke-debugger (form) :lisp2)$/;"	f
invoke-nth-restart	slime/swank.lisp	/^(defslimefun invoke-nth-restart (index)$/;"	f
invoke-nth-restart-for-emacs	slime/swank.lisp	/^(defslimefun invoke-nth-restart-for-emacs (sldb-level n)$/;"	f
invoke-restart	slime/xref.lisp	/^(define-caller-pattern invoke-restart (form (:star form)) :lisp2)$/;"	f
invoke-restart-interactively	slime/xref.lisp	/^(define-caller-pattern invoke-restart-interactively (form) :lisp2)$/;"	f
invoke-sldb	slime/contrib/swank-mit-scheme.scm	/^(define (invoke-sldb socket level condition)$/;"	f
io-speed-test	slime/swank.lisp	/^(defslimefun io-speed-test (&optional (n 5000) (m 1))$/;"	f
ir1-translator-definitions	slime/swank-cmucl.lisp	/^(defun ir1-translator-definitions (name)$/;"	f
ir1-translator-definitions	slime/swank-scl.lisp	/^(defun ir1-translator-definitions (name)$/;"	f
is-ignorable-fun-p	slime/swank-ecl.lisp	/^(defun is-ignorable-fun-p (x)$/;"	f
is-prefix-p	slime/swank-clisp.lisp	/^(defun is-prefix-p (pattern string)$/;"	f
is-swank-source-p	slime/swank-ecl.lisp	/^(defun is-swank-source-p (name)$/;"	f
iso-8859-1-char	practicals-1.0.3/Chapter25/id3v2.lisp	/^(define-binary-type iso-8859-1-char ()$/;"	f
iso-8859-1-string	practicals-1.0.3/Chapter25/id3v2.lisp	/^(define-binary-type iso-8859-1-string (length)$/;"	f
iso-8859-1-terminated-string	practicals-1.0.3/Chapter25/id3v2.lisp	/^(define-binary-type iso-8859-1-terminated-string (terminator)$/;"	f
isqrt	slime/xref.lisp	/^(define-caller-pattern isqrt (form) :lisp)$/;"	f
istate	slime/contrib/swank-mit-scheme.scm	/^(define istate #f)$/;"	f
istate>elisp	slime/contrib/swank-mit-scheme.scm	/^(define (istate>elisp istate)$/;"	f
kawa-slime-init	slime/contrib/swank-kawa.scm	/^(defun kawa-slime-init (file _)$/;"	f
keyword-package	slime/swank.lisp	/^(defconstant keyword-package (find-package :keyword)$/;"	f
keywordp	slime/xref.lisp	/^(define-caller-pattern keywordp (form) :lisp)$/;"	f
keywords-of-operator	slime/contrib/swank-arglists.lisp	/^(defun keywords-of-operator (operator)$/;"	f
kill-nth-thread	slime/swank.lisp	/^(defslimefun kill-nth-thread (index)$/;"	f
kill-thread	slime/swank-abcl.lisp	/^(defimplementation kill-thread (thread)$/;"	f
kill-thread	slime/swank-allegro.lisp	/^(defimplementation kill-thread (thread)$/;"	f
kill-thread	slime/swank-backend.lisp	/^(definterface kill-thread (thread)$/;"	f
kill-thread	slime/swank-corman.lisp	/^(defimplementation kill-thread (thread)$/;"	f
kill-thread	slime/swank-lispworks.lisp	/^(defimplementation kill-thread (thread)$/;"	f
kill-thread	slime/swank-openmcl.lisp	/^(defimplementation kill-thread (thread)$/;"	f
kill-thread	slime/swank-scl.lisp	/^(defimplementation kill-thread (thread)$/;"	f
known-return-point-values	slime/swank-cmucl.lisp	/^(defun known-return-point-values (sigcontext sc-offsets)$/;"	f
known-return-point-values	slime/swank-scl.lisp	/^(defun known-return-point-values (sigcontext sc-offsets)$/;"	f
known-to-emacs-p	slime/swank.lisp	/^(defun known-to-emacs-p (symbol)$/;"	f
la-dump	la_parse.lisp	/^(defun la-dump (soln)$/;"	f
la-parse	la_parse.lisp	/^(defun la-parse (file)$/;"	f
label-value-line	slime/swank-backend.lisp	/^(defun label-value-line (label value &key (newline t))$/;"	f
label-value-line*	slime/swank-backend.lisp	/^(defmacro label-value-line* (&rest label-values)$/;"	f
labels	slime/xref.lisp	/^(define-caller-pattern labels$/;"	f
lambda	slime/xref.lisp	/^(define-caller-pattern lambda (lambda-list (:rest body)) :lisp)$/;"	f
lambda-list	slime/xref.lisp	/^(define-pattern-substitution lambda-list$/;"	f
lambda-list-keywords	slime/xref.lisp	/^(define-variable-pattern lambda-list-keywords :lisp)$/;"	f
lambda-parameters-limit	slime/xref.lisp	/^(define-variable-pattern lambda-parameters-limit :lisp)$/;"	f
last	slime/xref.lisp	/^(define-caller-pattern last (form (:optional form)) :lisp)$/;"	f
lazy-cdr	chiglug-macros/lazy-eval.lisp	/^(defun lazy-cdr (list)$/;"	f
lazy-cons	chiglug-macros/lazy-eval.lisp	/^(defmacro lazy-cons (head tail)$/;"	f
lcm	slime/xref.lisp	/^(define-caller-pattern lcm ((:star form)) :lisp)$/;"	f
ldb	slime/contrib/swank-mit-scheme.scm	/^(define (ldb size position integer)$/;"	f
ldb	slime/xref.lisp	/^(define-caller-pattern ldb (form form) :lisp)$/;"	f
ldb-test	slime/xref.lisp	/^(define-caller-pattern ldb-test (form form) :lisp)$/;"	f
ldiff	slime/xref.lisp	/^(define-caller-pattern ldiff (form form) :lisp)$/;"	f
least-negative-double-float	slime/xref.lisp	/^(define-variable-pattern least-negative-double-float :lisp)$/;"	f
least-negative-long-float	slime/xref.lisp	/^(define-variable-pattern least-negative-long-float :lisp)$/;"	f
least-negative-normalized-double-float	slime/xref.lisp	/^(define-variable-pattern least-negative-normalized-double-float :lisp2)$/;"	f
least-negative-normalized-long-float	slime/xref.lisp	/^(define-variable-pattern least-negative-normalized-long-float :lisp2)$/;"	f
least-negative-normalized-short-float	slime/xref.lisp	/^(define-variable-pattern least-negative-normalized-short-float :lisp2)$/;"	f
least-negative-normalized-single-float	slime/xref.lisp	/^(define-variable-pattern least-negative-normalized-single-float :lisp2)$/;"	f
least-negative-short-float	slime/xref.lisp	/^(define-variable-pattern least-negative-short-float :lisp)$/;"	f
least-negative-single-float	slime/xref.lisp	/^(define-variable-pattern least-negative-single-float :lisp)$/;"	f
least-positive-double-float	slime/xref.lisp	/^(define-variable-pattern least-positive-double-float :lisp)$/;"	f
least-positive-long-float	slime/xref.lisp	/^(define-variable-pattern least-positive-long-float :lisp)$/;"	f
least-positive-normalized-double-float	slime/xref.lisp	/^(define-variable-pattern least-positive-normalized-double-float :lisp2)$/;"	f
least-positive-normalized-long-float	slime/xref.lisp	/^(define-variable-pattern least-positive-normalized-long-float :lisp2)$/;"	f
least-positive-normalized-short-float	slime/xref.lisp	/^(define-variable-pattern least-positive-normalized-short-float :lisp2)$/;"	f
least-positive-normalized-single-float	slime/xref.lisp	/^(define-variable-pattern least-positive-normalized-single-float :lisp2)$/;"	f
least-positive-short-float	slime/xref.lisp	/^(define-variable-pattern least-positive-short-float :lisp)$/;"	f
least-positive-single-float	slime/xref.lisp	/^(define-variable-pattern least-positive-single-float :lisp)$/;"	f
len	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod len ((void void))$/;"	f
length	slime/xref.lisp	/^(define-caller-pattern length (form) :lisp)$/;"	f
length=	slime/contrib/swank-arglists.lisp	/^(defun length= (seq n)$/;"	f
let	slime/xref.lisp	/^(define-caller-pattern let$/;"	f
let*	slime/xref.lisp	/^(define-caller-pattern let*$/;"	f
link	lispcast/01-reddit.lisp	/^(defclass link ()$/;"	f
link	practicals-1.0.3/Chapter29/mp3-browser.lisp	/^(defun link (target &rest attributes)$/;"	f
lisp-implementation-type	slime/xref.lisp	/^(define-caller-pattern lisp-implementation-type () :lisp)$/;"	f
lisp-implementation-type-name	slime/swank-abcl.lisp	/^(defimplementation lisp-implementation-type-name ()$/;"	f
lisp-implementation-type-name	slime/swank-allegro.lisp	/^(defimplementation lisp-implementation-type-name ()$/;"	f
lisp-implementation-type-name	slime/swank-backend.lisp	/^(definterface lisp-implementation-type-name ()$/;"	f
lisp-implementation-type-name	slime/swank-clisp.lisp	/^(defimplementation lisp-implementation-type-name ()$/;"	f
lisp-implementation-type-name	slime/swank-cmucl.lisp	/^(defimplementation lisp-implementation-type-name ()$/;"	f
lisp-implementation-type-name	slime/swank-corman.lisp	/^(defimplementation lisp-implementation-type-name ()$/;"	f
lisp-implementation-type-name	slime/swank-lispworks.lisp	/^(defimplementation lisp-implementation-type-name ()$/;"	f
lisp-implementation-type-name	slime/swank-openmcl.lisp	/^(defimplementation lisp-implementation-type-name ()$/;"	f
lisp-implementation-type-name	slime/swank-sbcl.lisp	/^(defimplementation lisp-implementation-type-name ()$/;"	f
lisp-implementation-type-name	slime/swank-scl.lisp	/^(defimplementation lisp-implementation-type-name ()$/;"	f
lisp-implementation-version	slime/xref.lisp	/^(define-caller-pattern lisp-implementation-version () :lisp)$/;"	f
lisp-source-location	slime/swank-sbcl.lisp	/^(defun lisp-source-location (code-location)$/;"	f
lisp-version-string	slime/swank-loader.lisp	/^(defun lisp-version-string ()$/;"	f
lispworks-inspect	slime/swank-lispworks.lisp	/^(defun lispworks-inspect (o)$/;"	f
lispworks-severity	slime/swank-lispworks.lisp	/^(defun lispworks-severity (condition)$/;"	f
list	slime/xref.lisp	/^(define-caller-pattern list ((:star form)) :lisp)$/;"	f
list*	slime/xref.lisp	/^(define-caller-pattern list* ((:star form)) :lisp)$/;"	f
list-all-package-names	slime/swank.lisp	/^(defslimefun list-all-package-names (&optional nicknames)$/;"	f
list-all-packages	slime/xref.lisp	/^(define-caller-pattern list-all-packages () :lisp)$/;"	f
list-all-systems-in-central-registry	slime/contrib/swank-asdf.lisp	/^(defslimefun list-all-systems-in-central-registry ()$/;"	f
list-all-systems-known-to-asdf	slime/contrib/swank-asdf.lisp	/^(defslimefun list-all-systems-known-to-asdf ()$/;"	f
list-asdf-systems	slime/contrib/swank-asdf.lisp	/^(defslimefun list-asdf-systems ()$/;"	f
list-callees	slime/swank-abcl.lisp	/^(defxref list-callees   pxref:list-callees)$/;"	f
list-callees	slime/swank-allegro.lisp	/^(defimplementation list-callees (name)$/;"	f
list-callees	slime/swank-backend.lisp	/^(definterface list-callees (function-name)$/;"	f
list-callees	slime/swank-clisp.lisp	/^(defxref list-callees   pxref:list-callees)$/;"	f
list-callees	slime/swank-cmucl.lisp	/^(defimplementation list-callees (symbol)$/;"	f
list-callees	slime/swank-openmcl.lisp	/^(defimplementation list-callees (name)$/;"	f
list-callees	slime/swank-sbcl.lisp	/^(defimplementation list-callees (symbol)$/;"	f
list-callees	slime/swank-scl.lisp	/^(defimplementation list-callees (symbol)$/;"	f
list-callees	slime/xref.lisp	/^(defun list-callees (symbol)$/;"	f
list-callers	slime/swank-abcl.lisp	/^(defxref list-callers   pxref:list-callers)$/;"	f
list-callers	slime/swank-allegro.lisp	/^(defimplementation list-callers (name)$/;"	f
list-callers	slime/swank-backend.lisp	/^(definterface list-callers (function-name)$/;"	f
list-callers	slime/swank-clisp.lisp	/^(defxref list-callers   pxref:list-callers)$/;"	f
list-callers	slime/swank-cmucl.lisp	/^(defimplementation list-callers (symbol)$/;"	f
list-callers	slime/swank-lispworks.lisp	/^(defxref list-callers   list-callers-internal)$/;"	f
list-callers	slime/swank-openmcl.lisp	/^(defimplementation list-callers (symbol)$/;"	f
list-callers	slime/swank-sbcl.lisp	/^(defimplementation list-callers (symbol)$/;"	f
list-callers	slime/swank-scl.lisp	/^(defimplementation list-callers (symbol)$/;"	f
list-callers	slime/xref.lisp	/^(defun list-callers (symbol)$/;"	f
list-callers-internal	slime/swank-lispworks.lisp	/^(defun list-callers-internal (name)$/;"	f
list-directory	practicals-1.0.3/Chapter15/pathnames.lisp	/^(defun list-directory (dirname)$/;"	f
list-gen	nifty_funs.lisp	/^(defun list-gen (start end)$/;"	f
list-item-for-page	practicals-1.0.3/Chapter29/mp3-browser.lisp	/^(defun list-item-for-page (what row)$/;"	f
list-length	slime/xref.lisp	/^(define-caller-pattern list-length (form) :lisp)$/;"	f
list-readers	slime/xref.lisp	/^(defun list-readers (symbol)$/;"	f
list-setters	slime/xref.lisp	/^(defun list-setters (symbol)$/;"	f
list-threads	slime/swank.lisp	/^(defslimefun list-threads ()$/;"	f
list-users	slime/xref.lisp	/^(defun list-users (symbol)$/;"	f
list=	nifty_funs.lisp	/^(defun list= (lst &rest more-lists)$/;"	f
listen	slime/xref.lisp	/^(define-caller-pattern listen ((:optional form)) :lisp)$/;"	f
listener-eval	slime/contrib/swank-kawa.scm	/^(defslimefun listener-eval (env string)$/;"	f
listener-eval	slime/swank.lisp	/^(defslimefun listener-eval (string)$/;"	f
listify	slime/swank.lisp	/^(defun listify (f)$/;"	f
listp	slime/xref.lisp	/^(define-caller-pattern listp (form) :lisp)$/;"	f
load	slime/xref.lisp	/^(define-caller-pattern load (form &key (:star form)) :lisp)$/;"	f
load-database	practicals-1.0.3/Chapter27/mp3-database.lisp	/^(defun load-database (dir db)$/;"	f
load-db	db.lisp	/^(defun load-db (filename)$/;"	f
load-db	practicals-1.0.3/Chapter03/simple-database.lisp	/^(defun load-db (filename)$/;"	f
load-file	slime/contrib/swank-kawa.scm	/^(defslimefun load-file (env filename)$/;"	f
load-file	slime/swank.lisp	/^(defslimefun load-file (filename)$/;"	f
load-logical-pathname-translations	slime/xref.lisp	/^(define-caller-pattern load-logical-pathname-translations (form) :lisp2)$/;"	f
load-site-init-file	slime/swank-loader.lisp	/^(defun load-site-init-file (dir)$/;"	f
load-swank	slime/swank-loader.lisp	/^(defun load-swank (&key (src-dir *source-directory*)$/;"	f
load-time-value	slime/xref.lisp	/^(define-caller-pattern load-time-value (form (:optional form)) :lisp2)$/;"	f
load-user-init-file	slime/swank-loader.lisp	/^(defun load-user-init-file ()$/;"	f
loadup	slime/swank-loader.lisp	/^(defun loadup ()$/;"	f
local-port	slime/swank-abcl.lisp	/^(defimplementation local-port (socket)$/;"	f
local-port	slime/swank-allegro.lisp	/^(defimplementation local-port (socket)$/;"	f
local-port	slime/swank-backend.lisp	/^(definterface local-port (socket)$/;"	f
local-port	slime/swank-clisp.lisp	/^(defimplementation local-port (socket)$/;"	f
local-port	slime/swank-cmucl.lisp	/^(defimplementation local-port (socket)$/;"	f
local-port	slime/swank-corman.lisp	/^(defimplementation local-port (socket)$/;"	f
local-port	slime/swank-ecl.lisp	/^(defimplementation local-port (socket)$/;"	f
local-port	slime/swank-lispworks.lisp	/^(defimplementation local-port (socket)$/;"	f
local-port	slime/swank-openmcl.lisp	/^(defimplementation local-port (socket)$/;"	f
local-port	slime/swank-sbcl.lisp	/^(defimplementation local-port (socket)$/;"	f
local-port	slime/swank-scl.lisp	/^(defimplementation local-port (socket)$/;"	f
locally	slime/xref.lisp	/^(define-caller-pattern locally ((:star declaration) (:star form)) :lisp)$/;"	f
locally-bound-debugger-hook	slime/slime.el	/^(def-slime-test locally-bound-debugger-hook$/;"	f
locate-compiler-note	slime/swank-cmucl.lisp	/^(defun locate-compiler-note (file source source-path)$/;"	f
locate-compiler-note	slime/swank-sbcl.lisp	/^(defun locate-compiler-note (file source-path source)$/;"	f
locate-compiler-note	slime/swank-scl.lisp	/^(defun locate-compiler-note (file source source-path)$/;"	f
location-for-warning	slime/swank-allegro.lisp	/^(defun location-for-warning (condition)$/;"	f
location-in-file	slime/swank-cmucl.lisp	/^(defun location-in-file (filename code-location debug-source)$/;"	f
location-in-file	slime/swank-scl.lisp	/^(defun location-in-file (filename code-location debug-source)$/;"	f
location-in-stream	slime/swank-cmucl.lisp	/^(defun location-in-stream (code-location debug-source)$/;"	f
location-in-stream	slime/swank-scl.lisp	/^(defun location-in-stream (code-location debug-source)$/;"	f
log	slime/xref.lisp	/^(define-caller-pattern log (form (:optional form)) :lisp)$/;"	f
log-event	slime/contrib/swank-mit-scheme.scm	/^(define (log-event fstring . args)$/;"	f
log-event	slime/swank.lisp	/^(defun log-event (format-string &rest args)$/;"	f
log-port	slime/contrib/swank-mit-scheme.scm	/^(define log-port (current-output-port))$/;"	f
log-stream-op	slime/swank-cmucl.lisp	/^(defun log-stream-op (stream operation)$/;"	f
logand	slime/xref.lisp	/^(define-caller-pattern logand ((:star form)) :lisp)$/;"	f
logandc1	slime/xref.lisp	/^(define-caller-pattern logandc1 (form form) :lisp)$/;"	f
logandc2	slime/xref.lisp	/^(define-caller-pattern logandc2 (form form) :lisp)$/;"	f
logbitp	slime/xref.lisp	/^(define-caller-pattern logbitp (form form) :lisp)$/;"	f
logcount	slime/xref.lisp	/^(define-caller-pattern logcount (form) :lisp)$/;"	f
logeqv	slime/xref.lisp	/^(define-caller-pattern logeqv ((:star form)) :lisp)$/;"	f
logical-pathname	slime/xref.lisp	/^(define-caller-pattern logical-pathname (form) :lisp2)$/;"	f
logical-pathname-translations	slime/xref.lisp	/^(define-caller-pattern logical-pathname-translations (form) :lisp2)$/;"	f
logior	slime/xref.lisp	/^(define-caller-pattern logior ((:star form)) :lisp)$/;"	f
lognand	slime/xref.lisp	/^(define-caller-pattern lognand (form form) :lisp)$/;"	f
lognor	slime/xref.lisp	/^(define-caller-pattern lognor (form form) :lisp)$/;"	f
lognot	slime/xref.lisp	/^(define-caller-pattern lognot (form) :lisp)$/;"	f
logorc1	slime/xref.lisp	/^(define-caller-pattern logorc1 (form form) :lisp)$/;"	f
logorc2	slime/xref.lisp	/^(define-caller-pattern logorc2 (form form) :lisp)$/;"	f
logtest	slime/xref.lisp	/^(define-caller-pattern logtest (form form) :lisp)$/;"	f
logxor	slime/xref.lisp	/^(define-caller-pattern logxor ((:star form)) :lisp)$/;"	f
long-compiler-message-for-emacs	slime/swank-cmucl.lisp	/^(defun long-compiler-message-for-emacs (condition error-context)$/;"	f
long-compiler-message-for-emacs	slime/swank-sbcl.lisp	/^(defun long-compiler-message-for-emacs (condition error-context)$/;"	f
long-compiler-message-for-emacs	slime/swank-scl.lisp	/^(defun long-compiler-message-for-emacs (condition error-context)$/;"	f
long-float-epsilon	slime/xref.lisp	/^(define-variable-pattern long-float-epsilon :lisp)$/;"	f
long-float-negative-epsilon	slime/xref.lisp	/^(define-variable-pattern long-float-negative-epsilon :lisp)$/;"	f
long-site-name	slime/xref.lisp	/^(define-caller-pattern long-site-name () :lisp)$/;"	f
longer	onlisp.lisp	/^(defun longer (x y)$/;"	f
longest-common-prefix	slime/contrib/swank-mit-scheme.scm	/^(define (longest-common-prefix strings)$/;"	f
longest-common-prefix	slime/swank.lisp	/^(defun longest-common-prefix (strings)$/;"	f
longest-compound-prefix	slime/contrib/swank-c-p-c.lisp	/^(defun longest-compound-prefix (completions &optional (delimeter #\\-))$/;"	f
lookaround	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<h4><a name="lookaround" class=none>Captured groups not available outside of look-aheads and look-behinds<\/a><\/h4>$/;"	a
looking-at-p	practicals-1.0.3/libraries/cl-ppcre-1.2.3/lexer.lisp	/^(defun looking-at-p (lexer chr)$/;"	f
lookup	slime/xref.lisp	/^(defun lookup (symbol environment)$/;"	f
lookup-caller-pattern	slime/xref.lisp	/^(defun lookup-caller-pattern (name)$/;"	f
lookup-pattern-substitution	slime/xref.lisp	/^(defun lookup-pattern-substitution (name)$/;"	f
lookup-playlist	practicals-1.0.3/Chapter29/playlist.lisp	/^(defun lookup-playlist (id)$/;"	f
lookup-presented-object	slime/contrib/swank-presentations.lisp	/^(defun lookup-presented-object (id)$/;"	f
loop	slime/xref.lisp	/^(define-caller-pattern loop ((:star form)) :lisp)$/;"	f
loop-interrupt-continue-interrupt-quit	slime/slime.el	/^(def-slime-test loop-interrupt-continue-interrupt-quit$/;"	f
loop-interrupt-quit	slime/slime.el	/^(def-slime-test loop-interrupt-quit$/;"	f
lower-case-p	slime/xref.lisp	/^(define-caller-pattern lower-case-p (form) :lisp)$/;"	f
lrec	onlisp.lisp	/^(defun lrec (rec &optional base)$/;"	f
mac	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<h4><a name="mac" class=none><code>&quot;\\r&quot;<\/code> doesn't work with MCL<\/a><\/h4>$/;"	a
machine-instance	slime/xref.lisp	/^(define-caller-pattern machine-instance () :lisp)$/;"	f
machine-type	slime/xref.lisp	/^(define-caller-pattern machine-type () :lisp)$/;"	f
machine-version	slime/xref.lisp	/^(define-caller-pattern machine-version () :lisp)$/;"	f
macro-01	chiglug-macros/presentation.lisp	/^(defun macro-01 (x)$/;"	f
macro-02	chiglug-macros/presentation.lisp	/^(defun macro-02 (x)$/;"	f
macro-03	chiglug-macros/presentation.lisp	/^(defun macro-03 (x)$/;"	f
macro-04	chiglug-macros/presentation.lisp	/^(defun macro-04 (x)$/;"	f
macro-05	chiglug-macros/presentation.lisp	/^(defun macro-05 (x)$/;"	f
macro-06	chiglug-macros/presentation.lisp	/^(defun macro-06 (x)$/;"	f
macro-07	chiglug-macros/presentation.lisp	/^(defun macro-07 (lst)$/;"	f
macro-08	chiglug-macros/presentation.lisp	/^(defun macro-08 (lst)$/;"	f
macro-form-p	practicals-1.0.3/Chapter31/html.lisp	/^(defun macro-form-p (form)$/;"	f
macro-function	slime/xref.lisp	/^(define-caller-pattern macro-function (form) :lisp)$/;"	f
macro-indentation	slime/swank.lisp	/^(defun macro-indentation (arglist)$/;"	f
macroexpand	slime/xref.lisp	/^(define-caller-pattern macroexpand (form (:optional :ignore)) :lisp)$/;"	f
macroexpand-1	slime/xref.lisp	/^(define-caller-pattern macroexpand-1 (form (:optional :ignore)) :lisp)$/;"	f
macroexpand-all	slime/swank-abcl.lisp	/^(defimplementation macroexpand-all (form)$/;"	f
macroexpand-all	slime/swank-allegro.lisp	/^(defimplementation macroexpand-all (form)$/;"	f
macroexpand-all	slime/swank-backend.lisp	/^(definterface macroexpand-all (form)$/;"	f
macroexpand-all	slime/swank-clisp.lisp	/^(defimplementation macroexpand-all (form)$/;"	f
macroexpand-all	slime/swank-cmucl.lisp	/^(defimplementation macroexpand-all (form)$/;"	f
macroexpand-all	slime/swank-corman.lisp	/^(defimplementation macroexpand-all (form)$/;"	f
macroexpand-all	slime/swank-ecl.lisp	/^(defimplementation macroexpand-all (form)$/;"	f
macroexpand-all	slime/swank-lispworks.lisp	/^(defimplementation macroexpand-all (form)$/;"	f
macroexpand-all	slime/swank-sbcl.lisp	/^(defimplementation macroexpand-all (form)$/;"	f
macroexpand-all	slime/swank-scl.lisp	/^(defimplementation macroexpand-all (form)$/;"	f
macrolet	slime/xref.lisp	/^(define-caller-pattern macrolet$/;"	f
mail	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<br>&nbsp;<br><h3><a name="mail" class=none>Support and mailing lists<\/a><\/h3>$/;"	a
mailbox	slime/swank-abcl.lisp	/^(defun mailbox (thread)$/;"	f
mailbox	slime/swank-allegro.lisp	/^(defun mailbox (thread)$/;"	f
mailbox	slime/swank-corman.lisp	/^(defun mailbox (thread)$/;"	f
mailbox	slime/swank-lispworks.lisp	/^(defun mailbox (thread)$/;"	f
mailbox	slime/swank-openmcl.lisp	/^(defun mailbox (thread)$/;"	f
mailbox	slime/swank-scl.lisp	/^(defun mailbox (thread)$/;"	f
main	chiglug-macros/test.c	/^int main(int argc, char **argv)$/;"	f
main	tmp.lisp	/^(defun main (limit)$/;"	f
main-loop	slime/contrib/swank-mit-scheme.scm	/^(define (main-loop socket)$/;"	f
make-apropos-matcher	slime/swank.lisp	/^(defun make-apropos-matcher (pattern case-sensitive)$/;"	f
make-arg-symbol	slime/swank-cmucl.lisp	/^(defun make-arg-symbol (i)$/;"	f
make-arg-symbol	slime/swank-scl.lisp	/^(defun make-arg-symbol (i)$/;"	f
make-array	slime/xref.lisp	/^(define-caller-pattern make-array (form &key (:star form)) :lisp)$/;"	f
make-broadcast-stream	slime/xref.lisp	/^(define-caller-pattern make-broadcast-stream ((:star form)) :lisp)$/;"	f
make-c	goon/read.lisp	/^(defun make-c (path-a path-b path-c)$/;"	f
make-caller-tree	slime/xref.lisp	/^(defun make-caller-tree (&optional (mode *default-graphing-mode*)$/;"	f
make-cd	db.lisp	/^(defun make-cd (title artist rating ripped)$/;"	f
make-cd	practicals-1.0.3/Chapter03/simple-database.lisp	/^(defun make-cd (title artist rating ripped)$/;"	f
make-char	slime/xref.lisp	/^(define-caller-pattern make-char (form (:optional form form)) :lisp)$/;"	f
make-char-from-code	practicals-1.0.3/libraries/cl-ppcre-1.2.3/lexer.lisp	/^(defun make-char-from-code (number error-pos)$/;"	f
make-column	practicals-1.0.3/Chapter27/database.lisp	/^(defgeneric make-column (name type &optional default-value))$/;"	f
make-column	practicals-1.0.3/Chapter27/database.lisp	/^(defmethod make-column (name (type (eql 'interned-string)) &optional default-value)$/;"	f
make-column	practicals-1.0.3/Chapter27/database.lisp	/^(defmethod make-column (name (type (eql 'number)) &optional default-value)$/;"	f
make-column	practicals-1.0.3/Chapter27/database.lisp	/^(defmethod make-column (name (type (eql 'string)) &optional default-value)$/;"	f
make-comparison-expr	db.lisp	/^(defun make-comparison-expr (field value)$/;"	f
make-comparison-expr	practicals-1.0.3/Chapter03/simple-database.lisp	/^(defun make-comparison-expr (field value)$/;"	f
make-comparisons-list	db.lisp	/^(defun make-comparisons-list (fields)$/;"	f
make-comparisons-list	practicals-1.0.3/Chapter03/simple-database.lisp	/^(defun make-comparisons-list (fields)$/;"	f
make-compiler-note	slime/swank.lisp	/^(defun make-compiler-note (condition)$/;"	f
make-compound-prefix-matcher	slime/contrib/swank-c-p-c.lisp	/^(defun make-compound-prefix-matcher (delimeter &key (test #'char=))$/;"	f
make-concatenated-stream	slime/xref.lisp	/^(define-caller-pattern make-concatenated-stream ((:star form)) :lisp)$/;"	f
make-condition	slime/xref.lisp	/^(define-caller-pattern make-condition (form &rest :ignore) :lisp2)$/;"	f
make-definition-source-location	slime/swank-sbcl.lisp	/^(defun make-definition-source-location (definition-source type name)$/;"	f
make-dispatch-macro-character	slime/xref.lisp	/^(define-caller-pattern make-dispatch-macro-character (form &optional form form)$/;"	f
make-dspec-location	slime/swank-lispworks.lisp	/^(defun make-dspec-location (dspec location &optional hints)$/;"	f
make-dspec-progenitor-location	slime/swank-lispworks.lisp	/^(defun make-dspec-progenitor-location (dspec location)$/;"	f
make-echo-stream	slime/xref.lisp	/^(define-caller-pattern make-echo-stream (form form) :lisp)$/;"	f
make-fn-streams	slime/swank-abcl.lisp	/^(defimplementation make-fn-streams (input-fn output-fn)$/;"	f
make-fn-streams	slime/swank-backend.lisp	/^(definterface make-fn-streams (input-fn output-fn)$/;"	f
make-fn-streams	slime/swank-cmucl.lisp	/^(defimplementation make-fn-streams (input-fn output-fn)$/;"	f
make-fn-streams	slime/swank-gray.lisp	/^(defimplementation make-fn-streams (input-fn output-fn)$/;"	f
make-fn-streams	slime/swank-scl.lisp	/^(defimplementation make-fn-streams (input-fn output-fn)$/;"	f
make-fuzzy-matching	slime/contrib/swank-fuzzy.lisp	/^(defun make-fuzzy-matching (symbol package-name score package-chunks symbol-chunks)$/;"	f
make-hash-table	slime/xref.lisp	/^(define-caller-pattern make-hash-table (&key (:star form)) :lisp)$/;"	f
make-icy-metadata	practicals-1.0.3/Chapter28/shoutcast.lisp	/^(defun make-icy-metadata (title)$/;"	f
make-instance	slime/xref.lisp	/^(define-caller-pattern make-instance (fn (:star form)) :lisp2)$/;"	f
make-instances-obsolete	slime/xref.lisp	/^(define-caller-pattern make-instances-obsolete (fn) :lisp2)$/;"	f
make-invoke-debugger-hook	slime/swank-sbcl.lisp	/^(defun make-invoke-debugger-hook (hook)$/;"	f
make-lexer	practicals-1.0.3/libraries/cl-ppcre-1.2.3/lexer.lisp	/^(defun make-lexer (string)$/;"	f
make-list	slime/xref.lisp	/^(define-caller-pattern make-list (form &key (:star form)) :lisp)$/;"	f
make-load-form	slime/xref.lisp	/^(define-caller-pattern make-load-form (form) :lisp2)$/;"	f
make-load-form-saving-slots	slime/xref.lisp	/^(define-caller-pattern make-load-form-saving-slots (form &optional form)$/;"	f
make-lock	slime/swank-abcl.lisp	/^(defimplementation make-lock (&key name)$/;"	f
make-lock	slime/swank-allegro.lisp	/^(defimplementation make-lock (&key name)$/;"	f
make-lock	slime/swank-backend.lisp	/^(definterface make-lock (&key name)$/;"	f
make-lock	slime/swank-lispworks.lisp	/^(defimplementation make-lock (&key name)$/;"	f
make-lock	slime/swank-openmcl.lisp	/^(defimplementation make-lock (&key name)$/;"	f
make-lock	slime/swank-scl.lisp	/^(defimplementation make-lock (&key name)$/;"	f
make-monitoring-encapsulation	slime/metering.lisp	/^(defun make-monitoring-encapsulation (min-args optionals-p)$/;"	f
make-name-in-file-location	slime/swank-cmucl.lisp	/^(defun make-name-in-file-location (file string)$/;"	f
make-name-in-file-location	slime/swank-scl.lisp	/^(defun make-name-in-file-location (file string)$/;"	f
make-op-buffer	practicals-1.0.3/Chapter31/html.lisp	/^(defun make-op-buffer () (make-array 10 :adjustable t :fill-pointer 0))$/;"	f
make-output-function	slime/swank.lisp	/^(defun make-output-function (connection)$/;"	f
make-output-function-for-target	slime/swank.lisp	/^(defun make-output-function-for-target (connection target)$/;"	f
make-output-stream-for-target	slime/swank.lisp	/^(defun make-output-stream-for-target (connection target)$/;"	f
make-package	slime/xref.lisp	/^(define-caller-pattern make-package ((:rest :ignore)) :lisp)$/;"	f
make-pathname	slime/xref.lisp	/^(define-caller-pattern make-pathname ((:star form)) :lisp)$/;"	f
make-playlist-table	practicals-1.0.3/Chapter29/playlist.lisp	/^(defun make-playlist-table ()$/;"	f
make-random-state	slime/xref.lisp	/^(define-caller-pattern make-random-state ((:optional form)) :lisp)$/;"	f
make-recursive-lock	slime/swank-backend.lisp	/^(definterface make-recursive-lock (&key name)$/;"	f
make-rows	practicals-1.0.3/Chapter27/database.lisp	/^(defun make-rows (&optional (size *default-table-size*))$/;"	f
make-schema	practicals-1.0.3/Chapter27/database.lisp	/^(defun make-schema (spec)$/;"	f
make-sequence	slime/xref.lisp	/^(define-caller-pattern make-sequence (form form &key form) :lisp)$/;"	f
make-sharpdot-reader	slime/swank-source-path-parser.lisp	/^(defun make-sharpdot-reader (orig-sharpdot-reader)$/;"	f
make-sigint-handler	slime/swank-lispworks.lisp	/^(defun make-sigint-handler (process)$/;"	f
make-silent-song	practicals-1.0.3/Chapter29/playlist.lisp	/^(defun make-silent-song (title &optional (file *silence-mp3*))$/;"	f
make-slime-input-stream	slime/swank-scl.lisp	/^(defun make-slime-input-stream (input-fn &optional output-stream)$/;"	f
make-slime-output-stream	slime/swank-scl.lisp	/^(defun make-slime-output-stream (output-fn)$/;"	f
make-socket-io-stream	slime/swank-cmucl.lisp	/^(defun make-socket-io-stream (fd buffering external-format)$/;"	f
make-socket-io-stream	slime/swank-ecl.lisp	/^(defun make-socket-io-stream (socket)$/;"	f
make-socket-io-stream	slime/swank-sbcl.lisp	/^(defun make-socket-io-stream (socket external-format buffering)$/;"	f
make-socket-io-stream	slime/swank-scl.lisp	/^(defun make-socket-io-stream (fd external-format buffering)$/;"	f
make-source-location-specification	slime/swank-sbcl.lisp	/^(defun make-source-location-specification (type name source-location)$/;"	f
make-source-recorder	slime/swank-source-path-parser.lisp	/^(defun make-source-recorder (fn source-map)$/;"	f
make-source-recording-readtable	slime/swank-source-path-parser.lisp	/^(defun make-source-recording-readtable (readtable source-map) $/;"	f
make-stream-interactive	slime/swank-abcl.lisp	/^(defimplementation make-stream-interactive (stream)$/;"	f
make-stream-interactive	slime/swank-allegro.lisp	/^(defimplementation make-stream-interactive (stream)$/;"	f
make-stream-interactive	slime/swank-backend.lisp	/^(definterface make-stream-interactive (stream)$/;"	f
make-stream-interactive	slime/swank-lispworks.lisp	/^(defimplementation make-stream-interactive (stream)$/;"	f
make-stream-interactive	slime/swank-openmcl.lisp	/^(defimplementation make-stream-interactive (stream)$/;"	f
make-stream-interactive	slime/swank-scl.lisp	/^(defimplementation make-stream-interactive (stream)$/;"	f
make-string	slime/xref.lisp	/^(define-caller-pattern make-string (form &key (:star form)) :lisp)$/;"	f
make-string-input-stream	slime/xref.lisp	/^(define-caller-pattern make-string-input-stream (form &optional form form) :lisp) $/;"	f
make-string-output-stream	slime/xref.lisp	/^(define-caller-pattern make-string-output-stream (&key (:star form)) :lisp)$/;"	f
make-swank-error	slime/swank.lisp	/^(defun make-swank-error (condition)$/;"	f
make-symbol	slime/xref.lisp	/^(define-caller-pattern make-symbol (form) :lisp)$/;"	f
make-symbols-listing	slime/contrib/swank-fancy-inspector.lisp	/^(defgeneric make-symbols-listing (grouping-kind symbols))$/;"	f
make-symbols-listing	slime/contrib/swank-fancy-inspector.lisp	/^(defmethod make-symbols-listing ((grouping-kind (eql :classification)) symbols)$/;"	f
make-symbols-listing	slime/contrib/swank-fancy-inspector.lisp	/^(defmethod make-symbols-listing ((grouping-kind (eql :symbol)) symbols)$/;"	f
make-synonym-stream	slime/xref.lisp	/^(define-caller-pattern make-synonym-stream (symbol) :lisp)$/;"	f
make-two-way-stream	slime/xref.lisp	/^(define-caller-pattern make-two-way-stream (form form) :lisp)$/;"	f
make-weak-key-hash-table	slime/swank-allegro.lisp	/^(defimplementation make-weak-key-hash-table (&rest args)$/;"	f
make-weak-key-hash-table	slime/swank-backend.lisp	/^(definterface make-weak-key-hash-table (&rest args)$/;"	f
make-weak-key-hash-table	slime/swank-clisp.lisp	/^(defimplementation make-weak-key-hash-table (&rest args)$/;"	f
make-weak-key-hash-table	slime/swank-cmucl.lisp	/^(defimplementation make-weak-key-hash-table (&rest args)$/;"	f
make-weak-key-hash-table	slime/swank-lispworks.lisp	/^(defimplementation make-weak-key-hash-table (&rest args)$/;"	f
make-weak-key-hash-table	slime/swank-openmcl.lisp	/^(defimplementation make-weak-key-hash-table (&rest args)$/;"	f
make-weak-key-hash-table	slime/swank-sbcl.lisp	/^(defimplementation make-weak-key-hash-table (&rest args)  $/;"	f
make-weak-key-hash-table	slime/swank-scl.lisp	/^(defimplementation make-weak-key-hash-table (&rest args)$/;"	f
make-weak-value-hash-table	slime/swank-allegro.lisp	/^(defimplementation make-weak-value-hash-table (&rest args)$/;"	f
make-weak-value-hash-table	slime/swank-backend.lisp	/^(definterface make-weak-value-hash-table (&rest args)$/;"	f
make-weak-value-hash-table	slime/swank-clisp.lisp	/^(defimplementation make-weak-value-hash-table (&rest args)$/;"	f
make-weak-value-hash-table	slime/swank-lispworks.lisp	/^(defimplementation make-weak-value-hash-table (&rest args)$/;"	f
make-weak-value-hash-table	slime/swank-openmcl.lisp	/^(defimplementation make-weak-value-hash-table (&rest args)$/;"	f
make-weak-value-hash-table	slime/swank-sbcl.lisp	/^(defimplementation make-weak-value-hash-table (&rest args)$/;"	f
makelists	test.lisp	/^(defun makelists (ll)$/;"	f
makunbound	slime/xref.lisp	/^(define-caller-pattern makunbound (form) :lisp)$/;"	f
map	slime/xref.lisp	/^(define-caller-pattern map (form fn form (:star form)) :lisp)$/;"	f
map->	onlisp.lisp	/^(defun map-> (fn start test-fn succ-fn)$/;"	f
map-allocated-code-components	slime/swank-cmucl.lisp	/^(defun map-allocated-code-components (spaces fn)$/;"	f
map-allocated-code-components	slime/swank-scl.lisp	/^(defun map-allocated-code-components (spaces fn)$/;"	f
map-backtrace	slime/swank-openmcl.lisp	/^(defun map-backtrace (function &optional$/;"	f
map-caller-code-components	slime/swank-cmucl.lisp	/^(defun map-caller-code-components (function spaces fn)$/;"	f
map-caller-code-components	slime/swank-scl.lisp	/^(defun map-caller-code-components (function spaces fn)$/;"	f
map-char-to-special-char-class	practicals-1.0.3/libraries/cl-ppcre-1.2.3/lexer.lisp	/^(defun map-char-to-special-char-class (chr)$/;"	f
map-code-constants	slime/swank-cmucl.lisp	/^(defun map-code-constants (code fn)$/;"	f
map-code-constants	slime/swank-scl.lisp	/^(defun map-code-constants (code fn)$/;"	f
map-error-database	slime/swank-lispworks.lisp	/^(defun map-error-database (database fn)$/;"	f
map-function-constants	slime/swank-allegro.lisp	/^(defun map-function-constants (function fn depth)$/;"	f
map-if	slime/swank.lisp	/^(defun map-if (test fn &rest lists)$/;"	f
map-into	slime/xref.lisp	/^(define-caller-pattern map-into (form fn (:star form)) :lisp2)$/;"	f
map-rows	practicals-1.0.3/Chapter27/database.lisp	/^(defun map-rows (fn table)$/;"	f
map0-n	onlisp.lisp	/^(defun map0-n (fn n)$/;"	f
map1-n	onlisp.lisp	/^(defun map1-n (fn n)$/;"	f
mapa-b	onlisp.lisp	/^(defun mapa-b (fn a b &optional (step 1))$/;"	f
mapc	slime/xref.lisp	/^(define-caller-pattern mapc (fn form (:star form)) :lisp)$/;"	f
mapcan	slime/xref.lisp	/^(define-caller-pattern mapcan (fn form (:star form)) :lisp)$/;"	f
mapcar	slime/xref.lisp	/^(define-caller-pattern mapcar (fn form (:star form)) :lisp)$/;"	f
mapcars	onlisp.lisp	/^(defun mapcars (fn &rest lsts)$/;"	f
mapcon	slime/xref.lisp	/^(define-caller-pattern mapcon (fn form (:star form)) :lisp)$/;"	f
maphash	slime/xref.lisp	/^(define-caller-pattern maphash (fn form) :lisp)$/;"	f
mapl	slime/xref.lisp	/^(define-caller-pattern mapl (fn form (:star form)) :lisp)$/;"	f
maplist	slime/xref.lisp	/^(define-caller-pattern maplist (fn form (:star form)) :lisp)$/;"	f
mappend	onlisp.lisp	/^(defun mappend (fn &rest lsts)$/;"	f
mappend	paip/aip_ch1.lisp	/^(defun mappend (fn list)$/;"	f
mask-field	slime/xref.lisp	/^(define-caller-pattern mask-field (form form) :lisp)$/;"	f
matching	practicals-1.0.3/Chapter27/database.lisp	/^(defun matching (table &rest names-and-values)$/;"	f
matching-symbols	slime/swank.lisp	/^(defun matching-symbols (package external test)$/;"	f
mavg	chiglug-macros/presentation.lisp	/^(defmacro mavg (&rest args)$/;"	f
max	slime/xref.lisp	/^(define-caller-pattern max (form (:star form)) :lisp)$/;"	f
maybe-accumulate	practicals-1.0.3/libraries/cl-ppcre-1.2.3/convert.lisp	/^(defun maybe-accumulate (str)$/;"	f
maybe-call-with-io-redirection	slime/swank.lisp	/^(defun maybe-call-with-io-redirection (connection fun)$/;"	f
maybe-coerce-to-simple-string	practicals-1.0.3/libraries/cl-ppcre-1.2.3/util.lisp	/^(defmacro maybe-coerce-to-simple-string (string)$/;"	f
maybe-make-definition	slime/swank-cmucl.lisp	/^(defun maybe-make-definition (function kind name)$/;"	f
maybe-make-definition	slime/swank-scl.lisp	/^(defun maybe-make-definition (function kind name)$/;"	f
maybe-method-location	slime/swank-openmcl.lisp	/^(defun maybe-method-location (type)$/;"	f
maybe-move-to-next-song	practicals-1.0.3/Chapter28/song-source.lisp	/^(defgeneric maybe-move-to-next-song (song source)$/;"	f
maybe-move-to-next-song	practicals-1.0.3/Chapter28/song-source.lisp	/^(defmethod maybe-move-to-next-song (song (source simple-song-queue))$/;"	f
maybe-move-to-next-song	practicals-1.0.3/Chapter29/playlist.lisp	/^(defmethod maybe-move-to-next-song (song (playlist playlist))$/;"	f
maybe-output	slime/sbcl-pprint-patch.lisp	/^(defun maybe-output (stream force-newlines-p)$/;"	f
maybe-parse-flags	practicals-1.0.3/libraries/cl-ppcre-1.2.3/lexer.lisp	/^(defun maybe-parse-flags (lexer)$/;"	f
maybe-redirect-global-io	slime/swank.lisp	/^(defun maybe-redirect-global-io (connection)$/;"	f
maybe-split-repetition	practicals-1.0.3/libraries/cl-ppcre-1.2.3/convert.lisp	/^(defun maybe-split-repetition (regex$/;"	f
maybecall	slime/contrib/swank-arglists.lisp	/^(defun maybecall (bool fn &rest args)$/;"	f
mcase	slime/contrib/swank-kawa.scm	/^(define-syntax mcase$/;"	f
measure-time-interval	slime/swank.lisp	/^(defun measure-time-interval (fn)$/;"	f
member	slime/xref.lisp	/^(define-caller-pattern member (form form &key (:star form)) :lisp)$/;"	f
member-if	slime/xref.lisp	/^(define-caller-pattern member-if (fn form &key (:star form)) :lisp)$/;"	f
member-if-not	slime/xref.lisp	/^(define-caller-pattern member-if-not (fn form &key (:star form)) :lisp)$/;"	f
memoize	onlisp.lisp	/^(defun memoize (fn)$/;"	f
menu-choices-for-presentation	slime/contrib/swank-presentations.lisp	/^(defgeneric menu-choices-for-presentation (object)$/;"	f
menu-choices-for-presentation	slime/contrib/swank-presentations.lisp	/^(defmethod menu-choices-for-presentation ((ob function))$/;"	f
menu-choices-for-presentation	slime/contrib/swank-presentations.lisp	/^(defmethod menu-choices-for-presentation ((ob pathname))$/;"	f
menu-choices-for-presentation-id	slime/contrib/swank-presentations.lisp	/^(defun menu-choices-for-presentation-id (id)$/;"	f
merge	slime/xref.lisp	/^(define-caller-pattern merge (form form form fn &key (:star form)) :lisp)$/;"	f
merge-hash	practicals-1.0.3/libraries/cl-ppcre-1.2.3/util.lisp	/^(defun merge-hash (hash1 hash2)$/;"	f
merge-inverted-hash	practicals-1.0.3/libraries/cl-ppcre-1.2.3/util.lisp	/^(defun merge-inverted-hash (hash1 hash2)$/;"	f
merge-pathnames	slime/xref.lisp	/^(define-caller-pattern merge-pathnames ((:star form)) :lisp)$/;"	f
merged-directory	slime/swank.lisp	/^(defun merged-directory (dirname defaults)$/;"	f
metering-functions	slime/metering.lisp	/^(defstruct metering-functions$/;"	f
method-combination-error	slime/xref.lisp	/^(define-caller-pattern method-combination-error (form (:star form)) :lisp2)$/;"	f
method-definition	slime/swank-cmucl.lisp	/^(defun method-definition (method)$/;"	f
method-definition	slime/swank-scl.lisp	/^(defun method-definition (method)$/;"	f
method-dspec	slime/swank-cmucl.lisp	/^(defun method-dspec (method)$/;"	f
method-dspec	slime/swank-scl.lisp	/^(defun method-dspec (method)$/;"	f
method-for-inspect-value	slime/contrib/swank-fancy-inspector.lisp	/^(defun method-for-inspect-value (method)$/;"	f
method-function	slime/swank-abcl.lisp	/^(defun method-function (method)$/;"	f
method-generic-function	slime/swank-abcl.lisp	/^(defun method-generic-function (method)$/;"	f
method-location	slime/swank-cmucl.lisp	/^(defun method-location (method)$/;"	f
method-location	slime/swank-scl.lisp	/^(defun method-location (method)$/;"	f
method-qualifiers	slime/xref.lisp	/^(define-caller-pattern method-qualifiers (fn) :lisp2)$/;"	f
method-specializers-for-inspect	slime/contrib/swank-fancy-inspector.lisp	/^(defun method-specializers-for-inspect (method)$/;"	f
methods-by-applicability	slime/contrib/swank-fancy-inspector.lisp	/^(defun methods-by-applicability (gf)$/;"	f
methods-keywords	slime/contrib/swank-arglists.lisp	/^(defun methods-keywords (methods)$/;"	f
mif	slime/contrib/swank-kawa.scm	/^(define-syntax mif$/;"	f
mimic-key-bindings	slime/contrib/slime-fuzzy.el	/^(defun mimic-key-bindings (from-keymap to-keymap bindings-or-operation operation)$/;"	f
min	slime/xref.lisp	/^(define-caller-pattern min (form (:star form)) :lisp)$/;"	f
minusp	slime/xref.lisp	/^(define-caller-pattern minusp (form) :lisp)$/;"	f
mismatch	slime/xref.lisp	/^(define-caller-pattern mismatch (form form &key (:star form)) :lisp)$/;"	f
missed-ham-p	practicals-1.0.3/Chapter23/spam.lisp	/^(defun missed-ham-p (result)$/;"	f
missed-spam-p	practicals-1.0.3/Chapter23/spam.lisp	/^(defun missed-spam-p (result)$/;"	f
missing-arg	slime/swank.lisp	/^(defun missing-arg ()$/;"	f
mit-scheme	slime/contrib/swank-mit-scheme.scm	/^(defun mit-scheme ()$/;"	f
mit-scheme-init	slime/contrib/swank-mit-scheme.scm	/^(defun mit-scheme-init (file encoding)$/;"	f
mklist	practicals-1.0.3/Chapter24/binary-data.lisp	/^(defun mklist (x) (if (listp x) x (list x)))$/;"	f
mklist	practicals-1.0.3/Chapter27/database.lisp	/^(defun mklist (thing)$/;"	f
mkstr	onlisp.lisp	/^(defun mkstr (&rest args)$/;"	f
mlet	slime/contrib/swank-kawa.scm	/^(define-syntax mlet$/;"	f
mlet*	slime/contrib/swank-kawa.scm	/^(define-syntax mlet* $/;"	f
mod	slime/xref.lisp	/^(define-caller-pattern mod (form form) :lisp)$/;"	f
module-canditates	slime/swank.lisp	/^(defun module-canditates (name dir)$/;"	f
module-filename	slime/swank.lisp	/^(defun module-filename (module)$/;"	f
monitor-info-values	slime/metering.lisp	/^(defun monitor-info-values (name &optional (nested :exclusive) warn)$/;"	f
monitoring-encapsulate	slime/metering.lisp	/^(defun monitoring-encapsulate (name &optional warn)$/;"	f
monitoring-unencapsulate	slime/metering.lisp	/^(defun monitoring-unencapsulate (name &optional warn)$/;"	f
monolist	test.lisp	/^(defun monolist (ll)$/;"	f
mop	slime/swank.lisp	/^(defslimefun mop (type symbol-name)$/;"	f
mop-helper	slime/swank.lisp	/^(defun mop-helper (class-name fn)$/;"	f
most	onlisp.lisp	/^(defun most (fn lst)$/;"	f
most-negative-double-float	slime/xref.lisp	/^(define-variable-pattern most-negative-double-float :lisp)$/;"	f
most-negative-fixnum	slime/xref.lisp	/^(define-variable-pattern most-negative-fixnum :lisp)$/;"	f
most-negative-long-float	slime/xref.lisp	/^(define-variable-pattern most-negative-long-float :lisp)$/;"	f
most-negative-short-float	slime/xref.lisp	/^(define-variable-pattern most-negative-short-float :lisp)$/;"	f
most-negative-single-float	slime/xref.lisp	/^(define-variable-pattern most-negative-single-float :lisp)$/;"	f
most-positive-double-float	slime/xref.lisp	/^(define-variable-pattern most-positive-double-float :lisp)$/;"	f
most-positive-fixnum	slime/xref.lisp	/^(define-variable-pattern most-positive-fixnum :lisp)$/;"	f
most-positive-long-float	slime/xref.lisp	/^(define-variable-pattern most-positive-long-float :lisp)$/;"	f
most-positive-short-float	slime/xref.lisp	/^(define-variable-pattern most-positive-short-float :lisp)$/;"	f
most-positive-single-float	slime/xref.lisp	/^(define-variable-pattern most-positive-single-float :lisp)$/;"	f
mostn	onlisp.lisp	/^(defun mostn (fn lst)$/;"	f
mp3-p	practicals-1.0.3/Chapter25/id3v2.lisp	/^(defun mp3-p (file)$/;"	f
muffle-warning	slime/xref.lisp	/^(define-caller-pattern muffle-warning (&optional form) :lisp2)$/;"	f
multi-line-mode-p	practicals-1.0.3/libraries/cl-ppcre-1.2.3/convert.lisp	/^(defmacro multi-line-mode-p (flags)$/;"	f
multiple-value-bind	slime/xref.lisp	/^(define-caller-pattern multiple-value-bind$/;"	f
multiple-value-call	slime/xref.lisp	/^(define-caller-pattern multiple-value-call (fn (:star form)) :lisp)$/;"	f
multiple-value-list	slime/xref.lisp	/^(define-caller-pattern multiple-value-list (form) :lisp)$/;"	f
multiple-value-or	slime/contrib/swank-arglists.lisp	/^(defmacro multiple-value-or (&rest forms)$/;"	f
multiple-value-prog1	slime/xref.lisp	/^(define-caller-pattern multiple-value-prog1 (form (:star form)) :lisp)$/;"	f
multiple-value-setq	slime/xref.lisp	/^(define-caller-pattern multiple-value-setq (((:star var)) form) :lisp)$/;"	f
multiple-values-limit	slime/xref.lisp	/^(define-variable-pattern multiple-values-limit :lisp)$/;"	f
mv-function-end-breakpoint-values	slime/swank-cmucl.lisp	/^(defun mv-function-end-breakpoint-values (sigcontext)$/;"	f
mv-function-end-breakpoint-values	slime/swank-scl.lisp	/^(defun mv-function-end-breakpoint-values (sigcontext)$/;"	f
my-if	chiglug-macros/power-of-lisp-macros.lisp	/^(defmacro my-if (test-form then-form else-form)$/;"	f
my-if	chiglug-macros/power-of-lisp-macros.lisp	/^(defun my-if (test-form then-form else-form)$/;"	f
name-char	slime/xref.lisp	/^(define-caller-pattern name-char (form) :lisp)$/;"	f
named-by-gensym-p	slime/swank-corman.lisp	/^(defun named-by-gensym-p (c)$/;"	f
namestring	slime/xref.lisp	/^(define-caller-pattern namestring (form) :lisp)$/;"	f
narrowing	slime/slime.el	/^(def-slime-test narrowing$/;"	f
nbutlast	slime/xref.lisp	/^(define-caller-pattern nbutlast (form (:optional form)) :lisp)$/;"	f
nconc	slime/xref.lisp	/^(define-caller-pattern nconc ((:star form)) :lisp)$/;"	f
need-full-indentation-update-p	slime/swank.lisp	/^(defun need-full-indentation-update-p (connection)$/;"	f
netcat	slime/contrib/swank-mit-scheme.scm	/^(define (netcat port)$/;"	f
netcat-accept	slime/contrib/swank-mit-scheme.scm	/^(define (netcat-accept nc)$/;"	f
network-error	slime/swank-backend.lisp	/^(define-condition network-error (simple-error) ())$/;"	f
new-class-all-slots	practicals-1.0.3/Chapter24/binary-data.lisp	/^(defun new-class-all-slots (slots superclasses)$/;"	f
new-double-quote-reader	chiglug-macros/power-of-lisp-macros.lisp	/^(defun new-double-quote-reader (stream macro-char)$/;"	f
newerat	nifty_funs.lisp	/^(defun newerat (n)$/;"	f
newline	practicals-1.0.3/Chapter31/html.lisp	/^(defgeneric newline (processor))$/;"	f
newline	practicals-1.0.3/Chapter31/html.lisp	/^(defmethod newline ((compiler html-compiler))$/;"	f
newline	practicals-1.0.3/Chapter31/html.lisp	/^(defmethod newline ((pp html-pretty-printer))$/;"	f
newline-skipper	practicals-1.0.3/libraries/cl-ppcre-1.2.3/scanner.lisp	/^(defun newline-skipper (start-pos)$/;"	f
next-char	practicals-1.0.3/libraries/cl-ppcre-1.2.3/lexer.lisp	/^(defun next-char (lexer)$/;"	f
next-char-non-extended	practicals-1.0.3/libraries/cl-ppcre-1.2.3/lexer.lisp	/^(defun next-char-non-extended (lexer)$/;"	f
next-code-locations	slime/swank-cmucl.lisp	/^(defun next-code-locations (frame code-location)$/;"	f
next-code-locations	slime/swank-scl.lisp	/^(defun next-code-locations (frame code-location)$/;"	f
next-frame	slime/swank-allegro.lisp	/^(defun next-frame (frame)$/;"	f
next-method-p	slime/xref.lisp	/^(define-caller-pattern next-method-p () :lisp2)$/;"	f
next-prime	macro.lisp	/^(defun next-prime (n)$/;"	f
next-venv	slime/swank-clisp.lisp	/^(defun next-venv (venv) (svref venv (1- (length venv))))$/;"	f
nil	slime/contrib/swank-mit-scheme.scm	/^(define nil '())$/;"	f
nil	slime/slime.el	/^(defslime-repl-shortcut nil  ("restart-inferior-lisp")$/;"	f
nil	slime/slime.el	/^(defslime-repl-shortcut nil ("change-directory" "!d" "cd")$/;"	f
nil	slime/slime.el	/^(defslime-repl-shortcut nil ("change-package" "!p" "in-package" "in")$/;"	f
nil	slime/slime.el	/^(defslime-repl-shortcut nil ("pwd")$/;"	f
nil	slime/xref.lisp	/^(define-variable-pattern nil :lisp)$/;"	f
nintersection	slime/xref.lisp	/^(define-caller-pattern nintersection (form form &key (:star form)) :lisp)$/;"	f
ninth	slime/xref.lisp	/^(define-caller-pattern ninth (form) :lisp)$/;"	f
no-applicable-method	slime/xref.lisp	/^(define-caller-pattern no-applicable-method (fn (:star form)) :lisp2)$/;"	f
no-next-method	slime/xref.lisp	/^(define-caller-pattern no-next-method (fn (:star form)) :lisp2)$/;"	f
non-greedy-constant-length-closure	practicals-1.0.3/libraries/cl-ppcre-1.2.3/repetition-closures.lisp	/^(defmacro non-greedy-constant-length-closure (check-curr-pos)$/;"	f
non-terminated-type	practicals-1.0.3/Chapter25/id3v2.lisp	/^(defun non-terminated-type (encoding)$/;"	f
normalize-for-column	practicals-1.0.3/Chapter27/database.lisp	/^(defun normalize-for-column (value column)$/;"	f
normalize-param	practicals-1.0.3/Chapter26/html-infrastructure.lisp	/^(defun normalize-param (param)$/;"	f
normalize-row	practicals-1.0.3/Chapter27/database.lisp	/^(defun normalize-row (names-and-values schema)$/;"	f
normalize-slot-spec	practicals-1.0.3/Chapter24/binary-data.lisp	/^(defun normalize-slot-spec (spec)$/;"	f
normalize-var-list	practicals-1.0.3/libraries/cl-ppcre-1.2.3/util.lisp	/^(defun normalize-var-list (var-list)$/;"	f
not	slime/xref.lisp	/^(define-caller-pattern not (form) :lisp)$/;"	f
not-nullable	practicals-1.0.3/Chapter27/database.lisp	/^(defun not-nullable (value column)$/;"	f
notany	slime/xref.lisp	/^(define-caller-pattern notany (fn form (:star form)) :lisp)$/;"	f
note-error-location	slime/swank-cmucl.lisp	/^(defun note-error-location ()$/;"	f
note-error-location	slime/swank-scl.lisp	/^(defun note-error-location ()$/;"	f
notevery	slime/xref.lisp	/^(define-caller-pattern notevery (fn form (:star form)) :lisp)$/;"	f
notify-backend-of-connection	slime/swank.lisp	/^(defun notify-backend-of-connection (connection)$/;"	f
noun-phrase	paip/aip_ch2.lisp	/^(defun noun-phrase ()$/;"	f
nreconc	slime/xref.lisp	/^(define-caller-pattern nreconc (form form) :lisp)$/;"	f
nreverse	slime/xref.lisp	/^(define-caller-pattern nreverse (form) :lisp)$/;"	f
nreversef	slime/contrib/swank-arglists.lisp	/^(define-modify-macro nreversef () nreverse "Reverse the list in PLACE.")$/;"	f
nset-difference	slime/xref.lisp	/^(define-caller-pattern nset-difference (form form &key (:star form)) :lisp)$/;"	f
nset-exclusive-or	slime/xref.lisp	/^(define-caller-pattern nset-exclusive-or (form form &key (:star form)) :lisp)$/;"	f
nshuffle-vector	practicals-1.0.3/Chapter23/spam.lisp	/^(defun nshuffle-vector (vector)$/;"	f
nshuffle-vector	practicals-1.0.3/Chapter27/database.lisp	/^(defun nshuffle-vector (vector)$/;"	f
nstring-capitalize	slime/xref.lisp	/^(define-caller-pattern nstring-capitalize (form &key (:star form)) :lisp)$/;"	f
nstring-downcase	slime/xref.lisp	/^(define-caller-pattern nstring-downcase (form &key (:star form)) :lisp)$/;"	f
nstring-upcase	slime/xref.lisp	/^(define-caller-pattern nstring-upcase (form &key (:star form)) :lisp)$/;"	f
nsublis	slime/xref.lisp	/^(define-caller-pattern nsublis (form form &key (:star form)) :lisp)$/;"	f
nsubseq	practicals-1.0.3/libraries/cl-ppcre-1.2.3/util.lisp	/^(defun nsubseq (sequence start &optional (end (length sequence)))$/;"	f
nsubst	slime/xref.lisp	/^(define-caller-pattern nsubst (form form form &key (:star form)) :lisp)$/;"	f
nsubst-if	slime/xref.lisp	/^(define-caller-pattern nsubst-if (form fn form &key (:star form)) :lisp)$/;"	f
nsubst-if-not	slime/xref.lisp	/^(define-caller-pattern nsubst-if-not (form fn form &key (:star form)) :lisp)$/;"	f
nsubstitute	slime/xref.lisp	/^(define-caller-pattern nsubstitute (form form form &key (:star form)) :lisp)$/;"	f
nsubstitute-if	slime/xref.lisp	/^(define-caller-pattern nsubstitute-if (form fn form &key (:star form)) :lisp)$/;"	f
nsubstitute-if-not	slime/xref.lisp	/^(define-caller-pattern nsubstitute-if-not (form fn form &key (:star form)) :lisp)$/;"	f
nth	slime/xref.lisp	/^(define-caller-pattern nth (form form) :lisp)$/;"	f
nth-frame	slime/swank-abcl.lisp	/^(defun nth-frame (index)$/;"	f
nth-frame	slime/swank-allegro.lisp	/^(defun nth-frame (index)$/;"	f
nth-frame	slime/swank-clisp.lisp	/^(defun nth-frame (index)$/;"	f
nth-frame	slime/swank-cmucl.lisp	/^(defun nth-frame (index)$/;"	f
nth-frame	slime/swank-lispworks.lisp	/^(defun nth-frame (index)$/;"	f
nth-frame	slime/swank-sbcl.lisp	/^(defun nth-frame (index)$/;"	f
nth-frame	slime/swank-scl.lisp	/^(defun nth-frame (index)$/;"	f
nth-next-frame	slime/swank-lispworks.lisp	/^(defun nth-next-frame (frame n)$/;"	f
nth-restart	slime/swank.lisp	/^(defun nth-restart (index)$/;"	f
nth-row	practicals-1.0.3/Chapter27/database.lisp	/^(defun nth-row (n table)$/;"	f
nth-thread	slime/swank.lisp	/^(defun nth-thread (index)$/;"	f
nth-value	slime/xref.lisp	/^(define-caller-pattern nth-value (form form) :lisp2)$/;"	f
nthcdr	slime/xref.lisp	/^(define-caller-pattern nthcdr (form form) :lisp)$/;"	f
null	slime/xref.lisp	/^(define-caller-pattern null (form) :lisp)$/;"	f
number	slime/xref.lisp	/^(define-pattern-substitution number  (:test #'numberp))$/;"	f
numberp	slime/xref.lisp	/^(define-caller-pattern numberp (form) :lisp)$/;"	f
numbers	chiglug-macros/lazy-eval.lisp	/^(defun numbers (&optional (start 1) (end nil))$/;"	f
numerator	slime/xref.lisp	/^(define-caller-pattern numerator (form) :lisp)$/;"	f
nunion	slime/xref.lisp	/^(define-caller-pattern nunion (form form &key (:star form)) :lisp)$/;"	f
obj->base64	practicals-1.0.3/Chapter29/mp3-browser.lisp	/^(defun obj->base64 (obj)$/;"	f
oddp	slime/xref.lisp	/^(define-caller-pattern oddp (form) :lisp)$/;"	f
once-only	macro.lisp	/^(defmacro once-only ((&rest names) &body body)$/;"	f
once-only	practicals-1.0.3/Chapter08/macro-utilities.lisp	/^(defmacro once-only ((&rest names) &body body)$/;"	f
one+	chiglug-macros/power-of-lisp-macros.lisp	/^(defmacro one+ (x)$/;"	f
one+	chiglug-macros/power-of-lisp-macros.lisp	/^(defun one+ (x)$/;"	f
one-of	paip/aip_ch2.lisp	/^(defun one-of (set)$/;"	f
op	paip/aip_ch4.lisp	/^(defstruct op "An operation"$/;"	f
op->code	practicals-1.0.3/Chapter31/html.lisp	/^(defgeneric op->code (op &rest operands))$/;"	f
op->code	practicals-1.0.3/Chapter31/html.lisp	/^(defmethod op->code ((op (eql :embed-code)) &rest operands)$/;"	f
op->code	practicals-1.0.3/Chapter31/html.lisp	/^(defmethod op->code ((op (eql :embed-value)) &rest operands)$/;"	f
op->code	practicals-1.0.3/Chapter31/html.lisp	/^(defmethod op->code ((op (eql :freshline)) &rest operands)$/;"	f
op->code	practicals-1.0.3/Chapter31/html.lisp	/^(defmethod op->code ((op (eql :indent)) &rest operands)$/;"	f
op->code	practicals-1.0.3/Chapter31/html.lisp	/^(defmethod op->code ((op (eql :newline)) &rest operands)$/;"	f
op->code	practicals-1.0.3/Chapter31/html.lisp	/^(defmethod op->code ((op (eql :raw-string)) &rest operands)$/;"	f
op->code	practicals-1.0.3/Chapter31/html.lisp	/^(defmethod op->code ((op (eql :toggle-indenting)) &rest operands)$/;"	f
op->code	practicals-1.0.3/Chapter31/html.lisp	/^(defmethod op->code ((op (eql :unindent)) &rest operands)$/;"	f
open	slime/xref.lisp	/^(define-caller-pattern open (form &key (:star form)) :lisp)$/;"	f
open-dedicated-output-stream	slime/swank.lisp	/^(defun open-dedicated-output-stream (socket-io)$/;"	f
open-stream-p	slime/xref.lisp	/^(define-caller-pattern open-stream-p (form) :lisp2)$/;"	f
open-streams	slime/swank.lisp	/^(defun open-streams (connection)$/;"	f
openmcl-set-debug-switches	slime/swank-openmcl.lisp	/^(defun openmcl-set-debug-switches ()$/;"	f
operate-on-system	slime/contrib/swank-asdf.lisp	/^(defun operate-on-system (system-name operation-name &rest keyword-args)$/;"	f
operate-on-system-for-emacs	slime/contrib/swank-asdf.lisp	/^(defslimefun operate-on-system-for-emacs (system-name operation &rest keywords)$/;"	f
operator-arglist	slime/contrib/swank-kawa.scm	/^(defslimefun operator-arglist (#!rest y) '())$/;"	f
operator-arglist	slime/swank.lisp	/^(defslimefun operator-arglist (name package)$/;"	f
optimize-static-output	practicals-1.0.3/Chapter31/html.lisp	/^(defun optimize-static-output (ops)$/;"	f
optional	practicals-1.0.3/Chapter25/id3v2.lisp	/^(define-binary-type optional (type if)$/;"	f
or	slime/xref.lisp	/^(define-caller-pattern or ((:star form)) :lisp)$/;"	f
order	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<h4><a name="order" class=none>Alternations don't always work from left to right<\/a><\/h4>$/;"	a
order-playlist	practicals-1.0.3/Chapter29/playlist.lisp	/^(defun order-playlist (playlist)$/;"	f
other	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<h4><a name="other" class=none>Other performance issues<\/a><\/h4>$/;"	a
output-buffer-with-annotations	slime/sbcl-pprint-patch.lisp	/^(defun output-buffer-with-annotations (stream end)$/;"	f
output-line	slime/sbcl-pprint-patch.lisp	/^(defun output-line (stream until)$/;"	f
output-partial-line	slime/sbcl-pprint-patch.lisp	/^(defun output-partial-line (stream)$/;"	f
output-stream-p	slime/xref.lisp	/^(define-caller-pattern output-stream-p (form) :lisp)$/;"	f
overhead-iterations	slime/metering.lisp	/^(defconstant overhead-iterations 5000$/;"	f
p	chiglug-macros/power-of-lisp-macros.lisp	/^(define-html-tag p align)$/;"	f
p-12	project-euler.lisp	/^(defun p-12 (num-div)$/;"	f
p-3	project-euler.lisp	/^(defun p-3 (n)$/;"	f
p2	project-euler.lisp	/^(defun p2 (n)$/;"	f
package-error-package	slime/xref.lisp	/^(define-caller-pattern package-error-package (form) :lisp2)$/;"	f
package-lookup	slime/contrib/swank-mit-scheme.scm	/^(define (package-lookup package name)$/;"	f
package-name	slime/xref.lisp	/^(define-caller-pattern package-name ((:rest :ignore)) :lisp)$/;"	f
package-names	slime/swank.lisp	/^(defun package-names (package)$/;"	f
package-nicknames	slime/xref.lisp	/^(define-caller-pattern package-nicknames ((:rest :ignore)) :lisp)$/;"	f
package-shadowing-symbols	slime/xref.lisp	/^(define-caller-pattern package-shadowing-symbols ((:rest :ignore)) :lisp)$/;"	f
package-string-for-prompt	slime/swank.lisp	/^(defun package-string-for-prompt (package)$/;"	f
package-updating	slime/slime.el	/^(def-slime-test package-updating$/;"	f
package-use-list	slime/xref.lisp	/^(define-caller-pattern package-use-list ((:rest :ignore)) :lisp)$/;"	f
package-used-by-list	slime/xref.lisp	/^(define-caller-pattern package-used-by-list ((:rest :ignore)) :lisp)$/;"	f
packagep	slime/xref.lisp	/^(define-caller-pattern packagep (form) :lisp)$/;"	f
packing	slime/contrib/swank-kawa.scm	/^(define-syntax packing$/;"	f
pairlis	slime/xref.lisp	/^(define-caller-pattern pairlis (form form (:optional form)) :lisp)$/;"	f
palindromep	nifty_funs.lisp	/^(defun palindromep (string)$/;"	f
pandigital	nifty_funs.lisp	/^(defun pandigital (n digits)$/;"	f
paragraph-element-p	practicals-1.0.3/Chapter31/html.lisp	/^(defun paragraph-element-p (tag) (find tag *paragraph-elements*))$/;"	f
param-binding	practicals-1.0.3/Chapter26/html-infrastructure.lisp	/^(defun param-binding (function-name request param)$/;"	f
param-bindings	practicals-1.0.3/Chapter26/html-infrastructure.lisp	/^(defun param-bindings (function-name request params)$/;"	f
parent-of-type	practicals-1.0.3/Chapter24/binary-data.lisp	/^(defun parent-of-type (type)$/;"	f
parse-changelog	slime/contrib/swank-motd.lisp	/^(defun parse-changelog (changelog-pathname)$/;"	f
parse-completion-arguments	slime/contrib/swank-c-p-c.lisp	/^(defun parse-completion-arguments (string default-package-name)$/;"	f
parse-cons-form	practicals-1.0.3/Chapter31/html.lisp	/^(defun parse-cons-form (sexp)$/;"	f
parse-explicit-attributes-sexp	practicals-1.0.3/Chapter31/html.lisp	/^(defun parse-explicit-attributes-sexp (sexp)$/;"	f
parse-first-valid-form-spec	slime/contrib/swank-arglists.lisp	/^(defun parse-first-valid-form-spec (raw-specs &optional reader)$/;"	f
parse-form-spec	slime/contrib/swank-arglists.lisp	/^(defun parse-form-spec (raw-spec &optional reader)$/;"	f
parse-fspec	slime/swank-lispworks.lisp	/^(defun parse-fspec (fspec)$/;"	f
parse-html-macro-lambda-list	practicals-1.0.3/Chapter31/html.lisp	/^(defun parse-html-macro-lambda-list (args)$/;"	f
parse-implicit-attributes-sexp	practicals-1.0.3/Chapter31/html.lisp	/^(defun parse-implicit-attributes-sexp (sexp)$/;"	f
parse-integer	slime/xref.lisp	/^(define-caller-pattern parse-integer (form &rest :ignore) :lisp)$/;"	f
parse-macro	slime/xref.lisp	/^(define-caller-pattern parse-macro (name lambda-list form) :lisp2)$/;"	f
parse-namestring	slime/xref.lisp	/^(define-caller-pattern parse-namestring ((:star form)) :lisp)$/;"	f
parse-package	slime/swank.lisp	/^(defun parse-package (string)$/;"	f
parse-selector	practicals-1.0.3/Chapter31/css.lisp	/^(defun parse-selector (selector)$/;"	f
parse-string	practicals-1.0.3/libraries/cl-ppcre-1.2.3/parser.lisp	/^(defun parse-string (string)$/;"	f
parse-symbol	slime/swank.lisp	/^(defun parse-symbol (string &optional (package *package*))$/;"	f
parse-symbol-or-lose	slime/swank.lisp	/^(defun parse-symbol-or-lose (string &optional (package *package*))$/;"	f
parse-track	practicals-1.0.3/Chapter27/mp3-database.lisp	/^(defun parse-track (track)$/;"	f
parse-tree-synonym	practicals-1.0.3/libraries/cl-ppcre-1.2.3/api.lisp	/^(defun parse-tree-synonym (symbol)$/;"	f
parse-tree-synonym	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<br><a class="none" name="parse-tree-synonym"><b>parse-tree-synonym<\/b> <i>symbol<\/i> =&gt; <i>parse-tree<\/i>$/;"	a
parse-triangle	project-euler.lisp	/^(defun parse-triangle (filepath)$/;"	f
parse-year	practicals-1.0.3/Chapter27/mp3-database.lisp	/^(defun parse-year (year)$/;"	f
part-k-n	nifty_funs.lisp	/^(defun part-k-n (k n)$/;"	f
part-of-set	practicals-1.0.3/Chapter25/id3v2.lisp	/^(defun part-of-set (id3) (get-text-info id3 "TPA" "TPOS"))$/;"	f
pathname	slime/xref.lisp	/^(define-caller-pattern pathname (form) :lisp)$/;"	f
pathname-as-directory	practicals-1.0.3/Chapter15/pathnames.lisp	/^(defun pathname-as-directory (name)$/;"	f
pathname-as-file	practicals-1.0.3/Chapter15/pathnames.lisp	/^(defun pathname-as-file (name)$/;"	f
pathname-device	slime/xref.lisp	/^(define-caller-pattern pathname-device (form) :lisp)$/;"	f
pathname-directory	slime/xref.lisp	/^(define-caller-pattern pathname-directory (form) :lisp)$/;"	f
pathname-host	slime/xref.lisp	/^(define-caller-pattern pathname-host (form) :lisp)$/;"	f
pathname-match-p	slime/xref.lisp	/^(define-caller-pattern pathname-match-p (form form) :lisp2)$/;"	f
pathname-name	slime/xref.lisp	/^(define-caller-pattern pathname-name (form) :lisp)$/;"	f
pathname-type	slime/xref.lisp	/^(define-caller-pattern pathname-type (form) :lisp)$/;"	f
pathname-version	slime/xref.lisp	/^(define-caller-pattern pathname-version (form) :lisp)$/;"	f
pathnamep	slime/xref.lisp	/^(define-caller-pattern pathnamep (form) :lisp)$/;"	f
pattern-caller-type	slime/xref.lisp	/^(defsetf pattern-caller-type (name) (value)$/;"	f
pattern-caller-type	slime/xref.lisp	/^(defun pattern-caller-type (name)$/;"	f
peek-char	slime/xref.lisp	/^(define-caller-pattern peek-char (&optional form form form form) :lisp)$/;"	f
perform-indentation-update	slime/swank.lisp	/^(defun perform-indentation-update (connection force)$/;"	f
performance	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<br>&nbsp;<br><h3><a name="performance" class=none>Performance<\/a><\/h3>$/;"	a
perl	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<br>&nbsp;<br><h3><a name="perl" class=none>Compatibility with Perl<\/a><\/h3>$/;"	a
permutations	nifty_funs.lisp	/^(defun permutations (list)$/;"	f
phase	slime/xref.lisp	/^(define-caller-pattern phase (form) :lisp)$/;"	f
pi	slime/xref.lisp	/^(define-variable-pattern pi :lisp)$/;"	f
pi-sum	mit2a.lisp	/^(defun pi-sum (a b)$/;"	f
pick-square	sudoku/sudoku.lisp	/^(defun pick-square (x y)$/;"	f
play-current	practicals-1.0.3/Chapter28/shoutcast.lisp	/^(defun play-current (out song-source next-metadata metadata-interval)$/;"	f
play-songs	practicals-1.0.3/Chapter28/shoutcast.lisp	/^(defun play-songs (stream song-source metadata-interval)$/;"	f
playlist	practicals-1.0.3/Chapter29/mp3-browser.lisp	/^(define-url-function playlist $/;"	f
playlist	practicals-1.0.3/Chapter29/playlist.lisp	/^(defclass playlist ()$/;"	f
playlist-button	practicals-1.0.3/Chapter29/mp3-browser.lisp	/^(defun playlist-button (action argument new-value current-value)$/;"	f
playlist-id	practicals-1.0.3/Chapter29/playlist.lisp	/^(defun playlist-id (request)$/;"	f
playlist-repeat-button	practicals-1.0.3/Chapter29/mp3-browser.lisp	/^(defun playlist-repeat-button (repeat current-repeat)$/;"	f
playlist-shuffle-button	practicals-1.0.3/Chapter29/mp3-browser.lisp	/^(defun playlist-shuffle-button (shuffle current-shuffle)$/;"	f
playlist-toolbar	practicals-1.0.3/Chapter29/mp3-browser.lisp	/^(defun playlist-toolbar (playlist)$/;"	f
plusp	slime/xref.lisp	/^(define-caller-pattern plusp (form) :lisp)$/;"	f
poly	test.lisp	/^(defun poly (list x)$/;"	f
polyfun	test.lisp	/^(defun polyfun (p)$/;"	f
polynomial	test.lisp	/^(defmacro polynomial (list x)$/;"	f
pop	slime/xref.lisp	/^(define-caller-pattern pop (form) :lisp)$/;"	f
position	slime/xref.lisp	/^(define-caller-pattern position (form form &key (:star form)) :lisp)$/;"	f
position-if	slime/xref.lisp	/^(define-caller-pattern position-if (fn form &key (:star form)) :lisp)$/;"	f
position-if-not	slime/xref.lisp	/^(define-caller-pattern position-if-not (fn form &key (:star form)) :lisp)$/;"	f
position-of-current	practicals-1.0.3/Chapter29/playlist.lisp	/^(defun position-of-current (playlist)$/;"	f
possible-vals	sudoku/sudoku.lisp	/^(defun possible-vals (x y puzzle)$/;"	f
possible-vals-asst	sudoku/sudoku.lisp	/^(defun possible-vals-asst (vals)$/;"	f
post-gc-hook	slime/swank-cmucl.lisp	/^(defun post-gc-hook (bytes-retained bytes-freed trigger)$/;"	f
power	paip/aip_ch1.lisp	/^(defun power (base exp)$/;"	f
ppcre-error	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<br><a class=none name="ppcre-error"><b>ppcre-error<\/b><\/a>$/;"	a
ppcre-error	practicals-1.0.3/libraries/cl-ppcre-1.2.3/errors.lisp	/^(define-condition ppcre-error (simple-error)$/;"	f
ppcre-invocation-error	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<br><a class=none name="ppcre-invocation-error"><b>ppcre-invocation-error<\/b><\/a>$/;"	a
ppcre-invocation-error	practicals-1.0.3/libraries/cl-ppcre-1.2.3/errors.lisp	/^(define-condition ppcre-invocation-error (ppcre-error)$/;"	f
ppcre-syntax-error	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<br><a class=none name="ppcre-syntax-error"><b>ppcre-syntax-error<\/b><\/a>$/;"	a
ppcre-syntax-error	practicals-1.0.3/libraries/cl-ppcre-1.2.3/errors.lisp	/^(define-condition ppcre-syntax-error (ppcre-error)$/;"	f
ppcre-syntax-error-pos	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<br><a class=none name="ppcre-syntax-error-pos"><b>ppcre-syntax-error-pos<\/b><\/a> <i>condition<\/i> =&gt; <i>number<\/i><\/a>$/;"	a
ppcre-syntax-error-string	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<br><a class=none name="ppcre-syntax-error-string"><b>ppcre-syntax-error-string<\/b><\/a> <i>condition<\/i> =&gt; <i>string<\/i><\/a>$/;"	a
ppme	practicals-1.0.3/Chapter08/macro-utilities.lisp	/^(defmacro ppme (form &environment env)$/;"	f
pprint	slime/xref.lisp	/^(define-caller-pattern pprint (form (:optional form)) :lisp)$/;"	f
pprint-dispatch	slime/xref.lisp	/^(define-caller-pattern pprint-dispatch (form &optional form) :lisp2)$/;"	f
pprint-eval	slime/contrib/swank-kawa.scm	/^(defslimefun pprint-eval (env string)$/;"	f
pprint-eval	slime/swank.lisp	/^(defslimefun pprint-eval (string)$/;"	f
pprint-eval-string-in-frame	slime/swank.lisp	/^(defslimefun pprint-eval-string-in-frame (string index)$/;"	f
pprint-exit-if-list-exhausted	slime/xref.lisp	/^(define-caller-pattern pprint-exit-if-list-exhausted () :lisp2)$/;"	f
pprint-fill	slime/xref.lisp	/^(define-caller-pattern pprint-fill (form form &optional form form) :lisp2)$/;"	f
pprint-indent	slime/xref.lisp	/^(define-caller-pattern pprint-indent (form form &optional form) :lisp2)$/;"	f
pprint-inspector-part	slime/swank.lisp	/^(defslimefun pprint-inspector-part (index)$/;"	f
pprint-linear	slime/xref.lisp	/^(define-caller-pattern pprint-linear (form form &optional form form) :lisp2)$/;"	f
pprint-logical-block	slime/xref.lisp	/^(define-caller-pattern pprint-logical-block$/;"	f
pprint-newline	slime/xref.lisp	/^(define-caller-pattern pprint-newline (form &optional form) :lisp2)$/;"	f
pprint-pop	slime/xref.lisp	/^(define-caller-pattern pprint-pop () :lisp2)$/;"	f
pprint-tab	slime/xref.lisp	/^(define-caller-pattern pprint-tab (form form form &optional form) :lisp2)$/;"	f
pprint-tabular	slime/xref.lisp	/^(define-caller-pattern pprint-tabular (form form &optional form form form) :lisp2)$/;"	f
pprint-to-string	slime/contrib/swank-mit-scheme.scm	/^(define (pprint-to-string o) $/;"	f
pre-gc-hook	slime/swank-cmucl.lisp	/^(defun pre-gc-hook (bytes-in-use)$/;"	f
preferred-communication-style	slime/swank-abcl.lisp	/^(defimplementation preferred-communication-style ()$/;"	f
preferred-communication-style	slime/swank-allegro.lisp	/^(defimplementation preferred-communication-style ()$/;"	f
preferred-communication-style	slime/swank-backend.lisp	/^(definterface preferred-communication-style ()$/;"	f
preferred-communication-style	slime/swank-cmucl.lisp	/^(defimplementation preferred-communication-style ()$/;"	f
preferred-communication-style	slime/swank-corman.lisp	/^(defimplementation preferred-communication-style ()$/;"	f
preferred-communication-style	slime/swank-ecl.lisp	/^(defimplementation preferred-communication-style ()$/;"	f
preferred-communication-style	slime/swank-lispworks.lisp	/^(defimplementation preferred-communication-style ()$/;"	f
preferred-communication-style	slime/swank-openmcl.lisp	/^(defimplementation preferred-communication-style ()$/;"	f
preferred-communication-style	slime/swank-sbcl.lisp	/^(defimplementation preferred-communication-style ()$/;"	f
preferred-communication-style	slime/swank-scl.lisp	/^(defimplementation preferred-communication-style ()$/;"	f
prefix-match-p	slime/swank.lisp	/^(defun prefix-match-p (prefix string)$/;"	f
prefixed-var	slime/swank.lisp	/^(defun prefixed-var (prefix variable-symbol)$/;"	f
prepare-icy-response	practicals-1.0.3/Chapter28/shoutcast.lisp	/^(defun prepare-icy-response (request metadata-interval)$/;"	f
prepare-parts	slime/contrib/swank-mit-scheme.scm	/^(define (prepare-parts ps parts)$/;"	f
prepare-range	slime/contrib/swank-mit-scheme.scm	/^(define (prepare-range parts content from to)$/;"	f
present-repl-results	slime/contrib/swank-presentations.lisp	/^(defun present-repl-results (values)$/;"	f
present-repl-results-via-presentation-streams	slime/contrib/swank-presentation-streams.lisp	/^(defun present-repl-results-via-presentation-streams (values)$/;"	f
present-symbol-before-p	slime/swank.lisp	/^(defun present-symbol-before-p (x y)$/;"	f
presentation-end	slime/contrib/swank-presentation-streams.lisp	/^(defun presentation-end (record stream truncatep)$/;"	f
presentation-record	slime/contrib/swank-presentation-streams.lisp	/^(defstruct presentation-record $/;"	f
presentation-start	slime/contrib/swank-presentation-streams.lisp	/^(defun presentation-start (record stream truncatep) $/;"	f
presenting-object	slime/contrib/swank-presentation-streams.lisp	/^(defmacro presenting-object (object stream &body body)$/;"	f
presenting-object-1	slime/contrib/swank-presentation-streams.lisp	/^(defun presenting-object-1 (object stream continue)$/;"	f
presenting-object-if	slime/contrib/swank-presentation-streams.lisp	/^(defmacro presenting-object-if (predicate object stream &body body)$/;"	f
preserve-whitespace-p	practicals-1.0.3/Chapter31/html.lisp	/^(defun preserve-whitespace-p (tag) (find tag *preserve-whitespace-elements*))$/;"	f
prime-factors	nifty_funs.lisp	/^(defun prime-factors (n)$/;"	f
primep	macro.lisp	/^(defun primep (n)$/;"	f
primes	chiglug-macros/lazy-eval.lisp	/^(defun primes ()$/;"	f
prin1	slime/xref.lisp	/^(define-caller-pattern prin1 (form (:optional form)) :lisp)$/;"	f
prin1-to-string	slime/xref.lisp	/^(define-caller-pattern prin1-to-string (form) :lisp)$/;"	f
prin1-to-string-for-emacs	slime/swank.lisp	/^(defun prin1-to-string-for-emacs (object)$/;"	f
princ	slime/xref.lisp	/^(define-caller-pattern princ (form (:optional form)) :lisp)$/;"	f
princ-to-string	slime/xref.lisp	/^(define-caller-pattern princ-to-string (form) :lisp)$/;"	f
print	slime/xref.lisp	/^(define-caller-pattern print (form (:optional form)) :lisp)$/;"	f
print-arglist	slime/contrib/swank-arglists.lisp	/^(defun print-arglist (arglist &key operator highlight)$/;"	f
print-bytes	slime/swank-cmucl.lisp	/^(defun print-bytes (nbytes &optional stream)$/;"	f
print-caller-trees	slime/xref.lisp	/^(defun print-caller-trees (&key (mode *default-graphing-mode*)$/;"	f
print-class-hierarchy	slime/xref.lisp	/^(defun print-class-hierarchy (&optional (start-class 'anything) $/;"	f
print-conf-line	config-parser.lisp	/^(defun print-conf-line (line stream)$/;"	f
print-conf-line	sudoku/config-parser.lisp	/^(defun print-conf-line (line stream)$/;"	f
print-connection	slime/swank.lisp	/^(defun print-connection (conn stream depth)$/;"	f
print-decoded-arglist-as-template	slime/contrib/swank-arglists.lisp	/^(defun print-decoded-arglist-as-template (decoded-arglist &key$/;"	f
print-file-dependencies	slime/xref.lisp	/^(defun print-file-dependencies (&optional (database *callers-database*))$/;"	f
print-frame	slime/contrib/swank-mit-scheme.scm	/^(define (print-frame frame port)$/;"	f
print-frame	slime/swank-abcl.lisp	/^(defimplementation print-frame (frame stream)$/;"	f
print-frame	slime/swank-allegro.lisp	/^(defimplementation print-frame (frame stream)$/;"	f
print-frame	slime/swank-backend.lisp	/^(definterface print-frame (frame stream)$/;"	f
print-frame	slime/swank-clisp.lisp	/^(defimplementation print-frame (frame stream)$/;"	f
print-frame	slime/swank-cmucl.lisp	/^(defimplementation print-frame (frame stream)$/;"	f
print-frame	slime/swank-corman.lisp	/^(defimplementation print-frame (frame stream)$/;"	f
print-frame	slime/swank-ecl.lisp	/^(defimplementation print-frame (frame stream)$/;"	f
print-frame	slime/swank-lispworks.lisp	/^(defimplementation print-frame (frame stream)$/;"	f
print-frame	slime/swank-openmcl.lisp	/^(defimplementation print-frame (frame stream)$/;"	f
print-frame	slime/swank-sbcl.lisp	/^(defimplementation print-frame (frame stream)$/;"	f
print-frame	slime/swank-scl.lisp	/^(defimplementation print-frame (frame stream)$/;"	f
print-frame-registers	slime/swank-cmucl.lisp	/^(defun print-frame-registers (frame-number)$/;"	f
print-frame-registers	slime/swank-scl.lisp	/^(defun print-frame-registers (frame-number)$/;"	f
print-indentation-lossage	slime/swank.lisp	/^(defun print-indentation-lossage (&optional (stream *standard-output*))$/;"	f
print-indented-tree	slime/xref.lisp	/^(defun print-indented-tree (trees &optional (indent 0))$/;"	f
print-object	practicals-1.0.3/Chapter23/spam.lisp	/^(defmethod print-object ((object word-feature) stream)$/;"	f
print-object	slime/swank-corman.lisp	/^(defmethod print-object ((restart restart) stream)$/;"	f
print-object	slime/swank-scl.lisp	/^(defmethod print-object ((s slime-input-stream) stream)$/;"	f
print-object	slime/swank-scl.lisp	/^(defmethod print-object ((s slime-output-stream) stream)$/;"	f
print-object	slime/xref.lisp	/^(define-caller-pattern print-object (form form) :lisp2)$/;"	f
print-part-to-string	slime/swank.lisp	/^(defun print-part-to-string (value)$/;"	f
print-symbol-info	practicals-1.0.3/libraries/cl-ppcre-1.2.3/api.lisp	/^(defun print-symbol-info (symbol)$/;"	f
print-unreadable-object	slime/xref.lisp	/^(define-caller-pattern print-unreadable-object $/;"	f
probably-scode?	slime/contrib/swank-mit-scheme.scm	/^(define (probably-scode? o)$/;"	f
probe-file	slime/xref.lisp	/^(define-caller-pattern probe-file (form) :lisp)$/;"	f
problem-1	project-euler.lisp	/^(defun problem-1 (n)$/;"	f
problem-12	project-euler.lisp	/^(defun problem-12 (num-div)$/;"	f
problem-15	project-euler.lisp	/^(defun problem-15 ()$/;"	f
problem-17	project-euler.lisp	/^(defun problem-17 ()$/;"	f
problem-18/67	project-euler.lisp	/^(defun problem-18\/67 (filepath)$/;"	f
problem-2	project-euler.lisp	/^(defun problem-2 (n)$/;"	f
problem-20	project-euler.lisp	/^(defun problem-20 (n)$/;"	f
problem-21	project-euler.lisp	/^(defun problem-21 (n)$/;"	f
problem-22	project-euler.lisp	/^(defun problem-22 ()$/;"	f
problem-23	project-euler.lisp	/^(defun problem-23 (n)$/;"	f
problem-25	project-euler.lisp	/^(defun problem-25 (n)$/;"	f
problem-26	project-euler.lisp	/^(defun problem-26 (d)$/;"	f
problem-27	project-euler.lisp	/^(defun problem-27 (m)$/;"	f
problem-28	project-euler.lisp	/^(defun problem-28 (n)$/;"	f
problem-29	project-euler.lisp	/^(defun problem-29 (l u)$/;"	f
problem-3	project-euler.lisp	/^(defun problem-3 (n)$/;"	f
problem-30	project-euler.lisp	/^(defun problem-30 ()$/;"	f
problem-32	project-euler.lisp	/^(defun problem-32 ()$/;"	f
problem-34	project-euler.lisp	/^(defun problem-34 ()$/;"	f
problem-35	project-euler.lisp	/^(defun problem-35 (n)$/;"	f
problem-36	project-euler.lisp	/^(defun problem-36 ()$/;"	f
problem-39	project-euler.lisp	/^(defun problem-39 (perimeter)$/;"	f
problem-40	project-euler.lisp	/^(defun problem-40 (dz)$/;"	f
problem-42	project-euler.lisp	/^(defun problem-42 ()$/;"	f
problem-49	project-euler.lisp	/^(defun problem-49 ()$/;"	f
problem-52	project-euler.lisp	/^(defun problem-52 (num-mult)$/;"	f
problem-6	project-euler.lisp	/^(defun problem-6 (n m)$/;"	f
problem-69	project-euler.lisp	/^(defun problem-69 ()$/;"	f
problem-79	project-euler.lisp	/^(defun problem-79 (filepath)$/;"	f
problem-9	project-euler.lisp	/^(defun problem-9 ()$/;"	f
process	practicals-1.0.3/Chapter31/html.lisp	/^(defun process (processor form)$/;"	f
process-available-input	slime/swank.lisp	/^(defun process-available-input (stream fn)$/;"	f
process-cons-sexp-html	practicals-1.0.3/Chapter31/html.lisp	/^(defun process-cons-sexp-html (processor form)$/;"	f
process-css	practicals-1.0.3/Chapter31/css.lisp	/^(defun process-css (processor sexp)$/;"	f
process-css-key-or-value	practicals-1.0.3/Chapter31/css.lisp	/^(defun process-css-key-or-value (processor form)$/;"	f
process-form-for-emacs	slime/swank.lisp	/^(defun process-form-for-emacs (form)$/;"	f
process-fspec	slime/swank-cmucl.lisp	/^(defun process-fspec (fspec)$/;"	f
process-fspec	slime/swank-sbcl.lisp	/^(defun process-fspec (fspec)$/;"	f
process-fspec	slime/swank-scl.lisp	/^(defun process-fspec (fspec)$/;"	f
process-fspec-for-allegro	slime/swank-allegro.lisp	/^(defun process-fspec-for-allegro (fspec)$/;"	f
process-line	la_parse.lisp	/^(defun process-line (line)$/;"	f
process-sexp-html	practicals-1.0.3/Chapter31/html.lisp	/^(defun process-sexp-html (processor form)$/;"	f
process-special-form	practicals-1.0.3/Chapter31/html.lisp	/^(defun process-special-form (processor form)$/;"	f
proclaim	slime/xref.lisp	/^(define-caller-pattern proclaim ((:rest :ignore)) :lisp)$/;"	f
product-of-squares	jos-mittest.lisp	/^(defun product-of-squares (list)$/;"	f
profile	slime/swank-allegro.lisp	/^(defimplementation profile (fname)$/;"	f
profile	slime/swank-backend.lisp	/^(definterface profile (fname)$/;"	f
profile	slime/swank-clisp.lisp	/^(defimplementation profile (fname)$/;"	f
profile	slime/swank-cmucl.lisp	/^(defimplementation profile (fname)$/;"	f
profile	slime/swank-openmcl.lisp	/^(defimplementation profile (fname)$/;"	f
profile	slime/swank-sbcl.lisp	/^(defimplementation profile (fname)$/;"	f
profile	slime/swank-scl.lisp	/^(defimplementation profile (fname)$/;"	f
profile-fwrapper	slime/swank-allegro.lisp	/^(excl:def-fwrapper profile-fwrapper (&rest args)$/;"	f
profile-package	slime/swank-backend.lisp	/^(definterface profile-package (package callers-p methods)$/;"	f
profile-package	slime/swank-clisp.lisp	/^(defimplementation profile-package (package callers-p methods)$/;"	f
profile-package	slime/swank-cmucl.lisp	/^(defimplementation profile-package (package callers methods)$/;"	f
profile-package	slime/swank-openmcl.lisp	/^(defimplementation profile-package (package callers-p methods)$/;"	f
profile-package	slime/swank-sbcl.lisp	/^(defimplementation profile-package (package callers methods)$/;"	f
profile-package	slime/swank-scl.lisp	/^(defimplementation profile-package (package callers methods)$/;"	f
profile-report	slime/swank-allegro.lisp	/^(defimplementation profile-report ()$/;"	f
profile-report	slime/swank-backend.lisp	/^(definterface profile-report ()$/;"	f
profile-report	slime/swank-clisp.lisp	/^(defimplementation profile-report ()$/;"	f
profile-report	slime/swank-cmucl.lisp	/^(defimplementation profile-report ()$/;"	f
profile-report	slime/swank-openmcl.lisp	/^(defimplementation profile-report ()$/;"	f
profile-report	slime/swank-sbcl.lisp	/^(defimplementation profile-report ()$/;"	f
profile-report	slime/swank-scl.lisp	/^(defimplementation profile-report ()$/;"	f
profile-reset	slime/swank-allegro.lisp	/^(defimplementation profile-reset ()$/;"	f
profile-reset	slime/swank-backend.lisp	/^(definterface profile-reset ()$/;"	f
profile-reset	slime/swank-clisp.lisp	/^(defimplementation profile-reset ()$/;"	f
profile-reset	slime/swank-cmucl.lisp	/^(defimplementation profile-reset ()$/;"	f
profile-reset	slime/swank-openmcl.lisp	/^(defimplementation profile-reset ()$/;"	f
profile-reset	slime/swank-sbcl.lisp	/^(defimplementation profile-reset ()$/;"	f
profile-reset	slime/swank-scl.lisp	/^(defimplementation profile-reset ()$/;"	f
profiled-functions	slime/swank-allegro.lisp	/^(defimplementation profiled-functions ()$/;"	f
profiled-functions	slime/swank-backend.lisp	/^(definterface profiled-functions ()$/;"	f
profiled-functions	slime/swank-clisp.lisp	/^(defimplementation profiled-functions ()$/;"	f
profiled-functions	slime/swank-cmucl.lisp	/^(defimplementation profiled-functions ()$/;"	f
profiled-functions	slime/swank-openmcl.lisp	/^(defimplementation profiled-functions ()$/;"	f
profiled-functions	slime/swank-sbcl.lisp	/^(defimplementation profiled-functions ()$/;"	f
profiled-functions	slime/swank-scl.lisp	/^(defimplementation profiled-functions ()$/;"	f
profiledp	slime/swank.lisp	/^(defun profiledp (fspec)$/;"	f
prog	slime/xref.lisp	/^(define-caller-pattern prog$/;"	f
prog*	slime/xref.lisp	/^(define-caller-pattern prog*    $/;"	f
prog1	slime/xref.lisp	/^(define-caller-pattern prog1 (form (:star form)) :lisp)$/;"	f
prog2	slime/xref.lisp	/^(define-caller-pattern prog2 (form form (:star form)) :lisp)$/;"	f
progn	slime/xref.lisp	/^(define-caller-pattern progn ((:star form)) :lisp)$/;"	f
progv	slime/xref.lisp	/^(define-caller-pattern progv$/;"	f
project-columns	practicals-1.0.3/Chapter27/database.lisp	/^(defun project-columns (rows schema)$/;"	f
prompt	onlisp.lisp	/^(defun prompt (&rest args)$/;"	f
prompt-for-cd	db.lisp	/^(defun prompt-for-cd ()$/;"	f
prompt-for-cd	practicals-1.0.3/Chapter03/simple-database.lisp	/^(defun prompt-for-cd ()$/;"	f
prompt-read	db.lisp	/^(defun prompt-read (prompt)$/;"	f
prompt-read	practicals-1.0.3/Chapter03/simple-database.lisp	/^(defun prompt-read (prompt)$/;"	f
prompt-read	rpn.lisp	/^(defun prompt-read (prompt)$/;"	f
provide	slime/xref.lisp	/^(define-caller-pattern provide (form) :lisp)$/;"	f
prune	onlisp.lisp	/^(defun prune (test tree)$/;"	f
pset	nifty_funs.lisp	/^(defun pset (lst)$/;"	f
pset-tr	nifty_funs.lisp	/^(defun pset-tr (lst)$/;"	f
psetf	slime/xref.lisp	/^(define-caller-pattern psetf ((:star form form)) :lisp)$/;"	f
psetq	slime/xref.lisp	/^(define-caller-pattern psetq ((:star var form)) :lisp)$/;"	f
psgraph-output	slime/xref.lisp	/^(defun psgraph-output (list-of-trees directory shrink &optional insert)$/;"	f
psgraph-xref	slime/xref.lisp	/^(defun psgraph-xref (&key (mode *default-graphing-mode*)$/;"	f
push	slime/xref.lisp	/^(define-caller-pattern push (form form) :lisp)$/;"	f
push-op	practicals-1.0.3/Chapter31/html.lisp	/^(defun push-op (op ops-buffer) (vector-push-extend op ops-buffer))$/;"	f
pushf	slime/contrib/swank-kawa.scm	/^(define-syntax pushf $/;"	f
pushnew	slime/xref.lisp	/^(define-caller-pattern pushnew (form form &key (:star form)) :lisp)$/;"	f
puzzle-solved?	sudoku/sudoku.lisp	/^(defun puzzle-solved? (puzzle)$/;"	f
q	slime/swank-loader.lisp	/^(defun q (s) (read-from-string s))$/;"	f
quant	practicals-1.0.3/libraries/cl-ppcre-1.2.3/parser.lisp	/^(defun quant (lexer)$/;"	f
quit-inspector	slime/swank.lisp	/^(defslimefun quit-inspector ()$/;"	f
quit-lisp	slime/contrib/swank-kawa.scm	/^(defslimefun quit-lisp (env)$/;"	f
quit-lisp	slime/swank-abcl.lisp	/^(defimplementation quit-lisp ()$/;"	f
quit-lisp	slime/swank-allegro.lisp	/^(defimplementation quit-lisp ()$/;"	f
quit-lisp	slime/swank-backend.lisp	/^(definterface quit-lisp ()$/;"	f
quit-lisp	slime/swank-clisp.lisp	/^(defimplementation quit-lisp ()$/;"	f
quit-lisp	slime/swank-cmucl.lisp	/^(defimplementation quit-lisp ()$/;"	f
quit-lisp	slime/swank-corman.lisp	/^(defimplementation quit-lisp ()$/;"	f
quit-lisp	slime/swank-ecl.lisp	/^(defimplementation quit-lisp ()$/;"	f
quit-lisp	slime/swank-lispworks.lisp	/^(defimplementation quit-lisp ()$/;"	f
quit-lisp	slime/swank-openmcl.lisp	/^(defimplementation quit-lisp ()$/;"	f
quit-lisp	slime/swank-sbcl.lisp	/^(defimplementation quit-lisp ()$/;"	f
quit-lisp	slime/swank-scl.lisp	/^(defimplementation quit-lisp ()$/;"	f
quit-thread-browser	slime/swank.lisp	/^(defslimefun quit-thread-browser ()$/;"	f
quote	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<h4><a name="quote" class=none><code>&quot;\\Q&quot;<\/code> doesn't work, or does it?<\/a><\/h4>$/;"	a
quote	slime/xref.lisp	/^(define-caller-pattern quote (:ignore) :lisp)$/;"	f
quote-meta-chars	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<br><a class=none name="quote-meta-chars"><b>quote-meta-chars<\/b> <i>string<\/i> =&gt; <i>string'<\/i><\/a>$/;"	a
random	slime/xref.lisp	/^(define-caller-pattern random (form (:optional form)) :lisp)$/;"	f
random-elt	paip/aip_ch2.lisp	/^(defun random-elt (choices)$/;"	f
random-number	practicals-1.0.3/Chapter26/allegroserve.lisp	/^(define-url-function random-number (request (limit integer 1000))$/;"	f
random-number	practicals-1.0.3/Chapter26/allegroserve.lisp	/^(defun random-number (request entity)$/;"	f
random-sample	practicals-1.0.3/Chapter27/database.lisp	/^(defun random-sample (vector n)$/;"	f
random-selection	practicals-1.0.3/Chapter27/database.lisp	/^(defun random-selection (table n)$/;"	f
random-state-p	slime/xref.lisp	/^(define-caller-pattern random-state-p (form) :lisp)$/;"	f
range	tmp.lisp	/^(defun range (start stop)$/;"	f
rassoc	slime/xref.lisp	/^(define-caller-pattern rassoc (form form &key (:star form)) :lisp)$/;"	f
rassoc-if	slime/xref.lisp	/^(define-caller-pattern rassoc-if (fn form &key (:star form)) :lisp)$/;"	f
rassoc-if-not	slime/xref.lisp	/^(define-caller-pattern rassoc-if-not (fn form &key (:star form)) :lisp)$/;"	f
rational	slime/xref.lisp	/^(define-caller-pattern rational (form) :lisp)$/;"	f
rational	slime/xref.lisp	/^(define-pattern-substitution rational (:test #'rationalp))$/;"	f
rationalize	slime/xref.lisp	/^(define-caller-pattern rationalize (form) :lisp)$/;"	f
rationalp	slime/xref.lisp	/^(define-caller-pattern rationalp (form) :lisp)$/;"	f
raw-bytes	practicals-1.0.3/Chapter25/id3v2.lisp	/^(define-binary-type raw-bytes (size)$/;"	f
raw-string	practicals-1.0.3/Chapter31/html.lisp	/^(defgeneric raw-string (processor string &optional check-for-newlines))$/;"	f
raw-string	practicals-1.0.3/Chapter31/html.lisp	/^(defmethod raw-string ((compiler html-compiler) string &optional newlines-p)$/;"	f
raw-string	practicals-1.0.3/Chapter31/html.lisp	/^(defmethod raw-string ((pp html-pretty-printer) string &optional newlines-p)$/;"	f
rdc	nifty_funs.lisp	/^(defun rdc (list)$/;"	f
re-enqueue-annotation	slime/sbcl-pprint-patch.lisp	/^(defun re-enqueue-annotation (stream annotation)$/;"	f
re-enqueue-annotations	slime/sbcl-pprint-patch.lisp	/^(defun re-enqueue-annotations (stream end)$/;"	f
re-evaluate-defvar	slime/swank.lisp	/^(defslimefun re-evaluate-defvar (form)$/;"	f
read	slime/xref.lisp	/^(define-caller-pattern read (&optional form form form form) :lisp)$/;"	f
read-and-record-source-map	slime/swank-source-path-parser.lisp	/^(defun read-and-record-source-map (stream)$/;"	f
read-arglist	slime/swank-cmucl.lisp	/^(defun read-arglist (fn)$/;"	f
read-arglist	slime/swank-scl.lisp	/^(defun read-arglist (fn)$/;"	f
read-byte	slime/xref.lisp	/^(define-caller-pattern read-byte ((:star form)) :lisp)$/;"	f
read-char	slime/xref.lisp	/^(define-caller-pattern read-char (&optional form form form form) :lisp)$/;"	f
read-char-no-hang	slime/xref.lisp	/^(define-caller-pattern read-char-no-hang ((:star form)) :lisp)$/;"	f
read-conversatively-for-autodoc	slime/contrib/swank-arglists.lisp	/^(defun read-conversatively-for-autodoc (string)$/;"	f
read-delimited-list	slime/xref.lisp	/^(define-caller-pattern read-delimited-list (form &optional form form) :lisp)$/;"	f
read-error-location	slime/swank-cmucl.lisp	/^(defun read-error-location (condition)$/;"	f
read-error-location	slime/swank-scl.lisp	/^(defun read-error-location (condition)$/;"	f
read-error-p	slime/swank-cmucl.lisp	/^(defun read-error-p (condition)$/;"	f
read-error-p	slime/swank-scl.lisp	/^(defun read-error-p (condition)$/;"	f
read-file	slime/swank-source-file-cache.lisp	/^(defun read-file (filename)$/;"	f
read-form	slime/swank.lisp	/^(defun read-form (string)$/;"	f
read-form-spec	slime/contrib/swank-arglists.lisp	/^(defun read-form-spec (spec &optional reader)$/;"	f
read-frame	practicals-1.0.3/Chapter25/id3v2.lisp	/^(defun read-frame (frame-type in)$/;"	f
read-from-control-thread	slime/swank.lisp	/^(defun read-from-control-thread ()$/;"	f
read-from-emacs	slime/swank.lisp	/^(defun read-from-emacs ()$/;"	f
read-from-socket-io	slime/swank.lisp	/^(defun read-from-socket-io ()$/;"	f
read-from-string	slime/contrib/swank-mit-scheme.scm	/^(define (read-from-string s) (with-input-from-string s read))$/;"	f
read-from-string	slime/xref.lisp	/^(define-caller-pattern read-from-string (form (:star form)) :lisp)$/;"	f
read-id3	practicals-1.0.3/Chapter25/id3v2.lisp	/^(defun read-id3 (file)$/;"	f
read-incomplete-form-from-string	slime/contrib/swank-arglists.lisp	/^(defun read-incomplete-form-from-string (form-string)$/;"	f
read-length	slime/contrib/swank-mit-scheme.scm	/^(define (read-length in)$/;"	f
read-line	slime/xref.lisp	/^(define-caller-pattern read-line (&optional form form form form) :lisp)$/;"	f
read-loop	slime/swank.lisp	/^(defun read-loop (control-thread input-stream connection)$/;"	f
read-motd	slime/contrib/swank-motd.lisp	/^(defun read-motd (motd-pathname)$/;"	f
read-object	practicals-1.0.3/Chapter24/binary-data.lisp	/^(defgeneric read-object (object stream)$/;"	f
read-object	practicals-1.0.3/Chapter24/binary-data.lisp	/^(defmethod read-object :around (object stream)$/;"	f
read-packet	slime/contrib/swank-mit-scheme.scm	/^(define (read-packet in)$/;"	f
read-preserving-whitespace	slime/xref.lisp	/^(define-caller-pattern read-preserving-whitespace$/;"	f
read-snippet	slime/swank-source-file-cache.lisp	/^(defun read-snippet (stream &optional position)$/;"	f
read-softly-from-string	slime/contrib/swank-arglists.lisp	/^(defun read-softly-from-string (string)$/;"	f
read-softly-from-string*	slime/contrib/swank-arglists.lisp	/^(defun read-softly-from-string* (string)$/;"	f
read-source-form	slime/swank-source-path-parser.lisp	/^(defun read-source-form (n stream)$/;"	f
read-upto-n-chars	slime/swank-source-file-cache.lisp	/^(defun read-upto-n-chars (stream n)$/;"	f
read-user-input-from-emacs	slime/swank.lisp	/^(defun read-user-input-from-emacs ()$/;"	f
read-value	practicals-1.0.3/Chapter24/binary-data.lisp	/^(defgeneric read-value (type stream &key)$/;"	f
read-value	practicals-1.0.3/Chapter24/binary-data.lisp	/^(defmethod read-value ((type symbol) stream &key)$/;"	f
readlines	nifty_funs.lisp	/^(defun readlines (path &optional (fn #'identity))$/;"	f
readlist	onlisp.lisp	/^(defun readlist (&rest args)$/;"	f
readtable-case	slime/xref.lisp	/^(define-caller-pattern readtable-case (form) :lisp2)$/;"	f
readtablep	slime/xref.lisp	/^(define-caller-pattern readtablep (form) :lisp)$/;"	f
real-condition	slime/swank-sbcl.lisp	/^(defun real-condition (condition)$/;"	f
realp	slime/xref.lisp	/^(define-caller-pattern realp (form) :lisp2)$/;"	f
realpart	slime/xref.lisp	/^(define-caller-pattern realpart (form) :lisp)$/;"	f
receive	slime/swank-abcl.lisp	/^(defimplementation receive ()$/;"	f
receive	slime/swank-allegro.lisp	/^(defimplementation receive ()$/;"	f
receive	slime/swank-backend.lisp	/^(definterface receive ()$/;"	f
receive	slime/swank-corman.lisp	/^(defimplementation receive ()$/;"	f
receive	slime/swank-lispworks.lisp	/^(defimplementation receive ()$/;"	f
receive	slime/swank-openmcl.lisp	/^(defimplementation receive ()$/;"	f
receive	slime/swank-scl.lisp	/^(defimplementation receive ()$/;"	f
record-callers	slime/xref.lisp	/^(defun record-callers (filename form $/;"	f
record-callers*	slime/xref.lisp	/^(defun record-callers* (filename form pattern parent environment$/;"	f
record-note-for-condition	slime/swank.lisp	/^(defun record-note-for-condition (condition)$/;"	f
record-stack-top	slime/swank-openmcl.lisp	/^(defun record-stack-top (frame)$/;"	f
recursively-compute-most-completions	slime/contrib/swank-fuzzy.lisp	/^(defun recursively-compute-most-completions $/;"	f
recursively-empty-p	slime/contrib/swank-arglists.lisp	/^(defun recursively-empty-p (list)$/;"	f
red-button	chiglug-macros/power-of-lisp-macros.lisp	/^(defun red-button ()$/;"	f
reddit-home	lispcast/01-reddit.lisp	/^(defun reddit-home ()$/;"	f
redirect-trace-output	slime/swank.lisp	/^(defslimefun redirect-trace-output (target)$/;"	f
reduce	slime/xref.lisp	/^(define-caller-pattern reduce (fn form &key (:star form)) :lisp)$/;"	f
reg-expr	practicals-1.0.3/libraries/cl-ppcre-1.2.3/parser.lisp	/^(defun reg-expr (lexer)$/;"	f
regex	slime/nregex.lisp	/^(defun regex (expression string)$/;"	f
regex-apropos	practicals-1.0.3/libraries/cl-ppcre-1.2.3/api.lisp	/^(defun regex-apropos (regex &optional packages &key (case-insensitive t))$/;"	f
regex-apropos	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<br><a class=none name="regex-apropos"><b>regex-apropos<\/b> <i>regex <tt>&amp;optional<\/tt> packages <tt>&amp;key<\/tt> case-insensitive<\/i> =&gt; <i>list<\/i><\/a>$/;"	a
regex-apropos-aux	practicals-1.0.3/libraries/cl-ppcre-1.2.3/api.lisp	/^(defmacro regex-apropos-aux ((regex packages case-insensitive &optional return-form)$/;"	f
regex-apropos-list	practicals-1.0.3/libraries/cl-ppcre-1.2.3/api.lisp	/^(defun regex-apropos-list (regex &optional packages &key (case-insensitive t))$/;"	f
regex-apropos-list	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<br><a class=none name="regex-apropos-list"><b>regex-apropos-list<\/b> <i>regex <tt>&amp;optional<\/tt> packages <tt>&amp;key<\/tt> upcase<\/i> =&gt; <i>list<\/i><\/a>$/;"	a
regex-char-code-limit	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<br><a class=none name="regex-char-code-limit"><b>*regex-char-code-limit*<\/b><\/a>$/;"	a
regex-compile	slime/nregex.lisp	/^(defun regex-compile (source &key (anchored nil))$/;"	f
regex-length	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defgeneric regex-length (regex)$/;"	f
regex-length	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod regex-length ((alternation alternation))$/;"	f
regex-length	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod regex-length ((back-reference back-reference))$/;"	f
regex-length	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod regex-length ((branch branch))$/;"	f
regex-length	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod regex-length ((char-class char-class))$/;"	f
regex-length	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod regex-length ((everything everything))$/;"	f
regex-length	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod regex-length ((filter filter))$/;"	f
regex-length	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod regex-length ((regex regex))$/;"	f
regex-length	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod regex-length ((register register))$/;"	f
regex-length	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod regex-length ((repetition repetition))$/;"	f
regex-length	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod regex-length ((seq seq))$/;"	f
regex-length	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod regex-length ((standalone standalone))$/;"	f
regex-length	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod regex-length ((str str))$/;"	f
regex-min-length	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defgeneric regex-min-length (regex)$/;"	f
regex-min-length	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod regex-min-length ((alternation alternation))$/;"	f
regex-min-length	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod regex-min-length ((branch branch))$/;"	f
regex-min-length	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod regex-min-length ((char-class char-class))$/;"	f
regex-min-length	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod regex-min-length ((everything everything))$/;"	f
regex-min-length	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod regex-min-length ((filter filter))$/;"	f
regex-min-length	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod regex-min-length ((regex regex))$/;"	f
regex-min-length	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod regex-min-length ((register register))$/;"	f
regex-min-length	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod regex-min-length ((repetition repetition))$/;"	f
regex-min-length	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod regex-min-length ((seq seq))$/;"	f
regex-min-length	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod regex-min-length ((standalone standalone))$/;"	f
regex-min-length	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod regex-min-length ((str str))$/;"	f
regex-quoted	slime/nregex.lisp	/^(defun regex-quoted (char-string &optional (invert nil))$/;"	f
regex-replace	practicals-1.0.3/libraries/cl-ppcre-1.2.3/api.lisp	/^(define-compiler-macro regex-replace$/;"	f
regex-replace	practicals-1.0.3/libraries/cl-ppcre-1.2.3/api.lisp	/^(defun regex-replace (regex target-string replacement$/;"	f
regex-replace	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<br><a class=none name="regex-replace"><b>regex-replace<\/b> <i>regex target-string replacement <tt>&amp;key<\/tt> start end preserve-case simple-calls<\/i> =&gt; <i>list<\/i><\/a>$/;"	a
regex-replace-all	practicals-1.0.3/libraries/cl-ppcre-1.2.3/api.lisp	/^(define-compiler-macro regex-replace-all$/;"	f
regex-replace-all	practicals-1.0.3/libraries/cl-ppcre-1.2.3/api.lisp	/^(defun regex-replace-all (regex target-string replacement$/;"	f
regex-replace-all	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<br><a class=none name="regex-replace-all"><b>regex-replace-all<\/b> <i>regex target-string replacement <tt>&amp;key<\/tt> start end preserve-case simple-calls<\/i> =&gt; <i>list<\/i><\/a>$/;"	a
register-groups-bind	practicals-1.0.3/libraries/cl-ppcre-1.2.3/api.lisp	/^(defmacro register-groups-bind (var-list (regex target-string$/;"	f
register-groups-bind	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<br><a class=none name="register-groups-bind"><b>register-groups-bind<\/b> <i>var-list (regex target-string <tt>&amp;key<\/tt> start end sharedp) declaration* statement*<\/i> =&gt; <i>result*<\/i><\/a>$/;"	a
reinitialize-instance	slime/xref.lisp	/^(define-caller-pattern reinitialize-instance (form (:star form)) :lisp2)$/;"	f
rem	slime/xref.lisp	/^(define-caller-pattern rem (form form) :lisp)$/;"	f
remarks	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<br>&nbsp;<br><h3><a class=none name="remarks">Remarks<\/a><\/h3>$/;"	a
remf	slime/xref.lisp	/^(define-caller-pattern remf (form form) :lisp)$/;"	f
remhash	slime/xref.lisp	/^(define-caller-pattern remhash (form form) :lisp)$/;"	f
remove	slime/xref.lisp	/^(define-caller-pattern remove (form form &key (:star form)) :lisp)$/;"	f
remove-&any-args	slime/contrib/swank-arglists.lisp	/^(defun remove-&any-args (decoded-arglist any-args)$/;"	f
remove-&key-args	slime/contrib/swank-arglists.lisp	/^(defun remove-&key-args (decoded-arglist key-args)$/;"	f
remove-actual-args	slime/contrib/swank-arglists.lisp	/^(defun remove-actual-args (decoded-arglist actual-arglist)$/;"	f
remove-bridge	slime/contrib/bridge.el	/^(defun remove-bridge ()$/;"	f
remove-duplicates	slime/xref.lisp	/^(define-caller-pattern remove-duplicates (form &key (:star form)) :lisp)$/;"	f
remove-fd-handlers	slime/swank-backend.lisp	/^(definterface remove-fd-handlers (socket)$/;"	f
remove-fd-handlers	slime/swank-cmucl.lisp	/^(defimplementation remove-fd-handlers (socket)$/;"	f
remove-fd-handlers	slime/swank-sbcl.lisp	/^(defimplementation remove-fd-handlers (socket)$/;"	f
remove-filename-quoting	slime/swank-openmcl.lisp	/^(defun remove-filename-quoting (string)$/;"	f
remove-gc-hooks	slime/swank-cmucl.lisp	/^(defun remove-gc-hooks ()$/;"	f
remove-if	slime/xref.lisp	/^(define-caller-pattern remove-if (fn form &key (:star form)) :lisp)$/;"	f
remove-if-not	slime/xref.lisp	/^(define-caller-pattern remove-if-not (fn form &key (:star form)) :lisp)$/;"	f
remove-method	slime/xref.lisp	/^(define-caller-pattern remove-method (fn form) :lisp2)$/;"	f
remove-registers	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defgeneric remove-registers (regex)$/;"	f
remove-registers	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod remove-registers ((alternation alternation))$/;"	f
remove-registers	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod remove-registers ((branch branch))$/;"	f
remove-registers	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod remove-registers ((lookahead lookahead))$/;"	f
remove-registers	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod remove-registers ((lookbehind lookbehind))$/;"	f
remove-registers	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod remove-registers ((regex regex))$/;"	f
remove-registers	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod remove-registers ((register register))$/;"	f
remove-registers	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod remove-registers ((repetition repetition))$/;"	f
remove-registers	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod remove-registers ((seq seq))$/;"	f
remove-registers	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod remove-registers ((standalone standalone))$/;"	f
remove-sigio-handlers	slime/swank-backend.lisp	/^(definterface remove-sigio-handlers (socket)$/;"	f
remove-sigio-handlers	slime/swank-cmucl.lisp	/^(defimplementation remove-sigio-handlers (socket)$/;"	f
remove-sigio-handlers	slime/swank-sbcl.lisp	/^(defimplementation remove-sigio-handlers (socket)$/;"	f
remprop	slime/xref.lisp	/^(define-caller-pattern remprop (form form) :lisp)$/;"	f
rename-file	slime/xref.lisp	/^(define-caller-pattern rename-file (form form) :lisp)$/;"	f
rename-package	slime/xref.lisp	/^(define-caller-pattern rename-package ((:rest :ignore)) :lisp)$/;"	f
repl	rpn.lisp	/^(defun repl (&optional (stack nil))$/;"	f
repl-eval	slime/swank.lisp	/^(defun repl-eval (string)$/;"	f
repl-eval-hook-pass	slime/contrib/swank-listener-hooks.lisp	/^(defslimefun repl-eval-hook-pass ()$/;"	f
repl-loop	slime/swank.lisp	/^(defun repl-loop (connection)$/;"	f
repl-port-type	slime/contrib/swank-mit-scheme.scm	/^(define repl-port-type$/;"	f
repl-read	slime/slime.el	/^(def-slime-test repl-read$/;"	f
repl-read-lines	slime/slime.el	/^(def-slime-test repl-read-lines$/;"	f
repl-return	slime/slime.el	/^(def-slime-test repl-return $/;"	f
repl-suppress-advance-history	slime/contrib/swank-listener-hooks.lisp	/^(defslimefun repl-suppress-advance-history ()$/;"	f
repl-suppress-output	slime/contrib/swank-listener-hooks.lisp	/^(defslimefun repl-suppress-output ()$/;"	f
repl-test	slime/slime.el	/^(def-slime-test repl-test$/;"	f
repl-thread	slime/swank.lisp	/^(defun repl-thread (connection)$/;"	f
repl-type-ahead	slime/slime.el	/^(def-slime-test repl-type-ahead$/;"	f
repl-write-char	slime/contrib/swank-mit-scheme.scm	/^(define (repl-write-char port char)$/;"	f
repl-write-substring	slime/contrib/swank-mit-scheme.scm	/^(define (repl-write-substring port string start end)$/;"	f
replace	slime/xref.lisp	/^(define-caller-pattern replace (form form &key (:star form)) :lisp)$/;"	f
replace-aux	practicals-1.0.3/libraries/cl-ppcre-1.2.3/api.lisp	/^(defun replace-aux (target-string replacement pos-list reg-list$/;"	f
report-result	practicals-1.0.3/Chapter09/test.lisp	/^(defun report-result (result form)$/;"	f
require	slime/xref.lisp	/^(define-caller-pattern require (form &optional :ignore) :lisp)$/;"	f
required-arguments	slime/metering.lisp	/^(defun required-arguments (name)$/;"	f
requires-compile-p	slime/swank.lisp	/^(defun requires-compile-p (source-file)$/;"	f
reread	onlisp.lisp	/^(defun reread (&rest args)$/;"	f
reset-all-monitoring	slime/metering.lisp	/^(defun reset-all-monitoring ()$/;"	f
reset-bridge	slime/contrib/bridge.el	/^(defun reset-bridge ()$/;"	f
reset-current-song	practicals-1.0.3/Chapter29/playlist.lisp	/^(defun reset-current-song (playlist)$/;"	f
reset-inspector	slime/contrib/swank-mit-scheme.scm	/^(define (reset-inspector)$/;"	f
reset-inspector	slime/swank.lisp	/^(defun reset-inspector ()$/;"	f
reset-monitoring-info	slime/metering.lisp	/^(defun reset-monitoring-info (name)$/;"	f
resolve-file-source-location	slime/swank-cmucl.lisp	/^(defun resolve-file-source-location (location)$/;"	f
resolve-hostname	slime/swank-cmucl.lisp	/^(defun resolve-hostname (hostname)$/;"	f
resolve-hostname	slime/swank-ecl.lisp	/^(defun resolve-hostname (name)$/;"	f
resolve-hostname	slime/swank-sbcl.lisp	/^(defun resolve-hostname (name)$/;"	f
resolve-hostname	slime/swank-scl.lisp	/^(defun resolve-hostname (hostname)$/;"	f
resolve-source-location	slime/swank-cmucl.lisp	/^(defun resolve-source-location (location)$/;"	f
resolve-stream-source-location	slime/swank-cmucl.lisp	/^(defun resolve-stream-source-location (location)$/;"	f
resolve-xref-location	slime/swank-cmucl.lisp	/^(defun resolve-xref-location (xref)$/;"	f
rest	slime/xref.lisp	/^(define-caller-pattern rest (form) :lisp)$/;"	f
restart-bind	slime/xref.lisp	/^(define-caller-pattern restart-bind$/;"	f
restart-case	slime/xref.lisp	/^(define-caller-pattern restart-case $/;"	f
restart-frame	slime/swank-abcl.lisp	/^(defimplementation restart-frame (frame-number)$/;"	f
restart-frame	slime/swank-allegro.lisp	/^(defimplementation restart-frame (frame-number)$/;"	f
restart-frame	slime/swank-backend.lisp	/^(definterface restart-frame (frame-number)$/;"	f
restart-frame	slime/swank-clisp.lisp	/^(defimplementation restart-frame (index)$/;"	f
restart-frame	slime/swank-lispworks.lisp	/^(defimplementation restart-frame (frame-number)$/;"	f
restart-frame	slime/swank-openmcl.lisp	/^(defimplementation restart-frame (index)$/;"	f
restart-name	slime/xref.lisp	/^(define-caller-pattern restart-name (form) :lisp2)$/;"	f
restart-server	slime/swank.lisp	/^(defun restart-server (&key (port default-server-port)$/;"	f
restrict-rows	practicals-1.0.3/Chapter27/database.lisp	/^(defun restrict-rows (rows where)$/;"	f
result-type	practicals-1.0.3/Chapter23/spam.lisp	/^(defun result-type (result)$/;"	f
return	slime/xref.lisp	/^(define-caller-pattern return ((:optional form)) :lisp)$/;"	f
return-from	slime/xref.lisp	/^(define-caller-pattern return-from (function (:optional form)) :lisp)$/;"	f
return-from-frame	slime/swank-abcl.lisp	/^(defimplementation return-from-frame (frame-number form)$/;"	f
return-from-frame	slime/swank-allegro.lisp	/^(defimplementation return-from-frame (frame-number form)$/;"	f
return-from-frame	slime/swank-backend.lisp	/^(definterface return-from-frame (frame-number form)$/;"	f
return-from-frame	slime/swank-clisp.lisp	/^(defimplementation return-from-frame (index form)$/;"	f
return-from-frame	slime/swank-cmucl.lisp	/^(defimplementation return-from-frame (index form)$/;"	f
return-from-frame	slime/swank-lispworks.lisp	/^(defimplementation return-from-frame (frame-number form)$/;"	f
return-from-frame	slime/swank-openmcl.lisp	/^(defimplementation return-from-frame (index form)$/;"	f
return-from-frame	slime/swank-scl.lisp	/^(defimplementation return-from-frame (index form)$/;"	f
revappend	slime/xref.lisp	/^(define-caller-pattern revappend (form form) :lisp)$/;"	f
reverse	slime/xref.lisp	/^(define-caller-pattern reverse (form) :lisp)$/;"	f
reverse-strings	practicals-1.0.3/libraries/cl-ppcre-1.2.3/parser.lisp	/^(defun reverse-strings (parse-tree)$/;"	f
revert-global-io-redirection	slime/swank.lisp	/^(defun revert-global-io-redirection ()$/;"	f
rewrites	paip/aip_ch2.lisp	/^(defun rewrites (category)$/;"	f
rmapcar	onlisp.lisp	/^(defun rmapcar (fn &rest args)$/;"	f
room	slime/xref.lisp	/^(define-caller-pattern room ((:optional form)) :lisp)$/;"	f
rotatef	slime/xref.lisp	/^(define-caller-pattern rotatef ((:star form)) :lisp)$/;"	f
round	slime/xref.lisp	/^(define-caller-pattern round (form (:optional form)) :lisp)$/;"	f
row->song	practicals-1.0.3/Chapter29/playlist.lisp	/^(defun row->song (song-db-entry)$/;"	f
row-comparator	practicals-1.0.3/Chapter27/database.lisp	/^(defun row-comparator (column-names schema)$/;"	f
row-equality-tester	practicals-1.0.3/Chapter27/database.lisp	/^(defun row-equality-tester (schema)$/;"	f
row-major-aref	slime/xref.lisp	/^(define-caller-pattern row-major-aref (form form) :lisp2)$/;"	f
rpalindromep	nifty_funs.lisp	/^(defun rpalindromep (string)$/;"	f
rplaca	slime/xref.lisp	/^(define-caller-pattern rplaca (form form) :lisp)$/;"	f
rplacd	slime/xref.lisp	/^(define-caller-pattern rplacd (form form) :lisp)$/;"	f
rule-lhs	paip/aip_ch2.lisp	/^(defun rule-lhs (rule)$/;"	f
rule-rhs	paip/aip_ch2.lisp	/^(defun rule-rhs (rule)$/;"	f
run-hook	slime/swank.lisp	/^(defun run-hook (functions &rest arguments)$/;"	f
run-repl-eval-hooks	slime/contrib/swank-listener-hooks.lisp	/^(defun run-repl-eval-hooks (form)$/;"	f
run-tests	chiglug-macros/power-of-lisp-macros.lisp	/^(defun run-tests ()$/;"	f
s:cpo_save	Session.vim	/^let s:cpo_save=&cpo$/;"	v
s:l	Session.vim	/^let s:l = 4 - ((3 * winheight(0) + 11) \/ 23)$/;"	v
s:so_save	Session.vim	/^let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0$/;"	v
s:sx	Session.vim	/^let s:sx = expand("<sfile>:p:r")."x.vim"$/;"	v
s:wipebuf	Session.vim	/^  let s:wipebuf = bufnr('%')$/;"	v
safe-condition-message	slime/swank.lisp	/^(defun safe-condition-message (condition)$/;"	f
safe-definition-finding	slime/swank-cmucl.lisp	/^(defmacro safe-definition-finding (&body body)$/;"	f
safe-definition-finding	slime/swank-scl.lisp	/^(defmacro safe-definition-finding (&body body)$/;"	f
safe-function-source-location	slime/swank-sbcl.lisp	/^(defun safe-function-source-location (fun name)$/;"	f
safe-length	slime/swank.lisp	/^(defun safe-length (list)$/;"	f
safe-read-from-string	practicals-1.0.3/Chapter29/mp3-browser.lisp	/^(defun safe-read-from-string (string)$/;"	f
safe-source-location-for-emacs	slime/swank-sbcl.lisp	/^(defun safe-source-location-for-emacs (code-location)$/;"	f
sanitize-xrefs	slime/swank-sbcl.lisp	/^(defun sanitize-xrefs (xrefs)$/;"	f
save-db	db.lisp	/^(defun save-db (filename)$/;"	f
save-db	practicals-1.0.3/Chapter03/simple-database.lisp	/^(defun save-db (filename)$/;"	f
save-presented-object	slime/contrib/swank-presentations.lisp	/^(defun save-presented-object (object)$/;"	f
sbcl-package-p	slime/swank-sbcl.lisp	/^(defun sbcl-package-p (package)$/;"	f
sbcl-source-file-p	slime/swank-sbcl.lisp	/^(defun sbcl-source-file-p (filename)$/;"	f
sbit	slime/xref.lisp	/^(define-caller-pattern sbit (form (:star form)) :lisp)$/;"	f
scale-float	slime/xref.lisp	/^(define-caller-pattern scale-float (form form) :lisp)$/;"	f
scan	practicals-1.0.3/libraries/cl-ppcre-1.2.3/api.lisp	/^(defgeneric scan (regex target-string &key start end)$/;"	f
scan	practicals-1.0.3/libraries/cl-ppcre-1.2.3/api.lisp	/^(define-compiler-macro scan (&whole form &environment env regex target-string &rest rest)$/;"	f
scan	practicals-1.0.3/libraries/cl-ppcre-1.2.3/api.lisp	/^(defmethod scan ((parse-tree t) target-string$/;"	f
scan	practicals-1.0.3/libraries/cl-ppcre-1.2.3/api.lisp	/^(defmethod scan ((regex-string string) target-string$/;"	f
scan	practicals-1.0.3/libraries/cl-ppcre-1.2.3/api.lisp	/^(defmethod scan ((scanner function) target-string$/;"	f
scan	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<br><a class=none name="scan"><b>scan<\/b> <i>regex target-string <tt>&amp;key<\/tt> start end<\/i> =&gt; <i>match-start, match-end, reg-starts, reg-ends<\/i><\/a>$/;"	a
scan-to-strings	practicals-1.0.3/libraries/cl-ppcre-1.2.3/api.lisp	/^(define-compiler-macro scan-to-strings$/;"	f
scan-to-strings	practicals-1.0.3/libraries/cl-ppcre-1.2.3/api.lisp	/^(defun scan-to-strings (regex target-string &key (start 0)$/;"	f
scan-to-strings	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<br><a class=none name="scan-to-strings"><b>scan-to-strings<\/b> <i>regex target-string <tt>&amp;key<\/tt> start end sharedp<\/i> =&gt; <i>match, regs<\/i><\/a>$/;"	a
schar	slime/xref.lisp	/^(define-caller-pattern schar (form form) :lisp)$/;"	f
scl-inspect	slime/swank-scl.lisp	/^(defun scl-inspect (o)$/;"	f
scope	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<h4><a name="scope" class=none>Strange scoping of embedded modifiers<\/a><\/h4>$/;"	a
score	practicals-1.0.3/Chapter23/spam.lisp	/^(defun score (features)$/;"	f
score-completion	slime/contrib/swank-fuzzy.lisp	/^(defun score-completion (completion short full)$/;"	f
search	slime/xref.lisp	/^(define-caller-pattern search (form form &key (:star form)) :lisp)$/;"	f
second	slime/xref.lisp	/^(define-caller-pattern second (form) :lisp)$/;"	f
section	slime/doc/Makefile	/^section := $(shell grep INFO-DIR-SECTION $(infofiles) | sed 's\/INFO-DIR-SECTION \/\/')$/;"	m
select	db.lisp	/^(defun select (selector-fn)$/;"	f
select	practicals-1.0.3/Chapter03/simple-database.lisp	/^(defun select (selector-fn)$/;"	f
select	practicals-1.0.3/Chapter27/database.lisp	/^(defun select (&key (columns t) from where distinct order-by)$/;"	f
self-evaluating-p	practicals-1.0.3/Chapter31/html.lisp	/^(defun self-evaluating-p (form)$/;"	f
send	slime/swank-abcl.lisp	/^(defimplementation send (thread object)$/;"	f
send	slime/swank-allegro.lisp	/^(defimplementation send (thread message)$/;"	f
send	slime/swank-backend.lisp	/^(definterface send (thread object)$/;"	f
send	slime/swank-corman.lisp	/^(defimplementation send (thread message)$/;"	f
send	slime/swank-lispworks.lisp	/^(defimplementation send (thread object)$/;"	f
send	slime/swank-openmcl.lisp	/^(defimplementation send (thread message)$/;"	f
send	slime/swank-scl.lisp	/^(defimplementation send (thread message)$/;"	f
send	slime/xref.lisp	/^(define-caller-pattern send (form fn (:star form)) :flavors)$/;"	f
send-oob-to-emacs	slime/swank.lisp	/^(defun send-oob-to-emacs (object)$/;"	f
send-repl-results-to-emacs	slime/swank.lisp	/^(defun send-repl-results-to-emacs (values)    $/;"	f
send-to-control-thread	slime/swank.lisp	/^(defun send-to-control-thread (object)$/;"	f
send-to-emacs	slime/swank.lisp	/^(defun send-to-emacs (object)$/;"	f
send-to-socket-io	slime/swank.lisp	/^(defun send-to-socket-io (event) $/;"	f
sentence	paip/aip_ch2.lisp	/^(defun sentence ()$/;"	f
seq	practicals-1.0.3/libraries/cl-ppcre-1.2.3/parser.lisp	/^(defun seq (lexer)$/;"	f
seq	slime/contrib/swank-kawa.scm	/^(define-syntax seq$/;"	f
serve	slime/contrib/swank-mit-scheme.scm	/^(define (serve socket)$/;"	f
serve-connection	slime/swank.lisp	/^(defun serve-connection (socket style dont-close external-format)$/;"	f
serve-requests	slime/swank.lisp	/^(defun serve-requests (connection)$/;"	f
set	slime/contrib/swank-kawa.scm	/^(define-syntax set$/;"	f
set	slime/xref.lisp	/^(define-caller-pattern set (form form) :lisp)$/;"	f
set-char-bit	slime/xref.lisp	/^(define-caller-pattern set-char-bit (form form form) :lisp)$/;"	f
set-cookie	practicals-1.0.3/Chapter26/allegroserve.lisp	/^(defun set-cookie (request entity)$/;"	f
set-cookie-code	practicals-1.0.3/Chapter26/html-infrastructure.lisp	/^(defun set-cookie-code (function-name request param)$/;"	f
set-cookies-code	practicals-1.0.3/Chapter26/html-infrastructure.lisp	/^(defun set-cookies-code (function-name request params)$/;"	f
set-default-directory	slime/swank-abcl.lisp	/^(defimplementation set-default-directory (directory)$/;"	f
set-default-directory	slime/swank-allegro.lisp	/^(defimplementation set-default-directory (directory)$/;"	f
set-default-directory	slime/swank-backend.lisp	/^(definterface set-default-directory (directory)$/;"	f
set-default-directory	slime/swank-clisp.lisp	/^(defimplementation set-default-directory (directory)$/;"	f
set-default-directory	slime/swank-cmucl.lisp	/^(defimplementation set-default-directory (directory)$/;"	f
set-default-directory	slime/swank-corman.lisp	/^(defimplementation set-default-directory (directory)$/;"	f
set-default-directory	slime/swank-ecl.lisp	/^(defimplementation set-default-directory (directory)$/;"	f
set-default-directory	slime/swank-lispworks.lisp	/^(defimplementation set-default-directory (directory)$/;"	f
set-default-directory	slime/swank-scl.lisp	/^(defimplementation set-default-directory (directory)$/;"	f
set-difference	slime/xref.lisp	/^(define-caller-pattern set-difference (form form &key (:star form)) :lisp)$/;"	f
set-dispatch-macro-character	slime/xref.lisp	/^(define-caller-pattern set-dispatch-macro-character$/;"	f
set-exclusive-or	slime/xref.lisp	/^(define-caller-pattern set-exclusive-or (form form &key (:star form)) :lisp)$/;"	f
set-flag	practicals-1.0.3/libraries/cl-ppcre-1.2.3/convert.lisp	/^(defun set-flag (token)$/;"	f
set-macro-character	slime/xref.lisp	/^(define-caller-pattern set-macro-character (form fn &optional form) :lisp)$/;"	f
set-package	slime/swank.lisp	/^(defslimefun set-package (name)$/;"	f
set-pprint-dispatch	slime/xref.lisp	/^(define-caller-pattern set-pprint-dispatch (form form &optional form form)$/;"	f
set-sigint-handler	slime/swank-lispworks.lisp	/^(defun set-sigint-handler ()$/;"	f
set-sigio-handler	slime/swank-cmucl.lisp	/^(defun set-sigio-handler ()$/;"	f
set-sigio-handler	slime/swank-sbcl.lisp	/^(defun set-sigio-handler ()$/;"	f
set-step-breakpoints	slime/swank-cmucl.lisp	/^(defun set-step-breakpoints (frame)$/;"	f
set-step-breakpoints	slime/swank-scl.lisp	/^(defun set-step-breakpoints (frame)$/;"	f
set-stream-timeout	slime/swank-backend.lisp	/^(definterface set-stream-timeout (stream timeout)$/;"	f
set-stream-timeout	slime/swank-scl.lisp	/^(defimplementation set-stream-timeout (stream timeout)$/;"	f
set-syntax-from-char	slime/xref.lisp	/^(define-caller-pattern set-syntax-from-char (form form &optional form form) :lisp)$/;"	f
set-thread-description	slime/swank-backend.lisp	/^(definterface set-thread-description (thread description)$/;"	f
setf	slime/xref.lisp	/^(define-caller-pattern setf ((:star form form)) :lisp)$/;"	f
setf-definitions	slime/swank-cmucl.lisp	/^(defun setf-definitions (name)$/;"	f
setf-definitions	slime/swank-scl.lisp	/^(defun setf-definitions (name)$/;"	f
setq	slime/xref.lisp	/^(define-caller-pattern setq ((:star var form)) :lisp)$/;"	f
setup	slime/swank-loader.lisp	/^(defun setup ()$/;"	f
setup-server	slime/swank.lisp	/^(defun setup-server (port announce-fn style dont-close external-format)$/;"	f
setup-stream-indirection	slime/swank.lisp	/^(defun setup-stream-indirection (stream-var &optional stream)$/;"	f
seventh	slime/xref.lisp	/^(define-caller-pattern seventh (form) :lisp)$/;"	f
several-scans	chiglug-macros/power-of-lisp-macros.lisp	/^(defun several-scans (&rest strings)$/;"	f
severity	slime/swank-backend.lisp	/^(deftype severity () $/;"	f
severity-for-emacs	slime/swank-cmucl.lisp	/^(defun severity-for-emacs (condition)$/;"	f
severity-for-emacs	slime/swank-scl.lisp	/^(defun severity-for-emacs (condition)$/;"	f
sexp->ops	practicals-1.0.3/Chapter31/html.lisp	/^(defun sexp->ops (body)$/;"	f
sexp-html-p	practicals-1.0.3/Chapter31/html.lisp	/^(defun sexp-html-p (form)$/;"	f
shadow	slime/xref.lisp	/^(define-caller-pattern shadow ((:or symbol ((:star symbol)))$/;"	f
shadowing-import	slime/xref.lisp	/^(define-caller-pattern shadowing-import ((:or symbol ((:star symbol)))$/;"	f
shared-initialize	slime/xref.lisp	/^(define-caller-pattern shared-initialize (form form (:star form)) :lisp2)$/;"	f
shebang-reader	slime/swank-sbcl.lisp	/^(defun shebang-reader (stream sub-character infix-parameter)$/;"	f
shebang-readtable	slime/swank-sbcl.lisp	/^(defun shebang-readtable ()$/;"	f
shiftf	slime/xref.lisp	/^(define-caller-pattern shiftf ((:plus form) form) :lisp)$/;"	f
short-float-epsilon	slime/xref.lisp	/^(define-variable-pattern short-float-epsilon :lisp)$/;"	f
short-float-negative-epsilon	slime/xref.lisp	/^(define-variable-pattern short-float-negative-epsilon :lisp)$/;"	f
short-site-name	slime/xref.lisp	/^(define-caller-pattern short-site-name () :lisp)$/;"	f
shortest-package-nickname	slime/swank.lisp	/^(defun shortest-package-nickname (package)$/;"	f
shoutcast	practicals-1.0.3/Chapter28/shoutcast.lisp	/^(defun shoutcast (request entity)$/;"	f
show-cookies	practicals-1.0.3/Chapter26/allegroserve.lisp	/^(defun show-cookies (request entity)$/;"	f
show-feature	practicals-1.0.3/Chapter23/spam.lisp	/^(defun show-feature (feature)$/;"	f
show-query-params	practicals-1.0.3/Chapter26/allegroserve.lisp	/^(defun show-query-params (request entity)$/;"	f
show-summary	practicals-1.0.3/Chapter23/spam.lisp	/^(defun show-summary (file text classification score)$/;"	f
show-tag-header	practicals-1.0.3/Chapter25/id3v2.lisp	/^(defun show-tag-header (file)$/;"	f
show-tag-headers	practicals-1.0.3/Chapter25/id3v2.lisp	/^(defun show-tag-headers (dir) $/;"	f
show-timing-data	practicals-1.0.3/Chapter32/profiler.lisp	/^(defun show-timing-data ()$/;"	f
shuffle-by-album	practicals-1.0.3/Chapter29/playlist.lisp	/^(defun shuffle-by-album (playlist)$/;"	f
shuffle-by-song	practicals-1.0.3/Chapter29/playlist.lisp	/^(defun shuffle-by-song (playlist)$/;"	f
shuffle-playlist	practicals-1.0.3/Chapter29/playlist.lisp	/^(defun shuffle-playlist (playlist shuffle)$/;"	f
shuffle-table	practicals-1.0.3/Chapter27/database.lisp	/^(defun shuffle-table (table)$/;"	f
shuffle-vector	practicals-1.0.3/Chapter23/spam.lisp	/^(defun shuffle-vector (vector)$/;"	f
shuffled-album-names	practicals-1.0.3/Chapter29/playlist.lisp	/^(defun shuffled-album-names (playlist)$/;"	f
sieve5	nifty_funs.lisp	/^(defun sieve5 (n)$/;"	f
sigcontext-object	slime/swank-cmucl.lisp	/^(defun sigcontext-object (sc index)$/;"	f
sigcontext-object	slime/swank-scl.lisp	/^(defun sigcontext-object (sc index)$/;"	f
sigint-handler	slime/swank-lispworks.lisp	/^(defun sigint-handler ()$/;"	f
sigio-handler	slime/swank-cmucl.lisp	/^(defun sigio-handler (signal code scp)$/;"	f
sigio-handler	slime/swank-sbcl.lisp	/^(defun sigio-handler (signal code scp)$/;"	f
signal	slime/xref.lisp	/^(define-caller-pattern signal (form (:star form)) :lisp2)$/;"	f
signal-breakpoint	slime/swank-cmucl.lisp	/^(defun signal-breakpoint (breakpoint frame)$/;"	f
signal-breakpoint	slime/swank-scl.lisp	/^(defun signal-breakpoint (breakpoint frame)$/;"	f
signal-compiler-condition	slime/swank-allegro.lisp	/^(defun signal-compiler-condition (&rest args)$/;"	f
signal-compiler-condition	slime/swank-cmucl.lisp	/^(defun signal-compiler-condition (condition context)$/;"	f
signal-compiler-condition	slime/swank-ecl.lisp	/^(defun signal-compiler-condition (&rest args)$/;"	f
signal-compiler-condition	slime/swank-lispworks.lisp	/^(defun signal-compiler-condition (message location condition)$/;"	f
signal-compiler-condition	slime/swank-sbcl.lisp	/^(defun signal-compiler-condition (condition context)$/;"	f
signal-compiler-condition	slime/swank-scl.lisp	/^(defun signal-compiler-condition (condition context)$/;"	f
signal-compiler-warning	slime/swank-clisp.lisp	/^(defun signal-compiler-warning (cstring args severity orig-fn)$/;"	f
signal-error-data-base	slime/swank-lispworks.lisp	/^(defun signal-error-data-base (database &optional location)$/;"	f
signal-ppcre-invocation-error	practicals-1.0.3/libraries/cl-ppcre-1.2.3/errors.lisp	/^(defmacro signal-ppcre-invocation-error (format-control &rest format-arguments)$/;"	f
signal-ppcre-syntax-error	practicals-1.0.3/libraries/cl-ppcre-1.2.3/errors.lisp	/^(defmacro signal-ppcre-syntax-error (format-control &rest format-arguments)$/;"	f
signal-ppcre-syntax-error*	practicals-1.0.3/libraries/cl-ppcre-1.2.3/errors.lisp	/^(defmacro signal-ppcre-syntax-error* (pos format-control &rest format-arguments)$/;"	f
signal-undefined-functions	slime/swank-lispworks.lisp	/^(defun signal-undefined-functions (htab &optional filename)$/;"	f
signum	slime/xref.lisp	/^(define-caller-pattern signum (form) :lisp)$/;"	f
simple-announce-function	slime/swank.lisp	/^(defun simple-announce-function (port)$/;"	f
simple-bit-vector-p	slime/xref.lisp	/^(define-caller-pattern simple-bit-vector-p (form) :lisp)$/;"	f
simple-break	slime/swank.lisp	/^(defslimefun simple-break ()$/;"	f
simple-completions	slime/contrib/swank-kawa.scm	/^(defslimefun simple-completions (env (pattern <str>) _)$/;"	f
simple-completions	slime/swank.lisp	/^(defslimefun simple-completions (string package)$/;"	f
simple-condition-format-arguments	slime/xref.lisp	/^(define-caller-pattern simple-condition-format-arguments (form) :lisp2)$/;"	f
simple-condition-format-string	slime/xref.lisp	/^(define-caller-pattern simple-condition-format-string (form) :lisp2)$/;"	f
simple-form	practicals-1.0.3/Chapter26/allegroserve.lisp	/^(defun simple-form (request entity)$/;"	f
simple-plus-test	chiglug-macros/power-of-lisp-macros.lisp	/^(define-test simple-plus-test ()$/;"	f
simple-serve-requests	slime/swank.lisp	/^(defun simple-serve-requests (connection)$/;"	f
simple-song-queue	practicals-1.0.3/Chapter28/song-source.lisp	/^(defclass simple-song-queue ()$/;"	f
simple-string-p	slime/xref.lisp	/^(define-caller-pattern simple-string-p (form) :lisp)$/;"	f
simple-vector-p	slime/xref.lisp	/^(define-caller-pattern simple-vector-p (form) :lisp)$/;"	f
sin	slime/xref.lisp	/^(define-caller-pattern sin (form) :lisp)$/;"	f
single-float-epsilon	slime/xref.lisp	/^(define-variable-pattern single-float-epsilon :lisp)$/;"	f
single-float-negative-epsilon	slime/xref.lisp	/^(define-variable-pattern single-float-negative-epsilon :lisp)$/;"	f
single-line-mode-p	practicals-1.0.3/libraries/cl-ppcre-1.2.3/convert.lisp	/^(defmacro single-line-mode-p (flags)$/;"	f
sinh	slime/xref.lisp	/^(define-caller-pattern sinh (form) :lisp)$/;"	f
sis/in	slime/swank-cmucl.lisp	/^(defun sis\/in (stream eof-errorp eof-value)$/;"	f
sis/misc	slime/swank-cmucl.lisp	/^(defun sis\/misc (stream operation &optional arg1 arg2)$/;"	f
sixth	slime/xref.lisp	/^(define-caller-pattern sixth (form) :lisp)$/;"	f
skip	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod skip ((void void))$/;"	f
skip-comments-and-whitespace	slime/swank-source-file-cache.lisp	/^(defun skip-comments-and-whitespace (stream)$/;"	f
skip-toplevel-forms	slime/swank-source-path-parser.lisp	/^(defun skip-toplevel-forms (n stream)$/;"	f
sldb-abort	slime/slime.el	/^(defun sldb-abort ()$/;"	f
sldb-abort	slime/swank.lisp	/^(defslimefun sldb-abort ()$/;"	f
sldb-activate	slime/slime.el	/^(defun sldb-activate (thread level)$/;"	f
sldb-backtrace	slime/contrib/swank-mit-scheme.scm	/^(define (sldb-backtrace condition from to)$/;"	f
sldb-backtrace	slime/swank-clisp.lisp	/^(defun sldb-backtrace ()$/;"	f
sldb-backtrace-aux	slime/contrib/swank-mit-scheme.scm	/^(define (sldb-backtrace-aux k from to)$/;"	f
sldb-backward-frame	slime/slime.el	/^(defun sldb-backward-frame ()$/;"	f
sldb-beginning-of-backtrace	slime/slime.el	/^(defun sldb-beginning-of-backtrace ()$/;"	f
sldb-break	slime/slime.el	/^(defun sldb-break (name)$/;"	f
sldb-break	slime/swank.lisp	/^(defslimefun sldb-break (name)$/;"	f
sldb-break-at-start	slime/swank-allegro.lisp	/^(defimplementation sldb-break-at-start (fname)$/;"	f
sldb-break-at-start	slime/swank-backend.lisp	/^(definterface sldb-break-at-start (symbol)$/;"	f
sldb-break-at-start	slime/swank-cmucl.lisp	/^(defimplementation sldb-break-at-start (fname)$/;"	f
sldb-break-at-start	slime/swank-scl.lisp	/^(defimplementation sldb-break-at-start (fname)$/;"	f
sldb-break-on-return	slime/slime.el	/^(defun sldb-break-on-return ()$/;"	f
sldb-break-on-return	slime/swank-backend.lisp	/^(definterface sldb-break-on-return (frame-number)$/;"	f
sldb-break-on-return	slime/swank-cmucl.lisp	/^(defimplementation sldb-break-on-return (frame)$/;"	f
sldb-break-on-return	slime/swank-scl.lisp	/^(defimplementation sldb-break-on-return (frame)$/;"	f
sldb-break-with-default-debugger	slime/slime.el	/^(defun sldb-break-with-default-debugger ()$/;"	f
sldb-break-with-default-debugger	slime/swank.lisp	/^(defslimefun sldb-break-with-default-debugger ()$/;"	f
sldb-buffers	slime/slime.el	/^(defun sldb-buffers ()$/;"	f
sldb-catch-tags	slime/slime.el	/^(defun sldb-catch-tags (frame)$/;"	f
sldb-condition	slime/swank-backend.lisp	/^(define-condition sldb-condition (condition)$/;"	f
sldb-continue	slime/slime.el	/^(defun sldb-continue ()$/;"	f
sldb-continue	slime/swank.lisp	/^(defslimefun sldb-continue ()$/;"	f
sldb-debugged-continuations	slime/slime.el	/^(defun sldb-debugged-continuations (connection)$/;"	f
sldb-default-action	slime/slime.el	/^(defun sldb-default-action ()$/;"	f
sldb-default-action/mouse	slime/slime.el	/^(defun sldb-default-action\/mouse (event)$/;"	f
sldb-delete-overlays	slime/slime.el	/^(defun sldb-delete-overlays ()$/;"	f
sldb-details-down	slime/slime.el	/^(defun sldb-details-down ()$/;"	f
sldb-details-up	slime/slime.el	/^(defun sldb-details-up ()$/;"	f
sldb-disassemble	slime/slime.el	/^(defun sldb-disassemble ()$/;"	f
sldb-disassemble	slime/swank.lisp	/^(defslimefun sldb-disassemble (index)$/;"	f
sldb-dispatch-extras	slime/slime.el	/^(defun sldb-dispatch-extras (extras)$/;"	f
sldb-down	slime/slime.el	/^(defun sldb-down ()$/;"	f
sldb-end-of-backtrace	slime/slime.el	/^(defun sldb-end-of-backtrace ()$/;"	f
sldb-eval-in-frame	slime/slime.el	/^(defun sldb-eval-in-frame (string)$/;"	f
sldb-exit	slime/slime.el	/^(defun sldb-exit (thread level &optional stepping)$/;"	f
sldb-extras-hooks	slime/slime.el	/^(defvar sldb-extras-hooks)$/;"	f
sldb-fetch-all-frames	slime/slime.el	/^(defun sldb-fetch-all-frames ()$/;"	f
sldb-fetch-more-frames	slime/slime.el	/^(defun sldb-fetch-more-frames (&rest ignore)$/;"	f
sldb-find-buffer	slime/slime.el	/^(defun sldb-find-buffer (thread &optional connection)$/;"	f
sldb-first-abort-restart	slime/slime.el	/^(defun sldb-first-abort-restart ()$/;"	f
sldb-format-reference-node	slime/contrib/slime-references.el	/^(defun sldb-format-reference-node (what)$/;"	f
sldb-format-reference-source	slime/contrib/slime-references.el	/^(defun sldb-format-reference-source (where)$/;"	f
sldb-forward-frame	slime/slime.el	/^(defun sldb-forward-frame ()$/;"	f
sldb-frame-details	slime/slime.el	/^(defun sldb-frame-details ()$/;"	f
sldb-frame-details-visible-p	slime/slime.el	/^(defun sldb-frame-details-visible-p ()$/;"	f
sldb-frame-locals	slime/slime.el	/^(defun sldb-frame-locals (frame)$/;"	f
sldb-frame-number-at-point	slime/slime.el	/^(defun sldb-frame-number-at-point ()$/;"	f
sldb-frame-region	slime/slime.el	/^(defun sldb-frame-region ()$/;"	f
sldb-get-buffer	slime/slime.el	/^(defun sldb-get-buffer (thread &optional connection)$/;"	f
sldb-get-default-buffer	slime/slime.el	/^(defun sldb-get-default-buffer ()$/;"	f
sldb-get-frame	slime/contrib/swank-mit-scheme.scm	/^(define (sldb-get-frame index)$/;"	f
sldb-goto-last-frame	slime/slime.el	/^(defun sldb-goto-last-frame ()$/;"	f
sldb-hide-frame-details	slime/slime.el	/^(defun sldb-hide-frame-details ()$/;"	f
sldb-highlight-sexp	slime/slime.el	/^(defun sldb-highlight-sexp (&optional start end)$/;"	f
sldb-hook	slime/slime.el	/^(defvar sldb-hook nil$/;"	f
sldb-info	slime/contrib/swank-mit-scheme.scm	/^(define (sldb-info state start end)$/;"	f
sldb-insert-condition	slime/slime.el	/^(defun sldb-insert-condition (condition)$/;"	f
sldb-insert-frame	slime/slime.el	/^(defun sldb-insert-frame (frame &optional face)$/;"	f
sldb-insert-frame-variable-value	slime/slime.el	/^(defun sldb-insert-frame-variable-value (value frame index)$/;"	f
sldb-insert-frame-variable-value-function	slime/slime.el	/^(defvar sldb-insert-frame-variable-value-function 'sldb-insert-frame-variable-value)$/;"	f
sldb-insert-frames	slime/slime.el	/^(defun sldb-insert-frames (frames more)$/;"	f
sldb-insert-locals	slime/slime.el	/^(defun sldb-insert-locals (vars prefix frame)$/;"	f
sldb-insert-references	slime/contrib/slime-references.el	/^(defun sldb-insert-references (references)$/;"	f
sldb-insert-restarts	slime/slime.el	/^(defun sldb-insert-restarts (restarts)$/;"	f
sldb-inspect-condition	slime/slime.el	/^(defun sldb-inspect-condition ()$/;"	f
sldb-inspect-in-frame	slime/slime.el	/^(defun sldb-inspect-in-frame (string)$/;"	f
sldb-inspect-var	slime/slime.el	/^(defun sldb-inspect-var ()$/;"	f
sldb-invoke-restart	slime/slime.el	/^(defun sldb-invoke-restart (&optional number)$/;"	f
sldb-invoke-restart-by-name	slime/slime.el	/^(defun sldb-invoke-restart-by-name (restart-name)$/;"	f
sldb-level	slime/slime.el	/^(defun sldb-level ()$/;"	f
sldb-lookup-reference	slime/contrib/slime-references.el	/^(defun sldb-lookup-reference ()$/;"	f
sldb-loop	slime/contrib/swank-mit-scheme.scm	/^(define (sldb-loop level socket)$/;"	f
sldb-loop	slime/swank.lisp	/^(defun sldb-loop (level)$/;"	f
sldb-maybe-insert-references	slime/contrib/slime-references.el	/^(defun sldb-maybe-insert-references (extra)$/;"	f
sldb-mode	slime/slime.el	/^(define-derived-mode sldb-mode fundamental-mode "sldb"$/;"	f
sldb-mode-syntax-table	slime/slime.el	/^(defvar sldb-mode-syntax-table$/;"	f
sldb-next	slime/slime.el	/^(defun sldb-next ()$/;"	f
sldb-next	slime/swank.lisp	/^(define-stepper-function sldb-next sldb-step-next)$/;"	f
sldb-out	slime/slime.el	/^(defun sldb-out ()$/;"	f
sldb-out	slime/swank.lisp	/^(define-stepper-function sldb-out  sldb-step-out)$/;"	f
sldb-overlays	slime/slime.el	/^(defvar sldb-overlays '()$/;"	f
sldb-pprint-eval-in-frame	slime/slime.el	/^(defun sldb-pprint-eval-in-frame (string)$/;"	f
sldb-previous-frame-number	slime/slime.el	/^(defun sldb-previous-frame-number ()$/;"	f
sldb-print-condition	slime/slime.el	/^(defun sldb-print-condition ()$/;"	f
sldb-prune-initial-frames	slime/slime.el	/^(defun sldb-prune-initial-frames (frames)$/;"	f
sldb-quit	slime/slime.el	/^(defun sldb-quit ()$/;"	f
sldb-recenter-region	slime/slime.el	/^(defun sldb-recenter-region (start end &optional center)$/;"	f
sldb-reference-face	slime/contrib/slime-references.el	/^(defface sldb-reference-face $/;"	f
sldb-reference-properties	slime/contrib/slime-references.el	/^(defun sldb-reference-properties (reference)$/;"	f
sldb-restart-at-point	slime/slime.el	/^(defun sldb-restart-at-point ()$/;"	f
sldb-restart-frame	slime/slime.el	/^(defun sldb-restart-frame ()$/;"	f
sldb-restarts	slime/contrib/swank-mit-scheme.scm	/^(define (sldb-restarts restarts)$/;"	f
sldb-return-from-frame	slime/slime.el	/^(defun sldb-return-from-frame (string)$/;"	f
sldb-return-from-frame	slime/swank.lisp	/^(defslimefun sldb-return-from-frame (index string)$/;"	f
sldb-setup	slime/slime.el	/^(defun sldb-setup (thread level condition restarts frames conts)$/;"	f
sldb-show-frame-details	slime/slime.el	/^(defun sldb-show-frame-details ()$/;"	f
sldb-show-frame-source	slime/slime.el	/^(defun sldb-show-frame-source (frame-number)$/;"	f
sldb-show-location-recenter-arg	slime/slime.el	/^(defvar sldb-show-location-recenter-arg nil$/;"	f
sldb-show-source	slime/slime.el	/^(defun sldb-show-source ()$/;"	f
sldb-state	slime/contrib/swank-mit-scheme.scm	/^(define-structure (sldb-state (conc-name sldb-state.)) condition restarts)$/;"	f
sldb-step	slime/slime.el	/^(defun sldb-step ()$/;"	f
sldb-step	slime/swank.lisp	/^(define-stepper-function sldb-step sldb-step-into)$/;"	f
sldb-step-into	slime/swank-backend.lisp	/^(definterface sldb-step-into ()$/;"	f
sldb-step-next	slime/swank-backend.lisp	/^(definterface sldb-step-next ()$/;"	f
sldb-step-out	slime/swank-backend.lisp	/^(definterface sldb-step-out ()$/;"	f
sldb-stepper-condition-p	slime/swank-backend.lisp	/^(definterface sldb-stepper-condition-p (condition)$/;"	f
sldb-sugar-move	slime/slime.el	/^(defun sldb-sugar-move (move-fn)$/;"	f
sldb-toggle-details	slime/slime.el	/^(defun sldb-toggle-details (&optional on)$/;"	f
sldb-up	slime/slime.el	/^(defun sldb-up ()$/;"	f
sldb-var-number-at-point	slime/slime.el	/^(defun sldb-var-number-at-point ()$/;"	f
sldb-xemacs-emulate-point-entered-hook	slime/slime.el	/^(defun sldb-xemacs-emulate-point-entered-hook ()$/;"	f
sldb-xemacs-post-command-hook	slime/slime.el	/^(defun sldb-xemacs-post-command-hook ()$/;"	f
sleep	slime/xref.lisp	/^(define-caller-pattern sleep (form) :lisp)$/;"	f
slime	slime/slime.el	/^(defgroup slime nil$/;"	f
slime	slime/slime.el	/^(defun slime (&optional command coding-system)$/;"	f
slime-M-.-presentation	slime/contrib/slime-presentations.el	/^(defun slime-M-.-presentation (presentation start end buffer &optional where)$/;"	f
slime-M-.-presentation-at-mouse	slime/contrib/slime-presentations.el	/^(defun slime-M-.-presentation-at-mouse (event)$/;"	f
slime-M-.-presentation-at-point	slime/contrib/slime-presentations.el	/^(defun slime-M-.-presentation-at-point (point)$/;"	f
slime-abort-connection	slime/slime.el	/^(defun slime-abort-connection ()$/;"	f
slime-accept-process-output	slime/slime.el	/^(defun slime-accept-process-output (&optional process timeout)$/;"	f
slime-accept-process-output-supports-floats	slime/slime.el	/^(defvar slime-accept-process-output-supports-floats $/;"	f
slime-activate-font-lock-magic	slime/slime.el	/^(defun slime-activate-font-lock-magic ()$/;"	f
slime-add-easy-menu	slime/slime.el	/^(defun slime-add-easy-menu ()$/;"	f
slime-add-face	slime/slime.el	/^(defun slime-add-face (face string)$/;"	f
slime-add-presentation-properties	slime/contrib/slime-presentations.el	/^(defun slime-add-presentation-properties (start end id result-p)$/;"	f
slime-after-change-function	slime/contrib/slime-presentations.el	/^(defun slime-after-change-function (start end &rest ignore)$/;"	f
slime-alistify	slime/slime.el	/^(defun slime-alistify (list key test)$/;"	f
slime-all-xrefs	slime/slime.el	/^(defun slime-all-xrefs ()$/;"	f
slime-analyze-xrefs	slime/slime.el	/^(defun slime-analyze-xrefs (xrefs)$/;"	f
slime-apropos	slime/slime.el	/^(defun slime-apropos (string &optional only-external-p package $/;"	f
slime-apropos-all	slime/slime.el	/^(defun slime-apropos-all ()$/;"	f
slime-apropos-label-properties	slime/slime.el	/^(defvar slime-apropos-label-properties$/;"	f
slime-apropos-package	slime/slime.el	/^(defun slime-apropos-package (package &optional internal)$/;"	f
slime-apropos-summary	slime/slime.el	/^(defun slime-apropos-summary (string case-sensitive-p package only-external-p)$/;"	f
slime-arglist	slime/contrib/slime-autodoc.el	/^(defun slime-arglist (name)$/;"	f
slime-arglist-specializers	slime/slime.el	/^(defun slime-arglist-specializers (arglist)$/;"	f
slime-asdf-init	slime/contrib/slime-asdf.el	/^(defun slime-asdf-init ()$/;"	f
slime-asdf-on-connect	slime/contrib/slime-asdf.el	/^(defun slime-asdf-on-connect ()$/;"	f
slime-asdf-unload	slime/contrib/slime-asdf.el	/^(defun slime-asdf-unload ()$/;"	f
slime-at-top-level-p	slime/slime.el	/^(defun slime-at-top-level-p ()$/;"	f
slime-attempt-connection	slime/slime.el	/^(defun slime-attempt-connection (process retries attempt)$/;"	f
slime-auto-connect	slime/slime.el	/^(defun slime-auto-connect ()$/;"	f
slime-auto-connect	slime/slime.el	/^(defvar slime-auto-connect 'never)$/;"	f
slime-autodoc	slime/contrib/slime-autodoc.el	/^(defun slime-autodoc ()$/;"	f
slime-autodoc-cache	slime/contrib/slime-autodoc.el	/^(defvar slime-autodoc-cache nil$/;"	f
slime-autodoc-cache-type	slime/contrib/slime-autodoc.el	/^(defvar slime-autodoc-cache-type 'last$/;"	f
slime-autodoc-delay	slime/contrib/slime-autodoc.el	/^(defvar slime-autodoc-delay 0.2$/;"	f
slime-autodoc-dimensions-function	slime/contrib/slime-autodoc.el	/^(defvar slime-autodoc-dimensions-function nil)$/;"	f
slime-autodoc-global-at-point	slime/contrib/slime-autodoc.el	/^(defun slime-autodoc-global-at-point ()$/;"	f
slime-autodoc-idle-timer	slime/contrib/slime-autodoc.el	/^(defvar slime-autodoc-idle-timer nil$/;"	f
slime-autodoc-init	slime/contrib/slime-autodoc.el	/^(defun slime-autodoc-init ()$/;"	f
slime-autodoc-last-message	slime/contrib/slime-autodoc.el	/^(defvar slime-autodoc-last-message "")$/;"	f
slime-autodoc-maybe-enable	slime/contrib/slime-autodoc.el	/^(defun slime-autodoc-maybe-enable ()$/;"	f
slime-autodoc-message	slime/contrib/slime-autodoc.el	/^(defun slime-autodoc-message (doc)$/;"	f
slime-autodoc-message-dimensions	slime/contrib/slime-autodoc.el	/^(defun slime-autodoc-message-dimensions ()$/;"	f
slime-autodoc-message-function	slime/contrib/slime-autodoc.el	/^(defvar slime-autodoc-message-function 'slime-autodoc-show-message)$/;"	f
slime-autodoc-message-ok-p	slime/contrib/slime-autodoc.el	/^(defun slime-autodoc-message-ok-p ()$/;"	f
slime-autodoc-mode	slime/contrib/slime-autodoc.el	/^(defun slime-autodoc-mode (&optional arg)$/;"	f
slime-autodoc-mode	slime/contrib/slime-autodoc.el	/^(defvar slime-autodoc-mode nil$/;"	f
slime-autodoc-mode	slime/doc/html/slime_002dautodoc_002dmode.html	/^<a name="slime-autodoc-mode"><\/a>$/;"	a
slime-autodoc-pre-command-refresh-echo-area	slime/contrib/slime-autodoc.el	/^(defun slime-autodoc-pre-command-refresh-echo-area ()$/;"	f
slime-autodoc-show-message	slime/contrib/slime-autodoc.el	/^(defun slime-autodoc-show-message (doc)$/;"	f
slime-autodoc-start-timer	slime/contrib/slime-autodoc.el	/^(defun slime-autodoc-start-timer ()$/;"	f
slime-autodoc-stop-timer	slime/contrib/slime-autodoc.el	/^(defun slime-autodoc-stop-timer ()$/;"	f
slime-autodoc-thing-at-point	slime/contrib/slime-autodoc.el	/^(defun slime-autodoc-thing-at-point ()$/;"	f
slime-autodoc-timer-hook	slime/contrib/slime-autodoc.el	/^(defun slime-autodoc-timer-hook ()$/;"	f
slime-autodoc-unload	slime/contrib/slime-autodoc.el	/^(defun slime-autodoc-unload ()$/;"	f
slime-autodoc-use-multiline-p	slime/contrib/slime-autodoc.el	/^(defcustom slime-autodoc-use-multiline-p nil$/;"	f
slime-backend	slime/slime.el	/^(defcustom slime-backend "swank-loader.lisp"$/;"	f
slime-background-activities-enabled-p	slime/slime.el	/^(defun slime-background-activities-enabled-p ()$/;"	f
slime-background-message	slime/slime.el	/^(defun slime-background-message (format-string &rest format-args)$/;"	f
slime-background-message-function	slime/slime.el	/^(defvar slime-background-message-function 'slime-display-oneliner)$/;"	f
slime-banner-init	slime/contrib/slime-banner.el	/^(defun slime-banner-init ()$/;"	f
slime-banner-unload	slime/contrib/slime-banner.el	/^(defun slime-banner-unload ()$/;"	f
slime-batch-test	slime/slime.el	/^(defun slime-batch-test (results-file)$/;"	f
slime-before-compile-functions	slime/slime.el	/^(defvar slime-before-compile-functions nil$/;"	f
slime-beginning-of-comment	slime/contrib/slime-editing-commands.el	/^(defun slime-beginning-of-comment ()$/;"	f
slime-beginning-of-defun	slime/contrib/slime-editing-commands.el	/^(defun slime-beginning-of-defun ()$/;"	f
slime-beginning-of-list	slime/slime.el	/^(defun slime-beginning-of-list (&optional up)$/;"	f
slime-beginning-of-string	slime/contrib/slime-parse.el	/^(defun slime-beginning-of-string ()$/;"	f
slime-beginning-of-symbol	slime/slime.el	/^(defun slime-beginning-of-symbol ()$/;"	f
slime-bogus-completion-alist	slime/slime.el	/^(defun slime-bogus-completion-alist (list)$/;"	f
slime-browse-classes	slime/contrib/slime-xref-browser.el	/^(defun slime-browse-classes (name)$/;"	f
slime-browse-xrefs	slime/contrib/slime-xref-browser.el	/^(defun slime-browse-xrefs (name type)$/;"	f
slime-browser-map	slime/contrib/slime-xref-browser.el	/^(defvar slime-browser-map nil$/;"	f
slime-buffer-narrowed-p	slime/slime.el	/^(defun slime-buffer-narrowed-p (&optional buffer)$/;"	f
slime-buffer-substring-with-reified-output	slime/contrib/slime-presentations.el	/^(defun slime-buffer-substring-with-reified-output (start end)$/;"	f
slime-busy-p	slime/slime.el	/^(defun slime-busy-p ()$/;"	f
slime-bytecode-stale-p	slime/slime.el	/^(defun slime-bytecode-stale-p ()$/;"	f
slime-c-p-c-init	slime/contrib/slime-c-p-c.el	/^(defun slime-c-p-c-init ()$/;"	f
slime-c-p-c-init-undo-stack	slime/contrib/slime-c-p-c.el	/^(defvar slime-c-p-c-init-undo-stack nil)$/;"	f
slime-c-p-c-unambiguous-prefix-p	slime/contrib/slime-c-p-c.el	/^(defcustom slime-c-p-c-unambiguous-prefix-p t$/;"	f
slime-c-p-c-unload	slime/contrib/slime-c-p-c.el	/^(defun slime-c-p-c-unload ()$/;"	f
slime-call-defun	slime/slime.el	/^(defun slime-call-defun ()$/;"	f
slime-call-describer	slime/slime.el	/^(defun slime-call-describer (arg)$/;"	f
slime-call-with-browser-setup	slime/contrib/slime-xref-browser.el	/^(defun slime-call-with-browser-setup (buffer package title fn)$/;"	f
slime-calls-who	slime/slime.el	/^(defun slime-calls-who (symbol)$/;"	f
slime-cancel-connect-retry-timer	slime/slime.el	/^(defun slime-cancel-connect-retry-timer ()$/;"	f
slime-cheat-sheet	slime/slime.el	/^(defun slime-cheat-sheet ()$/;"	f
slime-cheat-sheet-table	slime/slime.el	/^(defvar slime-cheat-sheet-table$/;"	f
slime-check	slime/slime.el	/^(defmacro slime-check (test-name &rest body)$/;"	f
slime-check-coding-system	slime/slime.el	/^(defun slime-check-coding-system (coding-system)$/;"	f
slime-check-connected	slime/slime.el	/^(defun slime-check-connected ()$/;"	f
slime-check-eval-in-emacs-enabled	slime/slime.el	/^(defun slime-check-eval-in-emacs-enabled ()$/;"	f
slime-check-sldb-level	slime/slime.el	/^(defun slime-check-sldb-level (expected)$/;"	f
slime-check-top-level	slime/slime.el	/^(defun slime-check-top-level (&optional test-name)$/;"	f
slime-check-version	slime/slime.el	/^(defun slime-check-version (version conn)$/;"	f
slime-choose-overlay-for-sexp	slime/slime.el	/^(defun slime-choose-overlay-for-sexp (location)$/;"	f
slime-choose-overlay-region	slime/slime.el	/^(defun slime-choose-overlay-region (note)$/;"	f
slime-cl-symbol-name	slime/slime.el	/^(defun slime-cl-symbol-name (symbol)$/;"	f
slime-cl-symbol-package	slime/slime.el	/^(defun slime-cl-symbol-package (symbol &optional default)$/;"	f
slime-clear-presentations	slime/contrib/slime-presentations.el	/^(defun slime-clear-presentations ()$/;"	f
slime-close-all-parens-in-sexp	slime/contrib/slime-editing-commands.el	/^(defun slime-close-all-parens-in-sexp (&optional region)$/;"	f
slime-close-parens-limit	slime/contrib/slime-editing-commands.el	/^(defvar slime-close-parens-limit nil$/;"	f
slime-coding-system-cl-name	slime/slime.el	/^(defun slime-coding-system-cl-name (coding-system)$/;"	f
slime-coding-system-mulibyte-p	slime/slime.el	/^(defun slime-coding-system-mulibyte-p (coding-system)$/;"	f
slime-column-max	slime/slime.el	/^(defun slime-column-max ()$/;"	f
slime-comment-start-regexp	slime/contrib/slime-editing-commands.el	/^(defvar slime-comment-start-regexp$/;"	f
slime-compilation-finished	slime/slime.el	/^(defun slime-compilation-finished (compilation-unit buffer &optional emacs-snapshot)$/;"	f
slime-compilation-finished-hook	slime/slime.el	/^(defcustom slime-compilation-finished-hook 'slime-maybe-list-compiler-notes$/;"	f
slime-compilation-just-finished	slime/slime.el	/^(defvar slime-compilation-just-finished nil$/;"	f
slime-compile-and-load-file	slime/slime.el	/^(defun slime-compile-and-load-file ()$/;"	f
slime-compile-defun	slime/slime.el	/^(defun slime-compile-defun (&optional maximum-debug-p)$/;"	f
slime-compile-file	slime/slime.el	/^(defun slime-compile-file (&optional load)$/;"	f
slime-compile-region	slime/slime.el	/^(defun slime-compile-region (start end)$/;"	f
slime-compile-string	slime/slime.el	/^(defun slime-compile-string (string start-offset)$/;"	f
slime-compile-with-maximum-debug	slime/slime.el	/^(defvar slime-compile-with-maximum-debug nil$/;"	f
slime-compiler-macroexpand	slime/slime.el	/^(defun slime-compiler-macroexpand ()$/;"	f
slime-compiler-macroexpand-1	slime/slime.el	/^(defun slime-compiler-macroexpand-1 ()$/;"	f
slime-compiler-notes	slime/slime.el	/^(defun slime-compiler-notes ()$/;"	f
slime-compiler-notes-default-action-or-show-details	slime/slime.el	/^(defun slime-compiler-notes-default-action-or-show-details ()$/;"	f
slime-compiler-notes-default-action-or-show-details/mouse	slime/slime.el	/^(defun slime-compiler-notes-default-action-or-show-details\/mouse (event)$/;"	f
slime-compiler-notes-mode	slime/slime.el	/^(define-derived-mode slime-compiler-notes-mode fundamental-mode $/;"	f
slime-compiler-notes-mode-map	slime/slime.el	/^(defvar slime-compiler-notes-mode-map)$/;"	f
slime-compiler-notes-show-details	slime/slime.el	/^(defun slime-compiler-notes-show-details ()$/;"	f
slime-compiler-notes-to-tree	slime/slime.el	/^(defun slime-compiler-notes-to-tree (notes)$/;"	f
slime-compiler-results	slime/slime.el	/^(defun slime-compiler-results ()$/;"	f
slime-complete-delay-restoration	slime/slime.el	/^(defun slime-complete-delay-restoration ()$/;"	f
slime-complete-forget-window-configuration	slime/slime.el	/^(defun slime-complete-forget-window-configuration ()$/;"	f
slime-complete-form	slime/contrib/slime-c-p-c.el	/^(defun slime-complete-form ()$/;"	f
slime-complete-maybe-restore-window-configuration	slime/slime.el	/^(defun slime-complete-maybe-restore-window-configuration ()$/;"	f
slime-complete-maybe-save-window-configuration	slime/slime.el	/^(defun slime-complete-maybe-save-window-configuration ()$/;"	f
slime-complete-restore-window-configuration	slime/slime.el	/^(defun slime-complete-restore-window-configuration ()$/;"	f
slime-complete-symbol	slime/slime.el	/^(defun slime-complete-symbol ()$/;"	f
slime-complete-symbol*	slime/contrib/slime-c-p-c.el	/^(defun slime-complete-symbol* ()$/;"	f
slime-complete-symbol*-fancy	slime/contrib/slime-c-p-c.el	/^(defcustom slime-complete-symbol*-fancy nil$/;"	f
slime-complete-symbol*-fancy-bit	slime/contrib/slime-c-p-c.el	/^(defun slime-complete-symbol*-fancy-bit ()$/;"	f
slime-complete-symbol-function	slime/slime.el	/^(defcustom slime-complete-symbol-function 'slime-simple-complete-symbol$/;"	f
slime-completion-window-active-p	slime/slime.el	/^(defun slime-completion-window-active-p ()$/;"	f
slime-completions	slime/contrib/slime-c-p-c.el	/^(defun slime-completions (prefix)$/;"	f
slime-completions-buffer-name	slime/slime.el	/^(defvar slime-completions-buffer-name "*Completions*")$/;"	f
slime-completions-for-character	slime/contrib/slime-c-p-c.el	/^(defun slime-completions-for-character (prefix)$/;"	f
slime-completions-for-keyword	slime/contrib/slime-c-p-c.el	/^(defun slime-completions-for-keyword (operator-designator prefix$/;"	f
slime-connect	slime/slime.el	/^(defun slime-connect (host port &optional coding-system)$/;"	f
slime-connect-retry-timer	slime/slime.el	/^(defvar slime-connect-retry-timer nil$/;"	f
slime-connected-hook	slime/slime.el	/^(defcustom slime-connected-hook nil$/;"	f
slime-connected-p	slime/slime.el	/^(defun slime-connected-p ()$/;"	f
slime-connection	slime/slime.el	/^(defun slime-connection ()$/;"	f
slime-connection-at-point	slime/slime.el	/^(defun slime-connection-at-point ()$/;"	f
slime-connection-close-hook	slime/slime.el	/^(defun slime-connection-close-hook (process)$/;"	f
slime-connection-counter	slime/slime.el	/^(defvar slime-connection-counter 0$/;"	f
slime-connection-list-make-default	slime/slime.el	/^(defun slime-connection-list-make-default ()$/;"	f
slime-connection-list-mode	slime/slime.el	/^(define-derived-mode slime-connection-list-mode fundamental-mode$/;"	f
slime-connection-port	slime/slime.el	/^(defun slime-connection-port (connection)$/;"	f
slime-contextual-completions	slime/contrib/slime-c-p-c.el	/^(defun* slime-contextual-completions (beg end) $/;"	f
slime-control-modified-char	slime/slime.el	/^(defun slime-control-modified-char (char)$/;"	f
slime-coordinates	slime/slime.el	/^(defun slime-coordinates (origin)$/;"	f
slime-copy-or-inspect-presentation-at-mouse	slime/contrib/slime-presentations.el	/^(defun slime-copy-or-inspect-presentation-at-mouse (event)$/;"	f
slime-copy-presentation-at-mouse-to-kill-ring	slime/contrib/slime-presentations.el	/^(defun slime-copy-presentation-at-mouse-to-kill-ring (event)$/;"	f
slime-copy-presentation-at-mouse-to-point	slime/contrib/slime-presentations.el	/^(defun slime-copy-presentation-at-mouse-to-point (event)$/;"	f
slime-copy-presentation-at-mouse-to-repl	slime/contrib/slime-presentations.el	/^(defun slime-copy-presentation-at-mouse-to-repl (event)$/;"	f
slime-copy-presentation-at-point-to-kill-ring	slime/contrib/slime-presentations.el	/^(defun slime-copy-presentation-at-point-to-kill-ring (point)$/;"	f
slime-copy-presentation-at-point-to-repl	slime/contrib/slime-presentations.el	/^(defun slime-copy-presentation-at-point-to-repl (point)$/;"	f
slime-copy-presentation-to-kill-ring	slime/contrib/slime-presentations.el	/^(defun slime-copy-presentation-to-kill-ring (presentation start end buffer)$/;"	f
slime-copy-presentation-to-repl	slime/contrib/slime-presentations.el	/^(defun slime-copy-presentation-to-repl (presentation start end buffer)$/;"	f
slime-count-lines	slime/slime.el	/^(defun slime-count-lines (start end)$/;"	f
slime-create-filename-translator	slime/contrib/slime-tramp.el	/^(defun* slime-create-filename-translator (&key machine-instance$/;"	f
slime-create-message-window	slime/slime.el	/^(defun slime-create-message-window ()$/;"	f
slime-create-note-overlay	slime/slime.el	/^(defun slime-create-note-overlay (note start end severity message)$/;"	f
slime-create-test-results-buffer	slime/slime.el	/^(defun slime-create-test-results-buffer ()$/;"	f
slime-current-connection	slime/slime.el	/^(defun slime-current-connection ()$/;"	f
slime-current-emacs-snapshot	slime/slime.el	/^(defun slime-current-emacs-snapshot (&optional frame)$/;"	f
slime-current-emacs-snapshot-fingerprint	slime/slime.el	/^(defun slime-current-emacs-snapshot-fingerprint (&optional frame)$/;"	f
slime-current-narrowing-configuration	slime/slime.el	/^(defun slime-current-narrowing-configuration (&optional buffer)$/;"	f
slime-current-package	slime/slime.el	/^(defun slime-current-package ()$/;"	f
slime-current-test	slime/slime.el	/^(defvar slime-current-test)$/;"	f
slime-curry	slime/slime.el	/^(defun slime-curry (fun &rest args)$/;"	f
slime-debugger	slime/slime.el	/^(defgroup slime-debugger nil$/;"	f
slime-def-connection-var	slime/slime.el	/^(defmacro slime-def-connection-var (varname &rest initial-value-and-doc)$/;"	f
slime-default-connection	slime/slime.el	/^(defvar slime-default-connection nil$/;"	f
slime-default-connection	slime/slime.el	/^(defvar slime-default-connection)$/;"	f
slime-default-lisp	slime/slime.el	/^(defvar slime-default-lisp nil$/;"	f
slime-define-key	slime/slime.el	/^(defun* slime-define-key (key command &key prefixed inferior)$/;"	f
slime-define-keys	slime/slime.el	/^(defmacro slime-define-keys (keymap &rest key-command)$/;"	f
slime-defun-at-point	slime/slime.el	/^(defun slime-defun-at-point ()$/;"	f
slime-defun-if-undefined	slime/slime.el	/^(defmacro slime-defun-if-undefined (name &rest rest)$/;"	f
slime-delete-and-extract-region	slime/slime.el	/^(defun slime-delete-and-extract-region (start end)$/;"	f
slime-delete-hidden-outline-text	slime/slime.el	/^(defun slime-delete-hidden-outline-text ()$/;"	f
slime-delete-swank-port-file	slime/slime.el	/^(defun slime-delete-swank-port-file (&optional quiet)$/;"	f
slime-describe-function	slime/slime.el	/^(defun slime-describe-function (symbol-name)$/;"	f
slime-describe-presentation	slime/contrib/slime-presentations.el	/^(defun slime-describe-presentation (presentation)$/;"	f
slime-describe-presentation-at-mouse	slime/contrib/slime-presentations.el	/^(defun slime-describe-presentation-at-mouse (event)$/;"	f
slime-describe-presentation-at-point	slime/contrib/slime-presentations.el	/^(defun slime-describe-presentation-at-point (point)$/;"	f
slime-describe-symbol	slime/slime.el	/^(defun slime-describe-symbol (symbol-name)$/;"	f
slime-disassemble-symbol	slime/slime.el	/^(defun slime-disassemble-symbol (symbol-name)$/;"	f
slime-disconnect	slime/slime.el	/^(defun slime-disconnect ()$/;"	f
slime-dispatch-event	slime/slime.el	/^(defun slime-dispatch-event (event &optional process)$/;"	f
slime-dispatch-presentation-event	slime/contrib/slime-presentations.el	/^(defun slime-dispatch-presentation-event (event)$/;"	f
slime-dispatching-connection	slime/slime.el	/^(defvar slime-dispatching-connection nil$/;"	f
slime-display-buffer-region	slime/slime.el	/^(defun slime-display-buffer-region (buffer start end &optional other-window)$/;"	f
slime-display-compilation-output	slime/slime.el	/^(defcustom slime-display-compilation-output t$/;"	f
slime-display-completion-list	slime/slime.el	/^(defun slime-display-completion-list (completions base)$/;"	f
slime-display-eval-result	slime/slime.el	/^(defun slime-display-eval-result (value)$/;"	f
slime-display-message	slime/slime.el	/^(defun slime-display-message (message buffer-name) $/;"	f
slime-display-oneliner	slime/slime.el	/^(defun slime-display-oneliner (format-string &rest format-args)$/;"	f
slime-display-or-scroll-completions	slime/slime.el	/^(defun slime-display-or-scroll-completions (completions base)$/;"	f
slime-display-output-buffer	slime/slime.el	/^(defun slime-display-output-buffer ()$/;"	f
slime-display-xref-buffer	slime/slime.el	/^(defun slime-display-xref-buffer ()$/;"	f
slime-doc-bindings	slime/slime.el	/^(defvar slime-doc-bindings$/;"	f
slime-doc-map	slime/slime.el	/^(defvar slime-doc-map (make-sparse-keymap)$/;"	f
slime-documentation	slime/slime.el	/^(defun slime-documentation (symbol-name)$/;"	f
slime-draw-connection-list	slime/slime.el	/^(defun slime-draw-connection-list ()$/;"	f
slime-easy-menu	slime/slime.el	/^(defvar slime-easy-menu$/;"	f
slime-echo-arglist	slime/slime.el	/^(defun slime-echo-arglist ()$/;"	f
slime-echo-arglist-function	slime/slime.el	/^(defvar slime-echo-arglist-function 'slime-show-arglist)$/;"	f
slime-ed	slime/slime.el	/^(defun slime-ed (what)$/;"	f
slime-ed-frame	slime/slime.el	/^(defvar slime-ed-frame nil$/;"	f
slime-ed-use-dedicated-frame	slime/slime.el	/^(defcustom slime-ed-use-dedicated-frame t$/;"	f
slime-edit-definition	slime/slime.el	/^(defun slime-edit-definition (name &optional where)$/;"	f
slime-edit-definition-cont	slime/slime.el	/^(defun slime-edit-definition-cont (xrefs name where)$/;"	f
slime-edit-definition-hooks	slime/slime.el	/^(defvar slime-edit-definition-hooks)$/;"	f
slime-edit-definition-other-frame	slime/slime.el	/^(defun slime-edit-definition-other-frame (name)$/;"	f
slime-edit-definition-other-window	slime/slime.el	/^(defun slime-edit-definition-other-window (name)$/;"	f
slime-edit-definition-with-etags	slime/slime.el	/^(defun slime-edit-definition-with-etags (name)$/;"	f
slime-edit-presentation	slime/contrib/slime-presentations.el	/^(defun slime-edit-presentation (name &optional where)$/;"	f
slime-edit-value	slime/slime.el	/^(defun slime-edit-value (form-string)$/;"	f
slime-edit-value-callback	slime/slime.el	/^(defun slime-edit-value-callback (form-string current-value package)$/;"	f
slime-edit-value-commit	slime/slime.el	/^(defun slime-edit-value-commit ()$/;"	f
slime-edit-value-mode	slime/slime.el	/^(define-minor-mode slime-edit-value-mode$/;"	f
slime-editing-commands-init	slime/contrib/slime-editing-commands.el	/^(defun slime-editing-commands-init ()$/;"	f
slime-emacs-20-p	slime/slime.el	/^(defun slime-emacs-20-p ()$/;"	f
slime-emacs-21-p	slime/slime.el	/^(defun slime-emacs-21-p ()$/;"	f
slime-emit-string	slime/slime.el	/^(defun slime-emit-string (string target)$/;"	f
slime-enable-evaluate-in-emacs	slime/slime.el	/^(defcustom slime-enable-evaluate-in-emacs nil$/;"	f
slime-enclosing-form-specs	slime/contrib/slime-parse.el	/^(defun slime-enclosing-form-specs (&optional max-levels)$/;"	f
slime-end-of-defun	slime/contrib/slime-editing-commands.el	/^(defun slime-end-of-defun ()$/;"	f
slime-end-of-proprange-p	slime/slime.el	/^(defun slime-end-of-proprange-p (property)$/;"	f
slime-end-of-symbol	slime/slime.el	/^(defun slime-end-of-symbol ()$/;"	f
slime-ensure-list	slime/contrib/slime-parse.el	/^(defun slime-ensure-list (thing)$/;"	f
slime-ensure-presentation-overlay	slime/contrib/slime-presentations.el	/^(defun slime-ensure-presentation-overlay (start end presentation)$/;"	f
slime-ensure-typeout-frame	slime/contrib/slime-typeout-frame.el	/^(defun slime-ensure-typeout-frame ()$/;"	f
slime-env	slime/swank-lispworks.lisp	/^(defclass slime-env (env:environment) $/;"	f
slime-env	slime/swank-lispworks.lisp	/^(defun slime-env (hook io-bindings) $/;"	f
slime-error-face	slime/slime.el	/^(defface slime-error-face$/;"	f
slime-etags-definitions	slime/slime.el	/^(defun slime-etags-definitions (name)$/;"	f
slime-eval	slime/slime.el	/^(defun slime-eval (sexp &optional package)$/;"	f
slime-eval-async	slime/slime.el	/^(defun slime-eval-async (sexp &optional cont package)$/;"	f
slime-eval-buffer	slime/slime.el	/^(defun slime-eval-buffer ()$/;"	f
slime-eval-defun	slime/slime.el	/^(defun slime-eval-defun ()$/;"	f
slime-eval-describe	slime/slime.el	/^(defun slime-eval-describe (form)$/;"	f
slime-eval-feature-conditional	slime/slime.el	/^(defun slime-eval-feature-conditional (e)$/;"	f
slime-eval-for-lisp	slime/slime.el	/^(defun slime-eval-for-lisp (thread tag form-string)$/;"	f
slime-eval-last-expression	slime/slime.el	/^(defun slime-eval-last-expression ()$/;"	f
slime-eval-last-expression-display-output	slime/slime.el	/^(defun slime-eval-last-expression-display-output ()$/;"	f
slime-eval-macroexpand	slime/slime.el	/^(defun slime-eval-macroexpand (expander &optional string)$/;"	f
slime-eval-macroexpand-expression	slime/slime.el	/^(defvar slime-eval-macroexpand-expression nil$/;"	f
slime-eval-macroexpand-inplace	slime/slime.el	/^(defun slime-eval-macroexpand-inplace (expander)$/;"	f
slime-eval-print	slime/slime.el	/^(defun slime-eval-print (string)$/;"	f
slime-eval-print-last-expression	slime/slime.el	/^(defun slime-eval-print-last-expression (string)$/;"	f
slime-eval-region	slime/slime.el	/^(defun slime-eval-region (start end)$/;"	f
slime-eval-with-transcript	slime/slime.el	/^(defun slime-eval-with-transcript (form &optional fn)$/;"	f
slime-event-buffer-name	slime/slime.el	/^(defvar slime-event-buffer-name "*slime-events*"$/;"	f
slime-event-hooks	slime/slime.el	/^(defvar slime-event-hooks)$/;"	f
slime-events-buffer	slime/slime.el	/^(defun slime-events-buffer ()$/;"	f
slime-execute-tests	slime/slime.el	/^(defun slime-execute-tests ()$/;"	f
slime-expand-abbreviations-and-complete	slime/contrib/slime-c-p-c.el	/^(defun slime-expand-abbreviations-and-complete ()$/;"	f
slime-expand-class-node	slime/contrib/slime-xref-browser.el	/^(defun slime-expand-class-node (widget)$/;"	f
slime-expand-xrefs	slime/contrib/slime-xref-browser.el	/^(defun slime-expand-xrefs (widget)$/;"	f
slime-expected-failures	slime/slime.el	/^(defvar slime-expected-failures nil$/;"	f
slime-extended-operator-name-parser-alist	slime/contrib/slime-parse.el	/^(defvar slime-extended-operator-name-parser-alist$/;"	f
slime-extract-context	slime/slime.el	/^(defun slime-extract-context ()$/;"	f
slime-face-inheritance-possible-p	slime/slime.el	/^(defun slime-face-inheritance-possible-p ()$/;"	f
slime-failed-tests	slime/slime.el	/^(defvar slime-failed-tests nil$/;"	f
slime-fancy	slime/doc/html/slime_002dfancy.html	/^<a name="slime-fancy"><\/a>$/;"	a
slime-fetch-browsable-xrefs	slime/contrib/slime-xref-browser.el	/^(defun slime-fetch-browsable-xrefs (type name)$/;"	f
slime-file-name-merge-source-root	slime/slime.el	/^(defun slime-file-name-merge-source-root (target-filename buffer-filename)$/;"	f
slime-filename-translations	slime/contrib/slime-tramp.el	/^(defcustom slime-filename-translations nil$/;"	f
slime-filesystem-toplevel-directory	slime/slime.el	/^(defun slime-filesystem-toplevel-directory ()$/;"	f
slime-filter-buffers	slime/slime.el	/^(defun slime-filter-buffers (predicate)$/;"	f
slime-find-asd	slime/contrib/slime-asdf.el	/^(defun slime-find-asd (system-names)$/;"	f
slime-find-buffer-package	slime/slime.el	/^(defun slime-find-buffer-package ()$/;"	f
slime-find-buffer-package-function	slime/slime.el	/^(defvar slime-find-buffer-package-function 'slime-search-buffer-package$/;"	f
slime-find-coding-system	slime/slime.el	/^(defun slime-find-coding-system (name)$/;"	f
slime-find-definition-history-ring	slime/slime.el	/^(defvar slime-find-definition-history-ring (make-ring 20)$/;"	f
slime-find-definitions	slime/slime.el	/^(defun slime-find-definitions (name)$/;"	f
slime-find-definitions-function	slime/slime.el	/^(defcustom slime-find-definitions-function 'slime-find-definitions-rpc$/;"	f
slime-find-definitions-rpc	slime/slime.el	/^(defun slime-find-definitions-rpc (name)$/;"	f
slime-find-filename-translators	slime/contrib/slime-tramp.el	/^(defun slime-find-filename-translators (hostname)$/;"	f
slime-find-inspectable-object	slime/slime.el	/^(defun slime-find-inspectable-object (direction limit)$/;"	f
slime-find-next-note	slime/slime.el	/^(defun slime-find-next-note ()$/;"	f
slime-find-note	slime/slime.el	/^(defun slime-find-note (next-candidate-fn)$/;"	f
slime-find-previous-note	slime/slime.el	/^(defun slime-find-previous-note ()$/;"	f
slime-first-change-hook	slime/slime.el	/^(defun slime-first-change-hook ()$/;"	f
slime-flash-region	slime/slime.el	/^(defun slime-flash-region (start end &optional timeout)$/;"	f
slime-fontify-string	slime/contrib/slime-autodoc.el	/^(defun slime-fontify-string (string)$/;"	f
slime-for-each-presentation-in-region	slime/contrib/slime-presentations.el	/^(defun* slime-for-each-presentation-in-region (from to function &optional (object (current-buffer)))$/;"	f
slime-format-display-message	slime/slime.el	/^(defun slime-format-display-message (format &rest args)$/;"	f
slime-forward-blanks	slime/slime.el	/^(defun slime-forward-blanks ()$/;"	f
slime-forward-positioned-source-path	slime/slime.el	/^(defun slime-forward-positioned-source-path (source-path)$/;"	f
slime-forward-reader-comment	slime/slime.el	/^(defun slime-forward-reader-comment ()$/;"	f
slime-forward-reader-conditional	slime/slime.el	/^(defun slime-forward-reader-conditional ()$/;"	f
slime-forward-sexp	slime/slime.el	/^(defun slime-forward-sexp (&optional count)$/;"	f
slime-forward-source-path	slime/slime.el	/^(defun slime-forward-source-path (source-path)$/;"	f
slime-frame-windows	slime/slime.el	/^(defun slime-frame-windows (&optional frame)$/;"	f
slime-from-lisp-filename	slime/slime.el	/^(defun slime-from-lisp-filename (filename)$/;"	f
slime-from-lisp-filename-function	slime/slime.el	/^(defvar slime-from-lisp-filename-function #'identity)$/;"	f
slime-fuzzy-abort	slime/contrib/slime-fuzzy.el	/^(defun slime-fuzzy-abort ()$/;"	f
slime-fuzzy-bind-keys	slime/contrib/slime-fuzzy.el	/^(defun slime-fuzzy-bind-keys ()$/;"	f
slime-fuzzy-choices-buffer	slime/contrib/slime-fuzzy.el	/^(defun slime-fuzzy-choices-buffer (completions interrupted-p start end)$/;"	f
slime-fuzzy-complete-symbol	slime/contrib/slime-fuzzy.el	/^(defun* slime-fuzzy-complete-symbol ()$/;"	f
slime-fuzzy-completion-in-place	slime/contrib/slime-fuzzy.el	/^(defcustom slime-fuzzy-completion-in-place t$/;"	f
slime-fuzzy-completion-limit	slime/contrib/slime-fuzzy.el	/^(defcustom slime-fuzzy-completion-limit 300$/;"	f
slime-fuzzy-completion-time-limit-in-msec	slime/contrib/slime-fuzzy.el	/^(defcustom slime-fuzzy-completion-time-limit-in-msec 1500$/;"	f
slime-fuzzy-completions	slime/contrib/slime-fuzzy.el	/^(defun slime-fuzzy-completions (prefix &optional default-package)$/;"	f
slime-fuzzy-completions-map	slime/contrib/slime-fuzzy.el	/^(defvar slime-fuzzy-completions-map  $/;"	f
slime-fuzzy-completions-mode	slime/contrib/slime-fuzzy.el	/^(define-derived-mode slime-fuzzy-completions-mode $/;"	f
slime-fuzzy-current-completion	slime/contrib/slime-fuzzy.el	/^(defvar slime-fuzzy-current-completion nil$/;"	f
slime-fuzzy-current-completion-overlay	slime/contrib/slime-fuzzy.el	/^(defvar slime-fuzzy-current-completion-overlay nil$/;"	f
slime-fuzzy-dehighlight-current-completion	slime/contrib/slime-fuzzy.el	/^(defun slime-fuzzy-dehighlight-current-completion ()$/;"	f
slime-fuzzy-disable-target-buffer-completions-mode	slime/contrib/slime-fuzzy.el	/^(defun slime-fuzzy-disable-target-buffer-completions-mode ()$/;"	f
slime-fuzzy-done	slime/contrib/slime-fuzzy.el	/^(defun slime-fuzzy-done ()$/;"	f
slime-fuzzy-enable-target-buffer-completions-mode	slime/contrib/slime-fuzzy.el	/^(defun slime-fuzzy-enable-target-buffer-completions-mode ()$/;"	f
slime-fuzzy-end	slime/contrib/slime-fuzzy.el	/^(defvar slime-fuzzy-end nil$/;"	f
slime-fuzzy-explanation	slime/contrib/slime-fuzzy.el	/^(defvar slime-fuzzy-explanation$/;"	f
slime-fuzzy-fill-completions-buffer	slime/contrib/slime-fuzzy.el	/^(defun slime-fuzzy-fill-completions-buffer (completions interrupted-p)$/;"	f
slime-fuzzy-first	slime/contrib/slime-fuzzy.el	/^(defvar slime-fuzzy-first nil$/;"	f
slime-fuzzy-highlight-current-completion	slime/contrib/slime-fuzzy.el	/^(defun slime-fuzzy-highlight-current-completion ()$/;"	f
slime-fuzzy-indent-and-complete-symbol	slime/contrib/slime-fuzzy.el	/^(defun slime-fuzzy-indent-and-complete-symbol ()$/;"	f
slime-fuzzy-init	slime/contrib/slime-fuzzy.el	/^(defun slime-fuzzy-init ()$/;"	f
slime-fuzzy-insert	slime/contrib/slime-fuzzy.el	/^(defun slime-fuzzy-insert (text)$/;"	f
slime-fuzzy-insert-completion-choice	slime/contrib/slime-fuzzy.el	/^(defun slime-fuzzy-insert-completion-choice (completion max-length)$/;"	f
slime-fuzzy-insert-from-point	slime/contrib/slime-fuzzy.el	/^(defun slime-fuzzy-insert-from-point ()$/;"	f
slime-fuzzy-last	slime/contrib/slime-fuzzy.el	/^(defvar slime-fuzzy-last nil$/;"	f
slime-fuzzy-maybe-restore-window-configuration	slime/contrib/slime-fuzzy.el	/^(defun slime-fuzzy-maybe-restore-window-configuration ()$/;"	f
slime-fuzzy-next	slime/contrib/slime-fuzzy.el	/^(defun slime-fuzzy-next ()$/;"	f
slime-fuzzy-original-text	slime/contrib/slime-fuzzy.el	/^(defvar slime-fuzzy-original-text nil$/;"	f
slime-fuzzy-post-command-hook	slime/contrib/slime-fuzzy.el	/^(defun slime-fuzzy-post-command-hook ()$/;"	f
slime-fuzzy-prev	slime/contrib/slime-fuzzy.el	/^(defun slime-fuzzy-prev ()$/;"	f
slime-fuzzy-process-event-in-completions-buffer	slime/contrib/slime-fuzzy.el	/^(defun slime-fuzzy-process-event-in-completions-buffer ()$/;"	f
slime-fuzzy-saved-window-configuration	slime/contrib/slime-fuzzy.el	/^(defvar slime-fuzzy-saved-window-configuration nil$/;"	f
slime-fuzzy-select	slime/contrib/slime-fuzzy.el	/^(defun slime-fuzzy-select ()$/;"	f
slime-fuzzy-select-and-process-event-in-target-buffer	slime/contrib/slime-fuzzy.el	/^(defun slime-fuzzy-select-and-process-event-in-target-buffer ()$/;"	f
slime-fuzzy-select-or-update-completions	slime/contrib/slime-fuzzy.el	/^(defun slime-fuzzy-select-or-update-completions ()$/;"	f
slime-fuzzy-select/mouse	slime/contrib/slime-fuzzy.el	/^(defun slime-fuzzy-select\/mouse (event)$/;"	f
slime-fuzzy-selected	slime/contrib/slime-fuzzy.el	/^(defun slime-fuzzy-selected (prefix completion)$/;"	f
slime-fuzzy-start	slime/contrib/slime-fuzzy.el	/^(defvar slime-fuzzy-start nil$/;"	f
slime-fuzzy-target-buffer	slime/contrib/slime-fuzzy.el	/^(defvar slime-fuzzy-target-buffer nil$/;"	f
slime-fuzzy-target-buffer-completions-mode	slime/contrib/slime-fuzzy.el	/^(define-minor-mode slime-fuzzy-target-buffer-completions-mode$/;"	f
slime-fuzzy-text	slime/contrib/slime-fuzzy.el	/^(defvar slime-fuzzy-text nil$/;"	f
slime-fuzzy-window-configuration-change	slime/contrib/slime-fuzzy.el	/^(defun slime-fuzzy-window-configuration-change ()$/;"	f
slime-generate-connection-name	slime/slime.el	/^(defun slime-generate-connection-name (lisp-name)$/;"	f
slime-get-arglist	slime/contrib/slime-c-p-c.el	/^(defun slime-get-arglist (symbol-name)$/;"	f
slime-get-cached-autodoc	slime/contrib/slime-autodoc.el	/^(defun slime-get-cached-autodoc (symbol-name)$/;"	f
slime-get-fuzzy-buffer	slime/contrib/slime-fuzzy.el	/^(defun slime-get-fuzzy-buffer ()$/;"	f
slime-get-temp-buffer-create	slime/slime.el	/^(defun* slime-get-temp-buffer-create (name &key mode noselectp reusep $/;"	f
slime-global-variable-name-p	slime/contrib/slime-autodoc.el	/^(defun slime-global-variable-name-p (name)$/;"	f
slime-global-variable-name-regexp	slime/contrib/slime-autodoc.el	/^(defcustom slime-global-variable-name-regexp "^\\\\(.*:\\\\)?\\\\([*+]\\\\).+\\\\2$"$/;"	f
slime-goto-connection	slime/slime.el	/^(defun slime-goto-connection ()$/;"	f
slime-goto-first-note-after-compilation	slime/slime.el	/^(defcustom slime-goto-first-note-after-compilation nil$/;"	f
slime-goto-location-buffer	slime/slime.el	/^(defun slime-goto-location-buffer (buffer)$/;"	f
slime-goto-location-position	slime/slime.el	/^(defun slime-goto-location-position (position)$/;"	f
slime-goto-next-xref	slime/slime.el	/^(defun slime-goto-next-xref ()$/;"	f
slime-goto-source-location	slime/slime.el	/^(defun slime-goto-source-location (location &optional noerror)$/;"	f
slime-goto-xref	slime/slime.el	/^(defun slime-goto-xref ()$/;"	f
slime-group-similar	slime/slime.el	/^(defun slime-group-similar (similar-p list)$/;"	f
slime-handle-indentation-update	slime/contrib/slime-indentation.el	/^(defun slime-handle-indentation-update (alist)$/;"	f
slime-handle-indentation-update	slime/slime.el	/^(defun slime-handle-indentation-update (alist)$/;"	f
slime-handle-repl-shortcut	slime/slime.el	/^(defun slime-handle-repl-shortcut ()$/;"	f
slime-header-line-p	slime/contrib/slime-banner.el	/^(defcustom slime-header-line-p (boundp 'header-line-format)$/;"	f
slime-hide-inferior-lisp-buffer	slime/slime.el	/^(defun slime-hide-inferior-lisp-buffer ()$/;"	f
slime-highlight-compiler-notes	slime/slime.el	/^(defvar slime-highlight-compiler-notes t$/;"	f
slime-highlight-differences-in-dirname	slime/slime.el	/^(defun slime-highlight-differences-in-dirname (base-dirname contrast-dirname)$/;"	f
slime-highlight-edits	slime/contrib/slime-highlight-edits.el	/^(defun slime-highlight-edits (beg end &optional len) $/;"	f
slime-highlight-edits-compile-hook	slime/contrib/slime-highlight-edits.el	/^(defun slime-highlight-edits-compile-hook (start end)$/;"	f
slime-highlight-edits-face	slime/contrib/slime-highlight-edits.el	/^(defface slime-highlight-edits-face$/;"	f
slime-highlight-edits-init	slime/contrib/slime-highlight-edits.el	/^(defun slime-highlight-edits-init ()$/;"	f
slime-highlight-edits-init-buffer	slime/contrib/slime-highlight-edits.el	/^(defun slime-highlight-edits-init-buffer ()$/;"	f
slime-highlight-edits-mode	slime/contrib/slime-highlight-edits.el	/^(define-minor-mode slime-highlight-edits-mode $/;"	f
slime-highlight-edits-mode-on	slime/contrib/slime-highlight-edits.el	/^(defun slime-highlight-edits-mode-on () (slime-highlight-edits-mode 1))$/;"	f
slime-highlight-edits-reset-buffer	slime/contrib/slime-highlight-edits.el	/^(defun slime-highlight-edits-reset-buffer ()$/;"	f
slime-highlight-edits-unload	slime/contrib/slime-highlight-edits.el	/^(defun slime-highlight-edits-unload ()$/;"	f
slime-highlight-face	slime/slime.el	/^(defface slime-highlight-face$/;"	f
slime-highlight-notes	slime/slime.el	/^(defun slime-highlight-notes (notes)$/;"	f
slime-highlight-suppressed-forms	slime/slime.el	/^(defcustom slime-highlight-suppressed-forms t$/;"	f
slime-hyperspec-lookup	slime/slime.el	/^(defun slime-hyperspec-lookup (symbol-name)$/;"	f
slime-in-expression-p	slime/slime.el	/^(defun slime-in-expression-p (pattern)$/;"	f
slime-incomplete-form-at-point	slime/contrib/slime-parse.el	/^(defun slime-incomplete-form-at-point ()$/;"	f
slime-incomplete-sexp-at-point	slime/contrib/slime-parse.el	/^(defun slime-incomplete-sexp-at-point (&optional n)$/;"	f
slime-indent-and-complete-symbol	slime/slime.el	/^(defun slime-indent-and-complete-symbol ()$/;"	f
slime-indent-rigidly	slime/slime.el	/^(defun slime-indent-rigidly (start end column)$/;"	f
slime-indentation-init	slime/contrib/slime-indentation.el	/^(defun slime-indentation-init ()$/;"	f
slime-indentation-install	slime/contrib/slime-indentation.el	/^(defun slime-indentation-install ()$/;"	f
slime-indentation-update-hooks	slime/slime.el	/^(defvar slime-indentation-update-hooks)$/;"	f
slime-inferior-connect	slime/slime.el	/^(defun slime-inferior-connect (process args)$/;"	f
slime-inferior-lisp-args	slime/slime.el	/^(defun slime-inferior-lisp-args (process)$/;"	f
slime-inferior-lisp-args	slime/slime.el	/^(defvar slime-inferior-lisp-args nil$/;"	f
slime-inferior-lisp-program-history	slime/slime.el	/^(defvar slime-inferior-lisp-program-history '()$/;"	f
slime-inhibit-pipelining	slime/slime.el	/^(defvar slime-inhibit-pipelining t$/;"	f
slime-init-command	slime/slime.el	/^(defun slime-init-command (port-filename coding-system)$/;"	f
slime-init-connection-state	slime/slime.el	/^(defun slime-init-connection-state (proc)$/;"	f
slime-init-keymaps	slime/slime.el	/^(defun slime-init-keymaps ()$/;"	f
slime-init-output-buffer	slime/slime.el	/^(defun slime-init-output-buffer (connection)$/;"	f
slime-init-xref-buffer	slime/slime.el	/^(defun slime-init-xref-buffer (package ref-type symbol)$/;"	f
slime-input-complete-p	slime/slime.el	/^(defun slime-input-complete-p (start end)$/;"	f
slime-input-stream	slime/swank-gray.lisp	/^(defclass slime-input-stream (fundamental-character-input-stream)$/;"	f
slime-input-stream	slime/swank-scl.lisp	/^(defclass slime-input-stream (ext:character-input-stream)$/;"	f
slime-insert-balanced-comments	slime/contrib/slime-editing-commands.el	/^(defun slime-insert-balanced-comments (arg)$/;"	f
slime-insert-indented	slime/slime.el	/^(defun slime-insert-indented (&rest strings)$/;"	f
slime-insert-motd	slime/contrib/slime-motd.el	/^(defun slime-insert-motd ()$/;"	f
slime-insert-presentation	slime/contrib/slime-presentations.el	/^(defun slime-insert-presentation (string output-id &optional rectangle)$/;"	f
slime-insert-propertized	slime/slime.el	/^(defsubst slime-insert-propertized (props &rest args)$/;"	f
slime-insert-transcript-delimiter	slime/slime.el	/^(defun slime-insert-transcript-delimiter (string)$/;"	f
slime-insert-xrefs	slime/slime.el	/^(defun slime-insert-xrefs (xref-alist)$/;"	f
slime-inside-comment-p	slime/contrib/slime-highlight-edits.el	/^(defun slime-inside-comment-p (beg end)$/;"	f
slime-inside-string-p	slime/contrib/slime-parse.el	/^(defun slime-inside-string-p ()$/;"	f
slime-inspect	slime/slime.el	/^(defun slime-inspect (string)$/;"	f
slime-inspect-presentation	slime/contrib/slime-presentations.el	/^(defun slime-inspect-presentation (presentation start end buffer)$/;"	f
slime-inspect-presentation-at-mouse	slime/contrib/slime-presentations.el	/^(defun slime-inspect-presentation-at-mouse (event)$/;"	f
slime-inspect-presentation-at-point	slime/contrib/slime-presentations.el	/^(defun slime-inspect-presentation-at-point (point)$/;"	f
slime-inspector	slime/slime.el	/^(defgroup slime-inspector nil$/;"	f
slime-inspector-action-face	slime/slime.el	/^(defface slime-inspector-action-face$/;"	f
slime-inspector-buffer	slime/slime.el	/^(defun slime-inspector-buffer ()$/;"	f
slime-inspector-copy-down	slime/slime.el	/^(defun slime-inspector-copy-down (number)$/;"	f
slime-inspector-describe	slime/slime.el	/^(defun slime-inspector-describe ()$/;"	f
slime-inspector-fetch	slime/slime.el	/^(defun slime-inspector-fetch (chunk limit prev cont)$/;"	f
slime-inspector-fetch-chunk	slime/slime.el	/^(defun slime-inspector-fetch-chunk (chunk prev cont)$/;"	f
slime-inspector-fetch-more	slime/slime.el	/^(defun slime-inspector-fetch-more (button)$/;"	f
slime-inspector-fontify	slime/slime.el	/^(defmacro slime-inspector-fontify (face string)$/;"	f
slime-inspector-insert-chunk	slime/slime.el	/^(defun slime-inspector-insert-chunk (chunk prev next)$/;"	f
slime-inspector-insert-content	slime/slime.el	/^(defun slime-inspector-insert-content (content)$/;"	f
slime-inspector-insert-ispec	slime/slime.el	/^(defun slime-inspector-insert-ispec (ispec)$/;"	f
slime-inspector-insert-ispec-function	slime/slime.el	/^(defvar slime-inspector-insert-ispec-function 'slime-inspector-insert-ispec)$/;"	f
slime-inspector-insert-more-button	slime/slime.el	/^(defun slime-inspector-insert-more-button (index previous)$/;"	f
slime-inspector-join-chunks	slime/slime.el	/^(defun slime-inspector-join-chunks (chunk1 chunk2)$/;"	f
slime-inspector-label-face	slime/slime.el	/^(defface slime-inspector-label-face$/;"	f
slime-inspector-limit	slime/slime.el	/^(defvar slime-inspector-limit 500)$/;"	f
slime-inspector-mark-stack	slime/slime.el	/^(defvar slime-inspector-mark-stack '())$/;"	f
slime-inspector-mode	slime/slime.el	/^(define-derived-mode slime-inspector-mode fundamental-mode "Slime-Inspector"$/;"	f
slime-inspector-next	slime/slime.el	/^(defun slime-inspector-next ()$/;"	f
slime-inspector-next-inspectable-object	slime/slime.el	/^(defun slime-inspector-next-inspectable-object (arg)$/;"	f
slime-inspector-next-range	slime/slime.el	/^(defun slime-inspector-next-range (chunk limit prev)$/;"	f
slime-inspector-operate-on-click	slime/slime.el	/^(defun slime-inspector-operate-on-click (event)$/;"	f
slime-inspector-operate-on-point	slime/slime.el	/^(defun slime-inspector-operate-on-point ()$/;"	f
slime-inspector-pop	slime/slime.el	/^(defun slime-inspector-pop ()$/;"	f
slime-inspector-position	slime/slime.el	/^(defun slime-inspector-position ()$/;"	f
slime-inspector-pprint	slime/slime.el	/^(defun slime-inspector-pprint (part)$/;"	f
slime-inspector-previous-inspectable-object	slime/slime.el	/^(defun slime-inspector-previous-inspectable-object (arg)$/;"	f
slime-inspector-quit	slime/slime.el	/^(defun slime-inspector-quit ()$/;"	f
slime-inspector-reinspect	slime/slime.el	/^(defun slime-inspector-reinspect ()$/;"	f
slime-inspector-topline-face	slime/slime.el	/^(defface slime-inspector-topline-face$/;"	f
slime-inspector-type-face	slime/slime.el	/^(defface slime-inspector-type-face$/;"	f
slime-inspector-value-face	slime/slime.el	/^(defface slime-inspector-value-face$/;"	f
slime-install-presentation-streams	slime/contrib/slime-presentation-streams.el	/^(defun slime-install-presentation-streams ()$/;"	f
slime-install-presentations	slime/contrib/slime-presentations.el	/^(defun slime-install-presentations ()$/;"	f
slime-interactive-eval	slime/slime.el	/^(defun slime-interactive-eval (string)$/;"	f
slime-interrupt	slime/slime.el	/^(defun slime-interrupt ()$/;"	f
slime-intersperse	slime/slime.el	/^(defun slime-intersperse (element list)$/;"	f
slime-io-speed-test	slime/slime.el	/^(defun slime-io-speed-test (&optional profile)$/;"	f
slime-isearch	slime/slime.el	/^(defun slime-isearch (string)$/;"	f
slime-isearch-with-function	slime/slime.el	/^(defun slime-isearch-with-function (search-fn string)$/;"	f
slime-keys	slime/slime.el	/^(defvar slime-keys$/;"	f
slime-keywordify	slime/slime.el	/^(defun slime-keywordify (symbol)$/;"	f
slime-kill-all-buffers	slime/slime.el	/^(defun slime-kill-all-buffers ()$/;"	f
slime-kill-without-query-p	slime/slime.el	/^(defcustom slime-kill-without-query-p nil$/;"	f
slime-last-compilation-unit	slime/slime.el	/^(defvar slime-last-compilation-unit nil$/;"	f
slime-last-expression	slime/slime.el	/^(defun slime-last-expression ()$/;"	f
slime-last-output-target-id	slime/slime.el	/^(defvar slime-last-output-target-id 0$/;"	f
slime-length=	slime/slime.el	/^(defun slime-length= (seq n)$/;"	f
slime-length>	slime/slime.el	/^(defun slime-length> (seq n)$/;"	f
slime-lisp	slime/slime.el	/^(defgroup slime-lisp nil$/;"	f
slime-lisp-host	slime/slime.el	/^(defcustom slime-lisp-host "127.0.0.1"$/;"	f
slime-lisp-implementations	slime/slime.el	/^(defvar slime-lisp-implementations nil$/;"	f
slime-lisp-mode-hook	slime/slime.el	/^(defun slime-lisp-mode-hook ()$/;"	f
slime-lisp-modes	slime/slime-autoloads.el	/^(defvar slime-lisp-modes '(lisp-mode))$/;"	f
slime-lisp-modes	slime/slime.el	/^(defvar slime-lisp-modes '(lisp-mode))$/;"	f
slime-lisp-options	slime/slime.el	/^(defun slime-lisp-options (&optional name)$/;"	f
slime-list-all-repl-shortcuts	slime/slime.el	/^(defun slime-list-all-repl-shortcuts ()$/;"	f
slime-list-callees	slime/slime.el	/^(defun slime-list-callees (symbol-name)$/;"	f
slime-list-callers	slime/slime.el	/^(defun slime-list-callers (symbol-name)$/;"	f
slime-list-compiler-notes	slime/slime.el	/^(defun slime-list-compiler-notes (notes &optional emacs-snapshot)$/;"	f
slime-list-connections	slime/slime.el	/^(defun slime-list-connections ()$/;"	f
slime-list-repl-short-cuts	slime/slime.el	/^(defun slime-list-repl-short-cuts ()$/;"	f
slime-list-threads	slime/slime.el	/^(defun slime-list-threads ()$/;"	f
slime-load-contribs	slime/slime.el	/^(defun slime-load-contribs ()$/;"	f
slime-load-file	slime/slime.el	/^(defun slime-load-file (filename)$/;"	f
slime-load-file-set-package	slime/slime.el	/^(defun slime-load-file-set-package (filename package)$/;"	f
slime-load-system	slime/contrib/slime-asdf.el	/^(defun slime-load-system (&optional system)$/;"	f
slime-location-offset	slime/slime.el	/^(defun slime-location-offset (location)$/;"	f
slime-location-p	slime/slime.el	/^(defun slime-location-p (o) (and (consp o) (eq (car o) :location)))$/;"	f
slime-log-event	slime/slime.el	/^(defun slime-log-event (event)$/;"	f
slime-log-events	slime/slime.el	/^(defvar slime-log-events t$/;"	f
slime-lookup-lisp-implementation	slime/slime.el	/^(defun slime-lookup-lisp-implementation (table name)$/;"	f
slime-lookup-shortcut	slime/slime.el	/^(defun slime-lookup-shortcut (name)$/;"	f
slime-macroexpand-1	slime/slime.el	/^(defun slime-macroexpand-1 (&optional repeatedly)$/;"	f
slime-macroexpand-1-inplace	slime/slime.el	/^(defun slime-macroexpand-1-inplace (&optional repeatedly)$/;"	f
slime-macroexpand-again	slime/slime.el	/^(defun slime-macroexpand-again ()$/;"	f
slime-macroexpand-all	slime/slime.el	/^(defun slime-macroexpand-all ()$/;"	f
slime-macroexpand-all-inplace	slime/slime.el	/^(defun slime-macroexpand-all-inplace ()$/;"	f
slime-macroexpansion-minor-mode	slime/doc/html/slime_002dmacroexpansion_002dminor_002dmode.html	/^<a name="slime-macroexpansion-minor-mode"><\/a>$/;"	a
slime-macroexpansion-minor-mode	slime/slime.el	/^(define-minor-mode slime-macroexpansion-minor-mode$/;"	f
slime-make-compilation-finished-continuation	slime/slime.el	/^(defun slime-make-compilation-finished-continuation (current-buffer &optional emacs-snapshot)$/;"	f
slime-make-compile-expression-for-swank	slime/slime.el	/^(defun slime-make-compile-expression-for-swank (string start-offset) $/;"	f
slime-make-extended-operator-parser/look-ahead	slime/contrib/slime-parse.el	/^(defun slime-make-extended-operator-parser\/look-ahead (steps)$/;"	f
slime-make-form-spec-from-string	slime/contrib/slime-parse.el	/^(defun slime-make-form-spec-from-string (string &optional strip-operator-p)$/;"	f
slime-make-net-buffer	slime/slime.el	/^(defun slime-make-net-buffer (name)$/;"	f
slime-make-tramp-file-name	slime/contrib/slime-tramp.el	/^(defun slime-make-tramp-file-name (username remote-host lisp-filename)$/;"	f
slime-make-typeout-frame	slime/contrib/slime-typeout-frame.el	/^(defun slime-make-typeout-frame ()$/;"	f
slime-make-variables-buffer-local	slime/slime.el	/^(defun slime-make-variables-buffer-local (&rest variables)$/;"	f
slime-make-xref-recompilation-cont	slime/slime.el	/^(defun slime-make-xref-recompilation-cont (dspecs)$/;"	f
slime-mark-input-start	slime/slime.el	/^(defun slime-mark-input-start ()$/;"	f
slime-mark-output-end	slime/slime.el	/^(defun slime-mark-output-end ()$/;"	f
slime-mark-output-start	slime/slime.el	/^(defun slime-mark-output-start (&optional position)$/;"	f
slime-mark-presentation	slime/contrib/slime-presentations.el	/^(defun slime-mark-presentation (point)$/;"	f
slime-mark-presentation-end	slime/contrib/slime-presentations.el	/^(defun slime-mark-presentation-end (id &optional target)$/;"	f
slime-mark-presentation-end-handler	slime/contrib/slime-presentations.el	/^(defun slime-mark-presentation-end-handler (process string)$/;"	f
slime-mark-presentation-start	slime/contrib/slime-presentations.el	/^(defun slime-mark-presentation-start (id &optional target)$/;"	f
slime-mark-presentation-start-handler	slime/contrib/slime-presentations.el	/^(defun slime-mark-presentation-start-handler (process string)$/;"	f
slime-maybe-complete-as-filename	slime/slime.el	/^(defun slime-maybe-complete-as-filename ()$/;"	f
slime-maybe-display-output-buffer	slime/slime.el	/^(defun slime-maybe-display-output-buffer (start end)$/;"	f
slime-maybe-list-compiler-notes	slime/slime.el	/^(defun slime-maybe-list-compiler-notes (notes &optional emacs-snapshot)$/;"	f
slime-maybe-show-xrefs-for-notes	slime/slime.el	/^(defun slime-maybe-show-xrefs-for-notes (&optional notes emacs-snapshot)$/;"	f
slime-maybe-start-lisp	slime/slime.el	/^(defun slime-maybe-start-lisp (program program-args directory buffer)$/;"	f
slime-maybe-warn-for-different-source-root	slime/slime.el	/^(defun slime-maybe-warn-for-different-source-root (target-filename buffer-filename)$/;"	f
slime-menu-choices-for-presentation	slime/contrib/slime-presentations.el	/^(defun slime-menu-choices-for-presentation (presentation buffer from to choice-to-lambda)$/;"	f
slime-merge-note-into-overlay	slime/slime.el	/^(defun slime-merge-note-into-overlay (overlay severity message)$/;"	f
slime-merge-notes	slime/slime.el	/^(defun slime-merge-notes (notes)$/;"	f
slime-merge-notes-for-display	slime/slime.el	/^(defun slime-merge-notes-for-display (notes)$/;"	f
slime-message	slime/slime.el	/^(defun slime-message (format &rest args)$/;"	f
slime-message-function	slime/slime.el	/^(defvar slime-message-function 'message)$/;"	f
slime-minibuffer-respecting-message	slime/slime.el	/^(defun slime-minibuffer-respecting-message (format &rest format-args)$/;"	f
slime-mode	slime/doc/html/slime_002dmode.html	/^<a name="slime-mode"><\/a>$/;"	a
slime-mode	slime/slime.el	/^(defgroup slime-mode nil$/;"	f
slime-mode	slime/slime.el	/^(define-minor-mode slime-mode$/;"	f
slime-mode-faces	slime/slime.el	/^(defgroup slime-mode-faces nil$/;"	f
slime-most-severe	slime/slime.el	/^(defun slime-most-severe (sev1 sev2)$/;"	f
slime-motd-init	slime/contrib/slime-motd.el	/^(defun slime-motd-init ()$/;"	f
slime-motd-pathname	slime/contrib/slime-motd.el	/^(defcustom slime-motd-pathname nil$/;"	f
slime-nesting-until-point	slime/contrib/slime-parse.el	/^(defun slime-nesting-until-point (target-point)$/;"	f
slime-net-close	slime/slime.el	/^(defun slime-net-close (process &optional debug)$/;"	f
slime-net-coding-system	slime/slime.el	/^(defvar slime-net-coding-system$/;"	f
slime-net-coding-system	slime/slime.el	/^(defvar slime-net-coding-system)$/;"	f
slime-net-connect	slime/slime.el	/^(defun slime-net-connect (host port coding-system)$/;"	f
slime-net-decode-length	slime/slime.el	/^(defun slime-net-decode-length ()$/;"	f
slime-net-encode-length	slime/slime.el	/^(defun slime-net-encode-length (n)$/;"	f
slime-net-filter	slime/slime.el	/^(defun slime-net-filter (process string)$/;"	f
slime-net-have-input-p	slime/slime.el	/^(defun slime-net-have-input-p ()$/;"	f
slime-net-process-close-hooks	slime/slime.el	/^(defvar slime-net-process-close-hooks '()$/;"	f
slime-net-processes	slime/slime.el	/^(defvar slime-net-processes nil$/;"	f
slime-net-processes	slime/slime.el	/^(defvar slime-net-processes)$/;"	f
slime-net-read	slime/slime.el	/^(defun slime-net-read ()$/;"	f
slime-net-read-or-lose	slime/slime.el	/^(defun slime-net-read-or-lose (process)$/;"	f
slime-net-send	slime/slime.el	/^(defun slime-net-send (sexp proc)$/;"	f
slime-net-sentinel	slime/slime.el	/^(defun slime-net-sentinel (process message)$/;"	f
slime-net-valid-coding-systems	slime/slime.el	/^(defvar slime-net-valid-coding-systems$/;"	f
slime-next-line/not-add-newlines	slime/slime.el	/^(defun slime-next-line\/not-add-newlines ()$/;"	f
slime-next-location	slime/slime.el	/^(defun slime-next-location ()$/;"	f
slime-next-location-function	slime/slime.el	/^(defvar slime-next-location-function nil$/;"	f
slime-next-note	slime/slime.el	/^(defun slime-next-note ()$/;"	f
slime-next-presentation	slime/contrib/slime-presentations.el	/^(defun slime-next-presentation (&optional arg)$/;"	f
slime-nop	slime/slime.el	/^(defun slime-nop ()$/;"	f
slime-note-at-point	slime/slime.el	/^(defun slime-note-at-point ()$/;"	f
slime-note-count-string	slime/slime.el	/^(defun slime-note-count-string (severity count &optional suppress-if-zero)$/;"	f
slime-note-face	slime/slime.el	/^(defface slime-note-face$/;"	f
slime-note-has-location-p	slime/slime.el	/^(defun slime-note-has-location-p (note)$/;"	f
slime-note-overlay-p	slime/slime.el	/^(defun slime-note-overlay-p (overlay)$/;"	f
slime-note-overlays-at-point	slime/slime.el	/^(defun slime-note-overlays-at-point ()$/;"	f
slime-note.location	slime/slime.el	/^(defun slime-note.location (note)$/;"	f
slime-note.message	slime/slime.el	/^(defun slime-note.message (note)$/;"	f
slime-note.references	slime/contrib/slime-references.el	/^(defun slime-note.references (note)$/;"	f
slime-note.severity	slime/slime.el	/^(defun slime-note.severity (note)$/;"	f
slime-note.short-message	slime/slime.el	/^(defun slime-note.short-message (note)$/;"	f
slime-notes-in-same-location-p	slime/slime.el	/^(defun slime-notes-in-same-location-p (a b)$/;"	f
slime-nregex	slime/nregex.lisp	/^(defpackage slime-nregex$/;"	f
slime-one-line-ify	slime/slime.el	/^(defun slime-one-line-ify (string)$/;"	f
slime-oneliner	slime/slime.el	/^(defun slime-oneliner (string)$/;"	f
slime-only-whitespace-p	slime/contrib/slime-highlight-edits.el	/^(defun slime-only-whitespace-p (beg end)$/;"	f
slime-oos	slime/contrib/slime-asdf.el	/^(defun slime-oos (system operation &rest keyword-args)$/;"	f
slime-open-inspector	slime/slime.el	/^(defun slime-open-inspector (inspected-parts &optional point)$/;"	f
slime-open-stream-hooks	slime/slime.el	/^(defvar slime-open-stream-hooks)$/;"	f
slime-open-stream-to-lisp	slime/slime.el	/^(defun slime-open-stream-to-lisp (port)$/;"	f
slime-operator-before-point	slime/slime.el	/^(defun slime-operator-before-point ()$/;"	f
slime-outline-mode-in-events-buffer	slime/slime.el	/^(defvar slime-outline-mode-in-events-buffer nil$/;"	f
slime-output-buffer	slime/slime.el	/^(defun slime-output-buffer (&optional noprompt)$/;"	f
slime-output-filter	slime/slime.el	/^(defun slime-output-filter (process string)$/;"	f
slime-output-stream	slime/swank-gray.lisp	/^(defclass slime-output-stream (fundamental-character-output-stream)$/;"	f
slime-output-stream	slime/swank-scl.lisp	/^(defclass slime-output-stream (ext:character-output-stream)$/;"	f
slime-output-target-marker	slime/slime.el	/^(defun slime-output-target-marker (target)$/;"	f
slime-output-target-to-marker	slime/slime.el	/^(defvar slime-output-target-to-marker$/;"	f
slime-overlay-note	slime/slime.el	/^(defun slime-overlay-note (note)$/;"	f
slime-parse-context	slime/slime.el	/^(defun slime-parse-context (name)$/;"	f
slime-parse-extended-operator-name	slime/contrib/slime-parse.el	/^(defun slime-parse-extended-operator-name (user-point forms indices points)$/;"	f
slime-parse-extended-operator/declare	slime/contrib/slime-parse.el	/^(defun slime-parse-extended-operator\/declare$/;"	f
slime-parse-sexp-at-point	slime/contrib/slime-parse.el	/^(defun slime-parse-sexp-at-point (&optional n skip-blanks-p)$/;"	f
slime-parse-toplevel-form	slime/slime.el	/^(defun slime-parse-toplevel-form ()$/;"	f
slime-pattern-path	slime/slime.el	/^(defun slime-pattern-path (pattern)$/;"	f
slime-ping	slime/slime.el	/^(defun slime-ping ()$/;"	f
slime-point-moves-p	slime/slime.el	/^(defmacro slime-point-moves-p (&rest body)$/;"	f
slime-pop-find-definition-stack	slime/slime.el	/^(defun slime-pop-find-definition-stack ()$/;"	f
slime-pop-to-location	slime/slime.el	/^(defun slime-pop-to-location (location &optional where)$/;"	f
slime-port	slime/slime.el	/^(defcustom slime-port 4005$/;"	f
slime-post-command-hook	slime/slime.el	/^(defun slime-post-command-hook ()$/;"	f
slime-pprint-eval-last-expression	slime/slime.el	/^(defun slime-pprint-eval-last-expression ()$/;"	f
slime-pprint-event	slime/slime.el	/^(defun slime-pprint-event (event buffer)$/;"	f
slime-pre-command-hook	slime/slime.el	/^(defun slime-pre-command-hook ()$/;"	f
slime-prefix-key	slime/slime.el	/^(defvar slime-prefix-key "\\C-c"$/;"	f
slime-presentation	slime/contrib/slime-presentations.el	/^(defstruct slime-presentation text id)$/;"	f
slime-presentation-add-easy-menu	slime/contrib/slime-presentations.el	/^(defun slime-presentation-add-easy-menu ()$/;"	f
slime-presentation-around-click	slime/contrib/slime-presentations.el	/^(defun slime-presentation-around-click (event)$/;"	f
slime-presentation-around-or-before-point	slime/contrib/slime-presentations.el	/^(defun slime-presentation-around-or-before-point (point &optional object)$/;"	f
slime-presentation-around-or-before-point-or-error	slime/contrib/slime-presentations.el	/^(defun slime-presentation-around-or-before-point-or-error (point)$/;"	f
slime-presentation-around-or-before-point-p	slime/contrib/slime-presentations.el	/^(defun slime-presentation-around-or-before-point-p ()$/;"	f
slime-presentation-around-point	slime/contrib/slime-presentations.el	/^(defun slime-presentation-around-point (point &optional object)$/;"	f
slime-presentation-bindings	slime/contrib/slime-presentations.el	/^(defvar slime-presentation-bindings$/;"	f
slime-presentation-bounds	slime/contrib/slime-presentations.el	/^(defun* slime-presentation-bounds (point presentation $/;"	f
slime-presentation-command-map	slime/contrib/slime-presentations.el	/^(defvar slime-presentation-command-map (make-sparse-keymap)$/;"	f
slime-presentation-current-input	slime/contrib/slime-presentations.el	/^(defun slime-presentation-current-input (&optional until-point-p)$/;"	f
slime-presentation-easy-menu	slime/contrib/slime-presentations.el	/^(defvar slime-presentation-easy-menu$/;"	f
slime-presentation-end	slime/contrib/slime-presentations.el	/^(defun* slime-presentation-end (point presentation$/;"	f
slime-presentation-expression	slime/contrib/slime-presentations.el	/^(defun slime-presentation-expression (presentation)$/;"	f
slime-presentation-init-keymaps	slime/contrib/slime-presentations.el	/^(defun slime-presentation-init-keymaps ()$/;"	f
slime-presentation-inspector-insert-ispec	slime/contrib/slime-presentations.el	/^(defun slime-presentation-inspector-insert-ispec (ispec)$/;"	f
slime-presentation-map	slime/contrib/slime-presentations.el	/^(define-key  slime-presentation-map [mouse-2] 'slime-copy-or-inspect-presentation-at-mouse)$/;"	f
slime-presentation-map	slime/contrib/slime-presentations.el	/^(define-key  slime-presentation-map [mouse-3] 'slime-presentation-menu)$/;"	f
slime-presentation-map	slime/contrib/slime-presentations.el	/^(defvar slime-presentation-map (make-sparse-keymap))$/;"	f
slime-presentation-menu	slime/contrib/slime-presentations.el	/^(defun slime-presentation-menu (event)$/;"	f
slime-presentation-on-return-pressed	slime/contrib/slime-presentations.el	/^(defun slime-presentation-on-return-pressed ()$/;"	f
slime-presentation-on-stream-open	slime/contrib/slime-presentations.el	/^(defun slime-presentation-on-stream-open (stream)$/;"	f
slime-presentation-sldb-insert-frame-variable-value	slime/contrib/slime-presentations.el	/^(defun slime-presentation-sldb-insert-frame-variable-value (value frame index)$/;"	f
slime-presentation-start	slime/contrib/slime-presentations.el	/^(defun* slime-presentation-start (point presentation$/;"	f
slime-presentation-start-p	slime/contrib/slime-presentations.el	/^(defun slime-presentation-start-p (tag)$/;"	f
slime-presentation-stop-p	slime/contrib/slime-presentations.el	/^(defun slime-presentation-stop-p (tag)$/;"	f
slime-presentation-syntax-table	slime/contrib/slime-presentations.el	/^(defvar slime-presentation-syntax-table$/;"	f
slime-presentation-whole-p	slime/contrib/slime-presentations.el	/^(defun slime-presentation-whole-p (presentation start end &optional object)$/;"	f
slime-presentation-write	slime/contrib/slime-presentations.el	/^(defun slime-presentation-write (string &optional target)$/;"	f
slime-presentations-around-point	slime/contrib/slime-presentations.el	/^(defun slime-presentations-around-point (point &optional object)$/;"	f
slime-presentations-init	slime/contrib/slime-presentations.el	/^(defun slime-presentations-init ()$/;"	f
slime-preserve-zmacs-region	slime/slime.el	/^(defun slime-preserve-zmacs-region ()$/;"	f
slime-pretty-package-name	slime/slime.el	/^(defun slime-pretty-package-name (name)$/;"	f
slime-pretty-print-presentation	slime/contrib/slime-presentations.el	/^(defun slime-pretty-print-presentation (presentation)$/;"	f
slime-pretty-print-presentation-at-mouse	slime/contrib/slime-presentations.el	/^(defun slime-pretty-print-presentation-at-mouse (event)$/;"	f
slime-pretty-print-presentation-at-point	slime/contrib/slime-presentations.el	/^(defun slime-pretty-print-presentation-at-point (point)$/;"	f
slime-previous-note	slime/slime.el	/^(defun slime-previous-note ()$/;"	f
slime-previous-presentation	slime/contrib/slime-presentations.el	/^(defun slime-previous-presentation (&optional arg)$/;"	f
slime-prin1-to-string	slime/slime.el	/^(defun slime-prin1-to-string (sexp)$/;"	f
slime-print-apropos	slime/slime.el	/^(defun slime-print-apropos (plists)$/;"	f
slime-print-check-error	slime/slime.el	/^(defun slime-print-check-error (reason)$/;"	f
slime-print-check-failed	slime/slime.el	/^(defun slime-print-check-failed (test-name)$/;"	f
slime-print-check-ok	slime/slime.el	/^(defun slime-print-check-ok (test-name)$/;"	f
slime-process	slime/slime.el	/^(defun slime-process (&optional connection)$/;"	f
slime-process-available-input	slime/slime.el	/^(defun slime-process-available-input (process)$/;"	f
slime-profile-package	slime/slime.el	/^(defun slime-profile-package (package callers methods)$/;"	f
slime-profile-report	slime/slime.el	/^(defun slime-profile-report ()$/;"	f
slime-profile-reset	slime/slime.el	/^(defun slime-profile-reset ()$/;"	f
slime-profiled-functions	slime/slime.el	/^(defun slime-profiled-functions ()$/;"	f
slime-propertize-region	slime/slime.el	/^(defmacro slime-propertize-region (props &rest body)$/;"	f
slime-property-bounds	slime/slime.el	/^(defun slime-property-bounds (prop)$/;"	f
slime-property-position	slime/slime.el	/^(defun slime-property-position (text-property &optional object)$/;"	f
slime-protocol-version	slime/slime.el	/^(defvar slime-protocol-version nil)$/;"	f
slime-push-definition-stack	slime/slime.el	/^(defun slime-push-definition-stack (&optional marker narrowing-configuration)$/;"	f
slime-qualify-cl-symbol-name	slime/slime.el	/^(defun slime-qualify-cl-symbol-name (symbol-or-name)$/;"	f
slime-quit	slime/slime.el	/^(defun slime-quit ()$/;"	f
slime-quit-connection-at-point	slime/slime.el	/^(defun slime-quit-connection-at-point (connection)$/;"	f
slime-quit-lisp	slime/slime.el	/^(defun slime-quit-lisp (&optional keep-buffers)$/;"	f
slime-quit-sentinel	slime/slime.el	/^(defun slime-quit-sentinel (process message)$/;"	f
slime-random-words-of-encouragement	slime/slime.el	/^(defun slime-random-words-of-encouragement ()$/;"	f
slime-rcurry	slime/slime.el	/^(defun slime-rcurry (fun &rest args)$/;"	f
slime-re-evaluate-defvar	slime/slime.el	/^(defun slime-re-evaluate-defvar (form)$/;"	f
slime-read-expression-history	slime/slime.el	/^(defvar slime-read-expression-history '()$/;"	f
slime-read-expression-map	slime/slime.el	/^(defvar slime-read-expression-map$/;"	f
slime-read-from-minibuffer	slime/slime.el	/^(defun slime-read-from-minibuffer (prompt &optional initial-value)$/;"	f
slime-read-interactive-args	slime/slime.el	/^(defun slime-read-interactive-args ()$/;"	f
slime-read-package-name	slime/slime.el	/^(defun slime-read-package-name (prompt &optional initial-value)$/;"	f
slime-read-port-and-connect	slime/slime.el	/^(defun slime-read-port-and-connect (inferior-process retries)$/;"	f
slime-read-swank-port	slime/slime.el	/^(defun slime-read-swank-port ()$/;"	f
slime-read-symbol-name	slime/slime.el	/^(defun slime-read-symbol-name (prompt &optional query)$/;"	f
slime-read-system-name	slime/contrib/slime-asdf.el	/^(defun slime-read-system-name (&optional prompt initial-value)$/;"	f
slime-read-test-name	slime/slime.el	/^(defun slime-read-test-name ()$/;"	f
slime-reader-conditional-face	slime/slime.el	/^(defface slime-reader-conditional-face$/;"	f
slime-reading-p	slime/slime.el	/^(defun slime-reading-p ()$/;"	f
slime-recenter-window	slime/slime.el	/^(defun slime-recenter-window (window line)$/;"	f
slime-recently-visited-buffer	slime/slime.el	/^(defun slime-recently-visited-buffer (mode)$/;"	f
slime-recompile-all-xrefs	slime/slime.el	/^(defun slime-recompile-all-xrefs ()$/;"	f
slime-recompile-bytecode	slime/slime.el	/^(defun slime-recompile-bytecode ()$/;"	f
slime-recompile-location	slime/slime.el	/^(defun slime-recompile-location (location)$/;"	f
slime-recompile-locations	slime/slime.el	/^(defun slime-recompile-locations (locations)$/;"	f
slime-recompile-xref	slime/slime.el	/^(defun slime-recompile-xref ()$/;"	f
slime-redirect-trace-output	slime/slime.el	/^(defun slime-redirect-trace-output ()$/;"	f
slime-references-init	slime/contrib/slime-references.el	/^(defun slime-references-init ()$/;"	f
slime-references-unload	slime/contrib/slime-references.el	/^(defun slime-references-unload ()$/;"	f
slime-region-for-defun-at-point	slime/slime.el	/^(defun slime-region-for-defun-at-point ()$/;"	f
slime-reify-old-output	slime/contrib/slime-presentations.el	/^(defun slime-reify-old-output (str-props str-no-props)$/;"	f
slime-reindent-defun	slime/contrib/slime-editing-commands.el	/^(defun slime-reindent-defun (&optional force-text-fill)$/;"	f
slime-reinitialize-inferior-lisp-p	slime/slime.el	/^(defun slime-reinitialize-inferior-lisp-p (program program-args buffer)$/;"	f
slime-remove-balanced-comments	slime/contrib/slime-editing-commands.el	/^(defun slime-remove-balanced-comments ()$/;"	f
slime-remove-edits	slime/contrib/slime-highlight-edits.el	/^(defun slime-remove-edits (start end)$/;"	f
slime-remove-notes	slime/slime.el	/^(defun slime-remove-notes ()$/;"	f
slime-remove-old-overlays	slime/slime.el	/^(defun slime-remove-old-overlays ()$/;"	f
slime-remove-presentation-properties	slime/contrib/slime-presentations.el	/^(defun slime-remove-presentation-properties (from to presentation)$/;"	f
slime-repl	slime/slime.el	/^(defgroup slime-repl nil$/;"	f
slime-repl	slime/slime.el	/^(defun slime-repl ()$/;"	f
slime-repl-abort-read	slime/slime.el	/^(defun slime-repl-abort-read (thread tag)$/;"	f
slime-repl-add-easy-menu	slime/slime.el	/^(defun slime-repl-add-easy-menu ()$/;"	f
slime-repl-add-to-input-history	slime/slime.el	/^(defun slime-repl-add-to-input-history (string)$/;"	f
slime-repl-at-prompt-start-p	slime/slime.el	/^(defun slime-repl-at-prompt-start-p ()$/;"	f
slime-repl-backward-input	slime/slime.el	/^(defun slime-repl-backward-input ()$/;"	f
slime-repl-banner-function	slime/slime.el	/^(defvar slime-repl-banner-function 'slime-repl-insert-banner)$/;"	f
slime-repl-beginning-of-defun	slime/slime.el	/^(defun slime-repl-beginning-of-defun ()$/;"	f
slime-repl-bol	slime/slime.el	/^(defun slime-repl-bol ()$/;"	f
slime-repl-buffer	slime/slime.el	/^(defun slime-repl-buffer (&optional create connection)$/;"	f
slime-repl-call-with-handler	slime/slime.el	/^(defun slime-repl-call-with-handler (fun query)$/;"	f
slime-repl-clear-buffer	slime/slime.el	/^(defun slime-repl-clear-buffer ()$/;"	f
slime-repl-clear-buffer-hook	slime/slime.el	/^(defvar slime-repl-clear-buffer-hook)$/;"	f
slime-repl-clear-output	slime/slime.el	/^(defun slime-repl-clear-output ()$/;"	f
slime-repl-closing-return	slime/slime.el	/^(defun slime-repl-closing-return ()$/;"	f
slime-repl-compile-and-load	slime/slime.el	/^(defslime-repl-shortcut slime-repl-compile-and-load ("compile-and-load" "cl")$/;"	f
slime-repl-compile-system	slime/contrib/slime-asdf.el	/^(defslime-repl-shortcut slime-repl-compile-system ("compile-system")$/;"	f
slime-repl-compile/force-system	slime/contrib/slime-asdf.el	/^(defslime-repl-shortcut slime-repl-compile\/force-system $/;"	f
slime-repl-current-input	slime/slime.el	/^(defun slime-repl-current-input (&optional until-point-p)$/;"	f
slime-repl-current-input-hooks	slime/slime.el	/^(defvar slime-repl-current-input-hooks)$/;"	f
slime-repl-defparameter	slime/slime.el	/^(defslime-repl-shortcut slime-repl-defparameter ("defparameter" "!")$/;"	f
slime-repl-delete-current-input	slime/slime.el	/^(defun slime-repl-delete-current-input ()$/;"	f
slime-repl-delete-from-input-history	slime/slime.el	/^(defun slime-repl-delete-from-input-history (string)$/;"	f
slime-repl-directory-stack	slime/slime.el	/^(defvar slime-repl-directory-stack)$/;"	f
slime-repl-disconnect	slime/slime.el	/^(defslime-repl-shortcut slime-repl-disconnect ("disconnect")$/;"	f
slime-repl-easy-menu	slime/slime.el	/^(defvar slime-repl-easy-menu$/;"	f
slime-repl-emit	slime/slime.el	/^(defun slime-repl-emit (string)$/;"	f
slime-repl-emit-result	slime/slime.el	/^(defun slime-repl-emit-result (string &optional bol)$/;"	f
slime-repl-end-of-defun	slime/slime.el	/^(defun slime-repl-end-of-defun ()$/;"	f
slime-repl-eol	slime/slime.el	/^(defun slime-repl-eol ()$/;"	f
slime-repl-eval-string	slime/slime.el	/^(defun slime-repl-eval-string (string)$/;"	f
slime-repl-find-prompt	slime/slime.el	/^(defun slime-repl-find-prompt (&optional backward)$/;"	f
slime-repl-forward-input	slime/slime.el	/^(defun slime-repl-forward-input ()$/;"	f
slime-repl-grab-old-input	slime/slime.el	/^(defun slime-repl-grab-old-input (replace)$/;"	f
slime-repl-grab-old-output	slime/contrib/slime-presentations.el	/^(defun slime-repl-grab-old-output (replace)$/;"	f
slime-repl-history-file	slime/slime.el	/^(defcustom slime-repl-history-file "~\/.slime-history.eld"$/;"	f
slime-repl-history-file-coding-system	slime/slime.el	/^(defcustom slime-repl-history-file-coding-system $/;"	f
slime-repl-history-pattern	slime/slime.el	/^(defun slime-repl-history-pattern (&optional use-current-input)$/;"	f
slime-repl-history-pattern	slime/slime.el	/^(defvar slime-repl-history-pattern nil$/;"	f
slime-repl-history-replace	slime/slime.el	/^(defun slime-repl-history-replace (direction &optional regexp delete-at-end-p)$/;"	f
slime-repl-history-search-in-progress-p	slime/slime.el	/^(defun slime-repl-history-search-in-progress-p ()$/;"	f
slime-repl-history-size	slime/slime.el	/^(defcustom slime-repl-history-size 200$/;"	f
slime-repl-in-input-area-p	slime/slime.el	/^(defun slime-repl-in-input-area-p ()$/;"	f
slime-repl-input-face	slime/slime.el	/^(defface slime-repl-input-face$/;"	f
slime-repl-input-history-position	slime/slime.el	/^(defvar slime-repl-input-history-position -1$/;"	f
slime-repl-input-line-beginning-position	slime/slime.el	/^(defun slime-repl-input-line-beginning-position ()$/;"	f
slime-repl-input-start-mark	slime/slime.el	/^(defvar slime-repl-input-start-mark)$/;"	f
slime-repl-inputed-output-face	slime/contrib/slime-presentations.el	/^(defface slime-repl-inputed-output-face$/;"	f
slime-repl-insert-banner	slime/slime.el	/^(defun slime-repl-insert-banner ()$/;"	f
slime-repl-insert-prompt	slime/slime.el	/^(defun slime-repl-insert-prompt ()$/;"	f
slime-repl-insert-result	slime/slime.el	/^(defun slime-repl-insert-result (result)$/;"	f
slime-repl-kill-input	slime/slime.el	/^(defun slime-repl-kill-input ()$/;"	f
slime-repl-load-history	slime/slime.el	/^(defun slime-repl-load-history (&optional filename)$/;"	f
slime-repl-load-system	slime/contrib/slime-asdf.el	/^(defslime-repl-shortcut slime-repl-load-system ("load-system")$/;"	f
slime-repl-load/force-system	slime/contrib/slime-asdf.el	/^(defslime-repl-shortcut slime-repl-load\/force-system ("force-load-system")$/;"	f
slime-repl-merge-histories	slime/slime.el	/^(defun slime-repl-merge-histories (old-hist new-hist)$/;"	f
slime-repl-mode	slime/slime.el	/^(defun slime-repl-mode () $/;"	f
slime-repl-mode-beginning-of-defun	slime/slime.el	/^(defun slime-repl-mode-beginning-of-defun ()$/;"	f
slime-repl-mode-end-of-defun	slime/slime.el	/^(defun slime-repl-mode-end-of-defun ()$/;"	f
slime-repl-mode-map	slime/slime.el	/^(define-key slime-repl-mode-map$/;"	f
slime-repl-mode-map	slime/slime.el	/^(defvar slime-repl-mode-map)$/;"	f
slime-repl-newline-and-indent	slime/slime.el	/^(defun slime-repl-newline-and-indent ()$/;"	f
slime-repl-next-input	slime/slime.el	/^(defun slime-repl-next-input ()$/;"	f
slime-repl-next-matching-input	slime/slime.el	/^(defun slime-repl-next-matching-input (regexp)$/;"	f
slime-repl-next-prompt	slime/slime.el	/^(defun slime-repl-next-prompt ()$/;"	f
slime-repl-only-save-lisp-buffers	slime/slime.el	/^(defcustom slime-repl-only-save-lisp-buffers t$/;"	f
slime-repl-output-face	slime/slime.el	/^(defface slime-repl-output-face$/;"	f
slime-repl-output-mouseover-face	slime/contrib/slime-presentations.el	/^(defface slime-repl-output-mouseover-face$/;"	f
slime-repl-package-stack	slime/slime.el	/^(defvar slime-repl-package-stack)$/;"	f
slime-repl-pop-directory	slime/slime.el	/^(defslime-repl-shortcut slime-repl-pop-directory$/;"	f
slime-repl-pop-package	slime/slime.el	/^(defslime-repl-shortcut slime-repl-pop-package ("pop-package" "-p")$/;"	f
slime-repl-position-in-history	slime/slime.el	/^(defun slime-repl-position-in-history (start-pos direction regexp)$/;"	f
slime-repl-previous-input	slime/slime.el	/^(defun slime-repl-previous-input ()$/;"	f
slime-repl-previous-matching-input	slime/slime.el	/^(defun slime-repl-previous-matching-input (regexp)$/;"	f
slime-repl-previous-prompt	slime/slime.el	/^(defun slime-repl-previous-prompt ()$/;"	f
slime-repl-prompt-face	slime/slime.el	/^(defface slime-repl-prompt-face$/;"	f
slime-repl-prompt-start-mark	slime/slime.el	/^(defvar slime-repl-prompt-start-mark)$/;"	f
slime-repl-push-directory	slime/slime.el	/^(defslime-repl-shortcut slime-repl-push-directory$/;"	f
slime-repl-push-package	slime/slime.el	/^(defslime-repl-shortcut slime-repl-push-package ("push-package" "+p")$/;"	f
slime-repl-quit	slime/slime.el	/^(defslime-repl-shortcut slime-repl-quit ("quit")$/;"	f
slime-repl-read-break	slime/slime.el	/^(defun slime-repl-read-break ()$/;"	f
slime-repl-read-history	slime/slime.el	/^(defun slime-repl-read-history (&optional filename noerrer)$/;"	f
slime-repl-read-history-filename	slime/slime.el	/^(defun slime-repl-read-history-filename ()$/;"	f
slime-repl-read-mode	slime/slime.el	/^(define-minor-mode slime-repl-read-mode $/;"	f
slime-repl-read-mode	slime/slime.el	/^(defvar slime-repl-read-mode)$/;"	f
slime-repl-read-string	slime/slime.el	/^(defun slime-repl-read-string (thread tag)$/;"	f
slime-repl-recenter-if-needed	slime/slime.el	/^(defun slime-repl-recenter-if-needed ()$/;"	f
slime-repl-replace-input	slime/slime.el	/^(defun slime-repl-replace-input (string)$/;"	f
slime-repl-resend	slime/slime.el	/^(defslime-repl-shortcut slime-repl-resend ("resend-form")$/;"	f
slime-repl-result-face	slime/slime.el	/^(defface slime-repl-result-face$/;"	f
slime-repl-return	slime/slime.el	/^(defun slime-repl-return (&optional end-of-input)$/;"	f
slime-repl-return-hooks	slime/slime.el	/^(defvar slime-repl-return-hooks)$/;"	f
slime-repl-return-string	slime/slime.el	/^(defun slime-repl-return-string (string)$/;"	f
slime-repl-safe-load-history	slime/slime.el	/^(defun slime-repl-safe-load-history ()$/;"	f
slime-repl-safe-save-merged-history	slime/slime.el	/^(defun slime-repl-safe-save-merged-history ()$/;"	f
slime-repl-save-all-histories	slime/slime.el	/^(defun slime-repl-save-all-histories ()$/;"	f
slime-repl-save-history	slime/slime.el	/^(defun slime-repl-save-history (&optional filename history)$/;"	f
slime-repl-save-merged-history	slime/slime.el	/^(defun slime-repl-save-merged-history (&optional filename)$/;"	f
slime-repl-sayoonara	slime/slime.el	/^(defslime-repl-shortcut slime-repl-sayoonara ("sayoonara")$/;"	f
slime-repl-send-input	slime/slime.el	/^(defun slime-repl-send-input (&optional newline)$/;"	f
slime-repl-send-string	slime/slime.el	/^(defun slime-repl-send-string (string &optional command-string)$/;"	f
slime-repl-set-package	slime/slime.el	/^(defun slime-repl-set-package (package)$/;"	f
slime-repl-shortcut-dispatch-char	slime/slime.el	/^(defcustom slime-repl-shortcut-dispatch-char ?\\,$/;"	f
slime-repl-shortcut-help	slime/slime.el	/^(defslime-repl-shortcut slime-repl-shortcut-help ("help" "?")$/;"	f
slime-repl-shortcut-history	slime/slime.el	/^(defvar slime-repl-shortcut-history '()$/;"	f
slime-repl-shortcut-table	slime/slime.el	/^(defvar slime-repl-shortcut-table nil$/;"	f
slime-repl-show-abort	slime/slime.el	/^(defun slime-repl-show-abort ()$/;"	f
slime-repl-show-maximum-output	slime/slime.el	/^(defun slime-repl-show-maximum-output (&optional force)$/;"	f
slime-repl-terminate-history-search	slime/slime.el	/^(defun slime-repl-terminate-history-search ()$/;"	f
slime-repl-test-system	slime/contrib/slime-asdf.el	/^(defslime-repl-shortcut slime-repl-test-system ("test-system")$/;"	f
slime-repl-test/force-system	slime/contrib/slime-asdf.el	/^(defslime-repl-shortcut slime-repl-test\/force-system ("force-test-system")$/;"	f
slime-repl-update-banner	slime/slime.el	/^(defun slime-repl-update-banner ()$/;"	f
slime-repl-wrap-history	slime/slime.el	/^(defcustom slime-repl-wrap-history nil$/;"	f
slime-repl-write-string	slime/slime.el	/^(defun slime-repl-write-string (string &optional target)$/;"	f
slime-require	slime/slime.el	/^(defun slime-require (module)$/;"	f
slime-required-modules	slime/slime.el	/^(defvar slime-required-modules '())$/;"	f
slime-reset	slime/slime.el	/^(defun slime-reset ()$/;"	f
slime-reset-repl-markers	slime/slime.el	/^(defun slime-reset-repl-markers ()$/;"	f
slime-restart-connection-at-point	slime/slime.el	/^(defun slime-restart-connection-at-point (connection)$/;"	f
slime-restart-inferior-lisp	slime/slime.el	/^(defun slime-restart-inferior-lisp ()$/;"	f
slime-restart-sentinel	slime/slime.el	/^(defun slime-restart-sentinel (process message)$/;"	f
slime-restore-coordinate	slime/slime.el	/^(defun slime-restore-coordinate (base goal limit)$/;"	f
slime-rex	slime/slime.el	/^(defmacro* slime-rex ((&rest saved-vars)$/;"	f
slime-run-one-test	slime/slime.el	/^(defun slime-run-one-test (name)$/;"	f
slime-run-tests	slime/slime.el	/^(defun slime-run-tests ()$/;"	f
slime-run-when-idle	slime/slime.el	/^(defun slime-run-when-idle (function &rest args)$/;"	f
slime-safe-encoding-p	slime/slime.el	/^(defun slime-safe-encoding-p (coding-system string)$/;"	f
slime-same-line-p	slime/slime.el	/^(defun slime-same-line-p (pos1 pos2)$/;"	f
slime-save-coordinates	slime/slime.el	/^(defmacro slime-save-coordinates (origin &rest body)$/;"	f
slime-save-some-lisp-buffers	slime/slime.el	/^(defun slime-save-some-lisp-buffers ()$/;"	f
slime-saved-window-config	slime/slime.el	/^(defvar slime-saved-window-config)$/;"	f
slime-sbcl-manual-root	slime/contrib/slime-references.el	/^(defcustom slime-sbcl-manual-root "http:\/\/www.sbcl.org\/manual\/"$/;"	f
slime-scheme-indentation-update	slime/contrib/slime-scheme.el	/^(defun slime-scheme-indentation-update (symbol indent)$/;"	f
slime-scheme-init	slime/contrib/slime-scheme.el	/^(defun slime-scheme-init ()$/;"	f
slime-scheme-mode-hook	slime/contrib/slime-scheme.el	/^(defun slime-scheme-mode-hook ()$/;"	f
slime-scheme-unload	slime/contrib/slime-scheme.el	/^(defun slime-scheme-unload ()$/;"	f
slime-scratch	slime/contrib/slime-scratch.el	/^(defun slime-scratch ()$/;"	f
slime-scratch-buffer	slime/contrib/slime-scratch.el	/^(defun slime-scratch-buffer ()$/;"	f
slime-scratch-init	slime/contrib/slime-scratch.el	/^(defun slime-scratch-init ()$/;"	f
slime-scratch-mode-map	slime/contrib/slime-scratch.el	/^(defvar slime-scratch-mode-map$/;"	f
slime-scroll-completions	slime/slime.el	/^(defun slime-scroll-completions ()$/;"	f
slime-search-buffer-package	slime/slime.el	/^(defun slime-search-buffer-package ()$/;"	f
slime-search-call-site	slime/slime.el	/^(defun slime-search-call-site (fname)$/;"	f
slime-search-method-location	slime/slime.el	/^(defun slime-search-method-location (name specializers qualifiers)$/;"	f
slime-search-property-change	slime/slime.el	/^(defun slime-search-property-change (prop &optional backward)$/;"	f
slime-search-suppressed-forms	slime/slime.el	/^(defun slime-search-suppressed-forms (limit)$/;"	f
slime-secret	slime/slime.el	/^(defun slime-secret ()$/;"	f
slime-secret	slime/swank.lisp	/^(defun slime-secret ()$/;"	f
slime-select-connection	slime/slime.el	/^(defun slime-select-connection (process)$/;"	f
slime-selector	slime/doc/html/slime_002dselector.html	/^<a name="slime-selector"><\/a>$/;"	a
slime-selector	slime/slime.el	/^(defun slime-selector ()$/;"	f
slime-selector-methods	slime/slime.el	/^(defvar slime-selector-methods nil$/;"	f
slime-send	slime/slime.el	/^(defun slime-send (sexp)$/;"	f
slime-send-sigint	slime/slime.el	/^(defun slime-send-sigint ()$/;"	f
slime-set-connection-info	slime/slime.el	/^(defun slime-set-connection-info (connection info)$/;"	f
slime-set-default-directory	slime/slime.el	/^(defun slime-set-default-directory (directory)$/;"	f
slime-set-emacs-snapshot	slime/slime.el	/^(defun slime-set-emacs-snapshot (snapshot)$/;"	f
slime-set-inferior-process	slime/slime.el	/^(defun slime-set-inferior-process (connection process)$/;"	f
slime-set-narrowing-configuration	slime/slime.el	/^(defun slime-set-narrowing-configuration (narrowing-cfg)$/;"	f
slime-set-query-on-exit-flag	slime/slime.el	/^(defun slime-set-query-on-exit-flag (process)$/;"	f
slime-set-state	slime/slime.el	/^(defun slime-set-state (name &optional connection)$/;"	f
slime-set-truncate-lines	slime/slime.el	/^(defun slime-set-truncate-lines ()$/;"	f
slime-setup	slime/slime-autoloads.el	/^(defun slime-setup (&optional contribs)$/;"	f
slime-setup	slime/slime.el	/^(defun slime-setup (&optional contribs)$/;"	f
slime-setup-command-hooks	slime/slime.el	/^(defun slime-setup-command-hooks ()$/;"	f
slime-setup-connection	slime/slime.el	/^(defun slime-setup-connection (process)$/;"	f
slime-setup-contribs	slime/slime-autoloads.el	/^(defun slime-setup-contribs () $/;"	f
slime-setup-contribs	slime/slime-autoloads.el	/^(defvar slime-setup-contribs nil)$/;"	f
slime-setup-first-change-hook	slime/slime.el	/^(defun slime-setup-first-change-hook ()$/;"	f
slime-severity-face	slime/slime.el	/^(defun slime-severity-face (severity)$/;"	f
slime-severity-label	slime/slime.el	/^(defun slime-severity-label (severity)$/;"	f
slime-sexp-at-point	slime/slime.el	/^(defun slime-sexp-at-point ()$/;"	f
slime-sexp-at-point-for-macroexpansion	slime/slime.el	/^(defun slime-sexp-at-point-for-macroexpansion ()$/;"	f
slime-sexp-at-point-or-error	slime/slime.el	/^(defun slime-sexp-at-point-or-error ()$/;"	f
slime-show-apropos	slime/slime.el	/^(defun slime-show-apropos (plists string package summary)$/;"	f
slime-show-arglist	slime/slime.el	/^(defun slime-show-arglist ()$/;"	f
slime-show-buffer-position	slime/slime.el	/^(defun slime-show-buffer-position (position)$/;"	f
slime-show-description	slime/slime.el	/^(defun slime-show-description (string package)$/;"	f
slime-show-last-output	slime/slime.el	/^(defun slime-show-last-output ()$/;"	f
slime-show-last-output-function	slime/slime.el	/^(defvar slime-show-last-output-function $/;"	f
slime-show-last-output-region	slime/slime.el	/^(defun slime-show-last-output-region (start end)$/;"	f
slime-show-note	slime/slime.el	/^(defun slime-show-note (overlay)$/;"	f
slime-show-note-counts	slime/slime.el	/^(defun slime-show-note-counts (notes &optional secs)$/;"	f
slime-show-source-location	slime/slime.el	/^(defun slime-show-source-location (source-location &optional no-highlight-p)$/;"	f
slime-show-xref	slime/slime.el	/^(defun slime-show-xref ()$/;"	f
slime-show-xrefs	slime/slime.el	/^(defun slime-show-xrefs (xrefs type symbol package &optional emacs-snapshot)$/;"	f
slime-simple-complete-symbol	slime/slime.el	/^(defun slime-simple-complete-symbol ()$/;"	f
slime-simple-completions	slime/slime.el	/^(defun slime-simple-completions (prefix)$/;"	f
slime-sldb-add-easy-menu	slime/slime.el	/^(defun slime-sldb-add-easy-menu ()$/;"	f
slime-sldb-easy-menu	slime/slime.el	/^(defvar slime-sldb-easy-menu$/;"	f
slime-sldb-level=	slime/slime.el	/^(defun slime-sldb-level= (level)$/;"	f
slime-space	slime/slime.el	/^(defun slime-space (n)$/;"	f
slime-space-information-p	slime/slime.el	/^(defcustom slime-space-information-p t$/;"	f
slime-split-string	slime/slime.el	/^(defun slime-split-string (string &optional separators omit-nulls)$/;"	f
slime-stack-eval-tags	slime/slime.el	/^(defvar slime-stack-eval-tags nil$/;"	f
slime-start	slime/slime.el	/^(defun* slime-start (&key (program inferior-lisp-program) program-args $/;"	f
slime-start*	slime/slime.el	/^(defun slime-start* (options)$/;"	f
slime-start-and-init	slime/slime.el	/^(defun slime-start-and-init (options fun)$/;"	f
slime-start-and-load	slime/slime.el	/^(defun slime-start-and-load (filename &optional package)$/;"	f
slime-start-lisp	slime/slime.el	/^(defun slime-start-lisp (program program-args directory buffer)$/;"	f
slime-start-swank-server	slime/slime.el	/^(defun slime-start-swank-server (process args)$/;"	f
slime-startup-animation	slime/contrib/slime-banner.el	/^(defcustom slime-startup-animation (fboundp 'animate-string)$/;"	f
slime-startup-message	slime/contrib/slime-banner.el	/^(defun slime-startup-message ()$/;"	f
slime-state-name	slime/slime.el	/^(defvar slime-state-name "[??]"$/;"	f
slime-style-warning-face	slime/slime.el	/^(defface slime-style-warning-face$/;"	f
slime-swank-port-file	slime/slime.el	/^(defun slime-swank-port-file ()$/;"	f
slime-switch-to-output-buffer	slime/slime.el	/^(defun slime-switch-to-output-buffer (&optional connection)$/;"	f
slime-switch-to-scratch-buffer	slime/contrib/slime-scratch.el	/^(defun slime-switch-to-scratch-buffer ()$/;"	f
slime-symbol-end-pos	slime/slime.el	/^(defun slime-symbol-end-pos ()$/;"	f
slime-symbol-name-at-point	slime/slime.el	/^(defun slime-symbol-name-at-point ()$/;"	f
slime-symbol-start-pos	slime/slime.el	/^(defun slime-symbol-start-pos ()$/;"	f
slime-sync	slime/slime.el	/^(defun slime-sync ()$/;"	f
slime-sync-package-and-default-directory	slime/slime.el	/^(defun slime-sync-package-and-default-directory ()$/;"	f
slime-sync-to-top-level	slime/slime.el	/^(defun slime-sync-to-top-level (timeout)$/;"	f
slime-system-history	slime/contrib/slime-asdf.el	/^(defvar slime-system-history nil$/;"	f
slime-target-buffer-fuzzy-completions-map	slime/contrib/slime-fuzzy.el	/^(defvar slime-target-buffer-fuzzy-completions-map$/;"	f
slime-temp-buffer-mode	slime/slime.el	/^(define-minor-mode slime-temp-buffer-mode $/;"	f
slime-temp-buffer-quit	slime/slime.el	/^(defun slime-temp-buffer-quit (&optional kill-buffer-p)$/;"	f
slime-temporarily-highlight-note	slime/slime.el	/^(defun slime-temporarily-highlight-note (overlay)$/;"	f
slime-test-buffer-name	slime/slime.el	/^(defvar slime-test-buffer-name "*Tests*"$/;"	f
slime-test-debug-on-error	slime/slime.el	/^(defvar slime-test-debug-on-error nil$/;"	f
slime-test-expect	slime/slime.el	/^(defun slime-test-expect (name expected actual &optional test)$/;"	f
slime-test-failure	slime/slime.el	/^(defun slime-test-failure (keyword string)$/;"	f
slime-test-heading	slime/slime.el	/^(defun slime-test-heading (level format &rest args)$/;"	f
slime-test-message	slime/slime.el	/^(defun slime-test-message (string)$/;"	f
slime-test-should-fail-p	slime/slime.el	/^(defun slime-test-should-fail-p (test)$/;"	f
slime-tests	slime/slime.el	/^(defvar slime-tests '()$/;"	f
slime-thread-attach	slime/slime.el	/^(defun slime-thread-attach ()$/;"	f
slime-thread-control-mode	slime/slime.el	/^(define-derived-mode slime-thread-control-mode fundamental-mode$/;"	f
slime-thread-debug	slime/slime.el	/^(defun slime-thread-debug ()$/;"	f
slime-thread-insert	slime/slime.el	/^(defun slime-thread-insert (idx name status summary id)$/;"	f
slime-thread-kill	slime/slime.el	/^(defun slime-thread-kill ()$/;"	f
slime-thread-quit	slime/slime.el	/^(defun slime-thread-quit ()$/;"	f
slime-timer-call	slime/slime.el	/^(defun slime-timer-call (fun &rest args)$/;"	f
slime-to-lisp-filename	slime/slime.el	/^(defun slime-to-lisp-filename (filename)$/;"	f
slime-to-lisp-filename-function	slime/slime.el	/^(defvar slime-to-lisp-filename-function #'identity)$/;"	f
slime-toggle-profile-fdefinition	slime/slime.el	/^(defun slime-toggle-profile-fdefinition (fname-string)$/;"	f
slime-toggle-trace-fdefinition	slime/slime.el	/^(defun slime-toggle-trace-fdefinition (&optional using-context-p)$/;"	f
slime-total-tests	slime/slime.el	/^(defvar slime-total-tests nil$/;"	f
slime-trace-query	slime/slime.el	/^(defun slime-trace-query (spec)$/;"	f
slime-tramp-from-lisp-filename	slime/contrib/slime-tramp.el	/^(defun slime-tramp-from-lisp-filename (filename)$/;"	f
slime-tramp-to-lisp-filename	slime/contrib/slime-tramp.el	/^(defun slime-tramp-to-lisp-filename (filename)$/;"	f
slime-tree-at-point	slime/slime.el	/^(defun slime-tree-at-point ()$/;"	f
slime-tree-decoration	slime/slime.el	/^(defun slime-tree-decoration (tree)$/;"	f
slime-tree-default-printer	slime/slime.el	/^(defun slime-tree-default-printer (tree)$/;"	f
slime-tree-delete	slime/slime.el	/^(defun slime-tree-delete (tree)$/;"	f
slime-tree-for-note	slime/slime.el	/^(defun slime-tree-for-note (note)$/;"	f
slime-tree-for-severity	slime/slime.el	/^(defun slime-tree-for-severity (severity notes collapsed-p)$/;"	f
slime-tree-indent-item	slime/slime.el	/^(defun slime-tree-indent-item (start end prefix)$/;"	f
slime-tree-insert	slime/slime.el	/^(defun slime-tree-insert (tree prefix)$/;"	f
slime-tree-insert-decoration	slime/slime.el	/^(defun slime-tree-insert-decoration (tree)$/;"	f
slime-tree-insert-list	slime/slime.el	/^(defun slime-tree-insert-list (list prefix)$/;"	f
slime-tree-insert-references	slime/contrib/slime-references.el	/^(defun slime-tree-insert-references (references)$/;"	f
slime-tree-leaf-p	slime/slime.el	/^(defun slime-tree-leaf-p (tree)$/;"	f
slime-tree-print-with-references	slime/contrib/slime-references.el	/^(defun slime-tree-print-with-references (tree)$/;"	f
slime-tree-printer	slime/slime.el	/^(defvar slime-tree-printer 'slime-tree-default-printer)$/;"	f
slime-tree-toggle	slime/slime.el	/^(defun slime-tree-toggle (tree)$/;"	f
slime-trim-whitespace	slime/slime.el	/^(defun slime-trim-whitespace (str)$/;"	f
slime-truncate-lines	slime/slime.el	/^(defcustom slime-truncate-lines t$/;"	f
slime-typeout-active-p	slime/contrib/slime-typeout-frame.el	/^(defun slime-typeout-active-p ()$/;"	f
slime-typeout-autodoc-dimensions	slime/contrib/slime-typeout-frame.el	/^(defun slime-typeout-autodoc-dimensions ()$/;"	f
slime-typeout-autodoc-message	slime/contrib/slime-typeout-frame.el	/^(defun slime-typeout-autodoc-message (doc)$/;"	f
slime-typeout-frame-init	slime/contrib/slime-typeout-frame.el	/^(defun slime-typeout-frame-init ()$/;"	f
slime-typeout-frame-init-var	slime/contrib/slime-typeout-frame.el	/^(defun slime-typeout-frame-init-var (var value)$/;"	f
slime-typeout-frame-properties	slime/contrib/slime-typeout-frame.el	/^(defvar slime-typeout-frame-properties$/;"	f
slime-typeout-frame-unbind-stack	slime/contrib/slime-typeout-frame.el	/^(defvar slime-typeout-frame-unbind-stack ())$/;"	f
slime-typeout-frame-unload	slime/contrib/slime-typeout-frame.el	/^(defun slime-typeout-frame-unload ()$/;"	f
slime-typeout-message	slime/contrib/slime-typeout-frame.el	/^(defun slime-typeout-message (format-string &rest format-args)$/;"	f
slime-typeout-message-aux	slime/contrib/slime-typeout-frame.el	/^(defun slime-typeout-message-aux (format-string &rest format-args)$/;"	f
slime-typeout-window	slime/contrib/slime-typeout-frame.el	/^(defvar slime-typeout-window nil$/;"	f
slime-ui	slime/slime.el	/^(defgroup slime-ui nil$/;"	f
slime-undefine-function	slime/slime.el	/^(defun slime-undefine-function (symbol-name)$/;"	f
slime-underline-color	slime/slime.el	/^(defun slime-underline-color (color)$/;"	f
slime-unexpected-failures	slime/slime.el	/^(defvar slime-unexpected-failures)$/;"	f
slime-unprofile-all	slime/slime.el	/^(defun slime-unprofile-all ()$/;"	f
slime-untrace-all	slime/slime.el	/^(defun slime-untrace-all ()$/;"	f
slime-update-autodoc-cache	slime/contrib/slime-autodoc.el	/^(defun slime-update-autodoc-cache (symbol-name documentation)$/;"	f
slime-update-connection-list	slime/slime.el	/^(defun slime-update-connection-list ()$/;"	f
slime-update-indentation	slime/slime.el	/^(defun slime-update-indentation ()$/;"	f
slime-update-modeline-package	slime/slime.el	/^(defcustom slime-update-modeline-package t$/;"	f
slime-update-modeline-package	slime/slime.el	/^(defun slime-update-modeline-package ()$/;"	f
slime-urge-bytecode-recompile	slime/slime.el	/^(defun slime-urge-bytecode-recompile ()$/;"	f
slime-use-autodoc-mode	slime/contrib/slime-autodoc.el	/^(defvar slime-use-autodoc-mode t$/;"	f
slime-use-sigint-for-interrupt	slime/slime.el	/^(defun slime-use-sigint-for-interrupt (&optional connection)$/;"	f
slime-user-first-name	slime/slime.el	/^(defun slime-user-first-name ()$/;"	f
slime-version-string	slime/swank-loader.lisp	/^(defun slime-version-string ()$/;"	f
slime-visit-source-path	slime/slime.el	/^(defun slime-visit-source-path (source-path)$/;"	f
slime-wait-condition	slime/slime.el	/^(defun slime-wait-condition (name predicate timeout)$/;"	f
slime-warn-when-possibly-tricked-by-M-.	slime/slime.el	/^(defvar slime-warn-when-possibly-tricked-by-M-. t$/;"	f
slime-warning-face	slime/slime.el	/^(defface slime-warning-face$/;"	f
slime-when-complete-filename-expand	slime/slime.el	/^(defcustom slime-when-complete-filename-expand nil$/;"	f
slime-who-bindings	slime/slime.el	/^(defvar slime-who-bindings$/;"	f
slime-who-binds	slime/slime.el	/^(defun slime-who-binds (symbol)$/;"	f
slime-who-calls	slime/slime.el	/^(defun slime-who-calls (symbol)$/;"	f
slime-who-macroexpands	slime/slime.el	/^(defun slime-who-macroexpands (symbol)$/;"	f
slime-who-map	slime/slime.el	/^(defvar slime-who-map (make-sparse-keymap)$/;"	f
slime-who-references	slime/slime.el	/^(defun slime-who-references (symbol)$/;"	f
slime-who-sets	slime/slime.el	/^(defun slime-who-sets (symbol)$/;"	f
slime-who-specializes	slime/slime.el	/^(defun slime-who-specializes (symbol)$/;"	f
slime-with-connection-buffer	slime/slime.el	/^(defmacro* slime-with-connection-buffer ((&optional process) &rest body)$/;"	f
slime-with-output-end-mark	slime/slime.el	/^(defmacro slime-with-output-end-mark (&rest body)$/;"	f
slime-with-output-to-temp-buffer	slime/slime.el	/^(defmacro* slime-with-output-to-temp-buffer ((name &key mode reusep)$/;"	f
slime-with-rigid-indentation	slime/slime.el	/^(defmacro slime-with-rigid-indentation (level &rest body)$/;"	f
slime-with-xref-buffer	slime/slime.el	/^(defmacro* slime-with-xref-buffer ((package ref-type symbol &key emacs-snapshot) $/;"	f
slime-words-of-encouragement	slime/slime.el	/^(defvar slime-words-of-encouragement$/;"	f
slime-write-string	slime/slime.el	/^(defun slime-write-string (string &optional target)$/;"	f
slime-write-string-function	slime/slime.el	/^(defvar slime-write-string-function 'slime-repl-write-string)$/;"	f
slime-xref	slime/slime.el	/^(defun slime-xref (type symbol)$/;"	f
slime-xref-buffer	slime/slime.el	/^(defun slime-xref-buffer ()$/;"	f
slime-xref-cleanup	slime/slime.el	/^(defun slime-xref-cleanup ()$/;"	f
slime-xref-dspec-at-point	slime/slime.el	/^(defun slime-xref-dspec-at-point ()$/;"	f
slime-xref-group	slime/slime.el	/^(defun slime-xref-group (xref)$/;"	f
slime-xref-has-location-p	slime/slime.el	/^(defun slime-xref-has-location-p (xref)$/;"	f
slime-xref-insert-recompilation-flags	slime/slime.el	/^(defun slime-xref-insert-recompilation-flags (dspecs compilation-results)$/;"	f
slime-xref-location-at-point	slime/slime.el	/^(defun slime-xref-location-at-point ()$/;"	f
slime-xref-mode	slime/slime.el	/^(define-derived-mode slime-xref-mode lisp-mode "xref"$/;"	f
slime-xref-mode-map	slime/slime.el	/^(defvar slime-xref-mode-map)$/;"	f
slime-xref-quit	slime/slime.el	/^(defun slime-xref-quit ()$/;"	f
slime-xref-saved-emacs-snapshot	slime/slime.el	/^(defvar slime-xref-saved-emacs-snapshot nil$/;"	f
slime-xrefs-for-notes	slime/slime.el	/^(defun slime-xrefs-for-notes (notes)$/;"	f
slime-y-or-n-p	slime/slime.el	/^(defun slime-y-or-n-p (thread tag question)$/;"	f
slime_002dautodoc_002dmode	slime/doc/html/slime_002dautodoc_002dmode.html	/^<a name="slime_002dautodoc_002dmode"><\/a>$/;"	a
slime_002dcomplete_002dsymbol_002a	slime/doc/html/Compound-Completion.html	/^<p><a name="slime_002dcomplete_002dsymbol_002a"><\/a>The package <code>slime-c-p-c<\/code> provides a different symbol completion$/;"	a
slime_002dcomplete_002dsymbol_002dfunction	slime/doc/html/Emacs_002dside-customization.html	/^     <p><a name="slime_002dcomplete_002dsymbol_002dfunction"><\/a><a name="index-slime_002dcomplete_002dsymbol_002dfunction-235"><\/a><br><dt><code>slime-complete-symbol-function<\/code><dd>The function to use for completion of Lisp symbols. Three completion$/;"	a
slime_002dconnected_002dhook	slime/doc/html/Hooks.html	/^     <p><a name="slime_002dconnected_002dhook"><\/a><a name="index-slime_002dconnected_002dhook-244"><\/a><br><dt><code>slime-connected-hook<\/code><dd>This hook is run when <acronym>SLIME<\/acronym> establishes a connection to a Lisp$/;"	a
slime_002dfancy	slime/doc/html/slime_002dfancy.html	/^<a name="slime_002dfancy"><\/a>$/;"	a
slime_002dfuzzy_002dcomplete_002dsymbol	slime/doc/html/Fuzzy-Completion.html	/^<a name="slime_002dfuzzy_002dcomplete_002dsymbol"><\/a><dt><kbd>C-c M-i<\/kbd><dt><kbd>M-x slime-fuzzy-complete-symbol<\/kbd><dd><a name="index-C_002dc-M_002di-261"><\/a><a name="index-slime_002dfuzzy_002dcomplete_002dsymbol-262"><\/a>$/;"	a
slime_002dmacroexpansion_002dminor_002dmode	slime/doc/html/slime_002dmacroexpansion_002dminor_002dmode.html	/^<a name="slime_002dmacroexpansion_002dminor_002dmode"><\/a>$/;"	a
slime_002dmode	slime/doc/html/slime_002dmode.html	/^<a name="slime_002dmode"><\/a>$/;"	a
slime_002dnet_002dcoding_002dsystem	slime/doc/html/Emacs_002dside-customization.html	/^     <p><a name="slime_002dnet_002dcoding_002dsystem"><\/a><a name="index-slime_002dnet_002dcoding_002dsystem-237"><\/a><a name="index-Unicode-238"><\/a><a name="index-UTF_002d8-239"><\/a><a name="index-ASCII-240"><\/a><a name="index-LATIN_002d1-241"><\/a><a name="index-Character-Encoding-242"><\/a><br><dt><code>slime-net-coding-system<\/code><dd>If you want to transmit Unicode characters between Emacs and the Lisp$/;"	a
slime_002dscratch	slime/doc/html/Scratch-Buffer.html	/^<p><a name="slime_002dscratch"><\/a>The <acronym>SLIME<\/acronym> scratch buffer, in contrib package <code>slime-scratch<\/code>,$/;"	a
slime_002dselector	slime/doc/html/slime_002dselector.html	/^<a name="slime_002dselector"><\/a>$/;"	a
slot->binding	practicals-1.0.3/Chapter24/binary-data.lisp	/^(defun slot->binding (spec stream)$/;"	f
slot->defclass-slot	practicals-1.0.3/Chapter24/binary-data.lisp	/^(defun slot->defclass-slot (spec)$/;"	f
slot->keyword-arg	practicals-1.0.3/Chapter24/binary-data.lisp	/^(defun slot->keyword-arg (spec)$/;"	f
slot->read-value	practicals-1.0.3/Chapter24/binary-data.lisp	/^(defun slot->read-value (spec stream)$/;"	f
slot->write-value	practicals-1.0.3/Chapter24/binary-data.lisp	/^(defun slot->write-value (spec stream)$/;"	f
slot-boundp	slime/xref.lisp	/^(define-caller-pattern slot-boundp (form form) :lisp2)$/;"	f
slot-boundp-using-class	slime/swank-abcl.lisp	/^(defun slot-boundp-using-class (class object slotdef)$/;"	f
slot-definition-documentation	slime/swank-abcl.lisp	/^(defun slot-definition-documentation (slot) #+nil (documentation slot 't))$/;"	f
slot-definition-name	slime/swank-abcl.lisp	/^(defun slot-definition-name (slot)$/;"	f
slot-definition-type	slime/swank-abcl.lisp	/^(defun slot-definition-type (slot) t)$/;"	f
slot-exists-p	slime/xref.lisp	/^(define-caller-pattern slot-exists-p (form form) :lisp2)$/;"	f
slot-makeunbound	slime/xref.lisp	/^(define-caller-pattern slot-makeunbound (form form) :lisp2)$/;"	f
slot-missing	slime/xref.lisp	/^(define-caller-pattern slot-missing (fn form form form &optional form) :lisp2)$/;"	f
slot-unbound	slime/xref.lisp	/^(define-caller-pattern slot-unbound (fn form form) :lisp2)$/;"	f
slot-value	slime/xref.lisp	/^(define-caller-pattern slot-value (form form) :lisp2)$/;"	f
slot-value-using-class	slime/swank-abcl.lisp	/^(defun slot-value-using-class (class object slotdef)$/;"	f
snarf-string	slime/contrib/swank-mit-scheme.scm	/^(define (snarf-string string)$/;"	f
socket-fd	slime/swank-cmucl.lisp	/^(defun socket-fd (socket)$/;"	f
socket-fd	slime/swank-lispworks.lisp	/^(defun socket-fd (socket)$/;"	f
socket-fd	slime/swank-sbcl.lisp	/^(defun socket-fd (socket)$/;"	f
socket-fd	slime/swank-scl.lisp	/^(defun socket-fd (socket)$/;"	f
software-type	slime/xref.lisp	/^(define-caller-pattern software-type () :lisp)$/;"	f
software-version	slime/xref.lisp	/^(define-caller-pattern software-version () :lisp)$/;"	f
solve	la_solve.lisp	/^(defun solve (file)$/;"	f
some	slime/xref.lisp	/^(define-caller-pattern some (fn form (:star form)) :lisp)$/;"	f
song	practicals-1.0.3/Chapter25/id3v2.lisp	/^(defun song (id3) (get-text-info id3 "TT2" "TIT2"))$/;"	f
song	practicals-1.0.3/Chapter28/song-source.lisp	/^(defclass song ()$/;"	f
songs-for-album	practicals-1.0.3/Chapter29/playlist.lisp	/^(defun songs-for-album (playlist album)$/;"	f
sort	slime/xref.lisp	/^(define-caller-pattern sort (form fn &key (:star form)) :lisp)$/;"	f
sort-playlist	practicals-1.0.3/Chapter29/playlist.lisp	/^(defun sort-playlist (playlist ordering)$/;"	f
sort-playlist-button	practicals-1.0.3/Chapter29/mp3-browser.lisp	/^(defun sort-playlist-button (order-by current-sort)$/;"	f
sort-results	slime/metering.lisp	/^(defun sort-results (&optional (key :percent-time))$/;"	f
sort-rows	practicals-1.0.3/Chapter27/database.lisp	/^(defun sort-rows (table &rest column-names)$/;"	f
sorted-interesting	practicals-1.0.3/Chapter23/spam.lisp	/^(defun sorted-interesting (features)$/;"	f
sorted-rows	practicals-1.0.3/Chapter27/database.lisp	/^(defun sorted-rows (rows schema order-by)$/;"	f
sos/misc	slime/swank-cmucl.lisp	/^(defun sos\/misc (stream operation &optional arg1 arg2)$/;"	f
sos/misc-force-output	slime/swank-cmucl.lisp	/^(defun sos\/misc-force-output (stream)$/;"	f
sos/out	slime/swank-cmucl.lisp	/^(defun sos\/out (stream char)$/;"	f
sos/sout	slime/swank-cmucl.lisp	/^(defun sos\/sout (stream string start end)$/;"	f
source-cache-get	slime/swank-source-file-cache.lisp	/^(defun source-cache-get (filename date)$/;"	f
source-cached-p	slime/swank-source-file-cache.lisp	/^(defun source-cached-p (filename)$/;"	f
source-file	slime/xref.lisp	/^(defsetf source-file (name) (value)$/;"	f
source-file	slime/xref.lisp	/^(defun source-file (symbol)$/;"	f
source-file-position	slime/swank-sbcl.lisp	/^(defun source-file-position (filename write-date form-path character-offset)$/;"	f
source-file-source-location	slime/swank-sbcl.lisp	/^(defun source-file-source-location (code-location)$/;"	f
source-hint-snippet	slime/swank-sbcl.lisp	/^(defun source-hint-snippet (filename write-date position)$/;"	f
source-location	slime/swank-abcl.lisp	/^(defun source-location (symbol)$/;"	f
source-location-for-xref-data	slime/swank-sbcl.lisp	/^(defun source-location-for-xref-data (xref-data)$/;"	f
source-location-form-number	slime/swank-cmucl.lisp	/^(defun source-location-form-number (location)$/;"	f
source-location-form-numbers	slime/swank-cmucl.lisp	/^(defun source-location-form-numbers (location)$/;"	f
source-location-from-code-location	slime/swank-cmucl.lisp	/^(defun source-location-from-code-location (code-location)$/;"	f
source-location-from-code-location	slime/swank-scl.lisp	/^(defun source-location-from-code-location (code-location)$/;"	f
source-location-p	slime/swank-cmucl.lisp	/^(defun source-location-p (object)$/;"	f
source-location-tlf-number	slime/swank-cmucl.lisp	/^(defun source-location-tlf-number (location)$/;"	f
source-path-file-position	slime/swank-source-path-parser.lisp	/^(defun source-path-file-position (path filename)$/;"	f
source-path-source-position	slime/swank-source-path-parser.lisp	/^(defun source-path-source-position (path form source-map)$/;"	f
source-path-stream-position	slime/swank-source-path-parser.lisp	/^(defun source-path-stream-position (path stream)$/;"	f
source-path-string-position	slime/swank-source-path-parser.lisp	/^(defun source-path-string-position (path string)$/;"	f
source-transform-definitions	slime/swank-cmucl.lisp	/^(defun source-transform-definitions (name)$/;"	f
source-transform-definitions	slime/swank-scl.lisp	/^(defun source-transform-definitions (name)$/;"	f
spam-probability	practicals-1.0.3/Chapter23/spam.lisp	/^(defun spam-probability (feature)$/;"	f
spawn	slime/swank-abcl.lisp	/^(defimplementation spawn (fn &key name)$/;"	f
spawn	slime/swank-allegro.lisp	/^(defimplementation spawn (fn &key name)$/;"	f
spawn	slime/swank-backend.lisp	/^(definterface spawn (fn &key name)$/;"	f
spawn	slime/swank-corman.lisp	/^(defimplementation spawn (fun &key name)$/;"	f
spawn	slime/swank-lispworks.lisp	/^(defimplementation spawn (fn &key name)$/;"	f
spawn	slime/swank-openmcl.lisp	/^(defimplementation spawn (fn &key name)$/;"	f
spawn	slime/swank-scl.lisp	/^(defimplementation spawn (fn &key name)$/;"	f
spawn-repl-thread	slime/swank.lisp	/^(defun spawn-repl-thread (connection name)$/;"	f
spawn-threads-for-connection	slime/swank.lisp	/^(defun spawn-threads-for-connection (connection)$/;"	f
spawn-worker-thread	slime/swank.lisp	/^(defun spawn-worker-thread (connection)$/;"	f
special-form-p	practicals-1.0.3/Chapter31/html.lisp	/^(defun special-form-p (form)$/;"	f
special-form-p	slime/xref.lisp	/^(define-caller-pattern special-form-p (form) :lisp)$/;"	f
specializer-direct-methods	slime/swank-abcl.lisp	/^(defun specializer-direct-methods (spec) (mop::class-direct-methods spec))$/;"	f
specializer-name	slime/swank-openmcl.lisp	/^(defun specializer-name (spec)$/;"	f
specializer<	slime/contrib/swank-fancy-inspector.lisp	/^(defun specializer< (specializer1 specializer2)$/;"	f
spliceable	practicals-1.0.3/Chapter08/macro-utilities.lisp	/^(defun spliceable (value)$/;"	f
split	nifty_funs.lisp	/^(defun split (line delim parse-as)$/;"	f
split	practicals-1.0.3/libraries/cl-ppcre-1.2.3/api.lisp	/^(define-compiler-macro split (&whole form &environment env regex target-string &rest rest)$/;"	f
split	practicals-1.0.3/libraries/cl-ppcre-1.2.3/api.lisp	/^(defun split (regex target-string$/;"	f
split	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<br><a class=none name="split"><b>split<\/b> <i>regex target-string <tt>&amp;key<\/tt> start end limit with-registers-p omit-unmatched-p sharedp<\/i> =&gt; <i>list<\/i><\/a>$/;"	a
split-form-spec	slime/contrib/swank-arglists.lisp	/^(defun split-form-spec (spec)$/;"	f
split-frame-string	slime/swank-clisp.lisp	/^(defun split-frame-string (string)$/;"	f
split-if	onlisp.lisp	/^(defun split-if (fn lst)$/;"	f
sq-rt	mit2a.lisp	/^(defun sq-rt (x)$/;"	f
sqrt	slime/xref.lisp	/^(define-caller-pattern sqrt (form) :lisp)$/;"	f
square	db.lisp	/^(defun square (x)$/;"	f
square	jos-mittest.lisp	/^(defun square (x)$/;"	f
square	mit2a.lisp	/^(defun square (a)$/;"	f
square	slime/metering.lisp	/^(defun square (x) (* x x))$/;"	f
square-01	chiglug-macros/presentation.lisp	/^(defmacro square-01 (x)$/;"	f
square-02	chiglug-macros/presentation.lisp	/^(defmacro square-02 (x)$/;"	f
square2	slime/metering.lisp	/^(defun square2 (x &optional y) (* x x y))$/;"	f
src-files	slime/swank-loader.lisp	/^(defun src-files (names src-dir)$/;"	f
stable-sort	slime/xref.lisp	/^(define-caller-pattern stable-sort (form fn &key (:star form)) :lisp)$/;"	f
stack	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<h4><a name="stack" class=none>Stack overflow<\/a><\/h4>$/;"	a
standard-char-p	slime/xref.lisp	/^(define-caller-pattern standard-char-p (form) :lisp)$/;"	f
standard-footer	practicals-1.0.3/Chapter29/mp3-browser.lisp	/^(defun standard-footer ()$/;"	f
standard-header	practicals-1.0.3/Chapter29/mp3-browser.lisp	/^(defun standard-header ()$/;"	f
standard-slot-definition	slime/swank-abcl.lisp	/^(defclass standard-slot-definition ()())$/;"	f
start-acl-profiler	slime/swank-allegro.lisp	/^(defun start-acl-profiler ()$/;"	f
start-anchored-p	practicals-1.0.3/libraries/cl-ppcre-1.2.3/optimize.lisp	/^(defgeneric start-anchored-p (regex &optional in-seq-p)$/;"	f
start-anchored-p	practicals-1.0.3/libraries/cl-ppcre-1.2.3/optimize.lisp	/^(defmethod start-anchored-p ((alternation alternation) &optional in-seq-p)$/;"	f
start-anchored-p	practicals-1.0.3/libraries/cl-ppcre-1.2.3/optimize.lisp	/^(defmethod start-anchored-p ((anchor anchor) &optional in-seq-p)$/;"	f
start-anchored-p	practicals-1.0.3/libraries/cl-ppcre-1.2.3/optimize.lisp	/^(defmethod start-anchored-p ((branch branch) &optional in-seq-p)$/;"	f
start-anchored-p	practicals-1.0.3/libraries/cl-ppcre-1.2.3/optimize.lisp	/^(defmethod start-anchored-p ((regex regex) &optional in-seq-p)$/;"	f
start-anchored-p	practicals-1.0.3/libraries/cl-ppcre-1.2.3/optimize.lisp	/^(defmethod start-anchored-p ((register register) &optional in-seq-p)$/;"	f
start-anchored-p	practicals-1.0.3/libraries/cl-ppcre-1.2.3/optimize.lisp	/^(defmethod start-anchored-p ((repetition repetition) &optional in-seq-p)$/;"	f
start-anchored-p	practicals-1.0.3/libraries/cl-ppcre-1.2.3/optimize.lisp	/^(defmethod start-anchored-p ((seq seq) &optional in-seq-p)$/;"	f
start-anchored-p	practicals-1.0.3/libraries/cl-ppcre-1.2.3/optimize.lisp	/^(defmethod start-anchored-p ((standalone standalone) &optional in-seq-p)$/;"	f
start-mp3-browser	practicals-1.0.3/Chapter29/mp3-browser.lisp	/^(defun start-mp3-browser ()$/;"	f
start-of-end-string-p	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod start-of-end-string-p ((void void))$/;"	f
start-of-file	practicals-1.0.3/Chapter23/spam.lisp	/^(defun start-of-file (file max-chars)$/;"	f
start-of-subexpr-p	practicals-1.0.3/libraries/cl-ppcre-1.2.3/lexer.lisp	/^(defun start-of-subexpr-p (lexer)$/;"	f
start-server	slime/swank.lisp	/^(defun start-server (port-file &key (style *communication-style*)$/;"	f
start-swank	slime/contrib/swank-mit-scheme.scm	/^(define (start-swank port-file)$/;"	f
start-swank-server-in-thread	slime/swank.lisp	/^(defslimefun start-swank-server-in-thread (index port-file-name)$/;"	f
startup-multiprocessing	slime/swank-abcl.lisp	/^(defimplementation startup-multiprocessing ()$/;"	f
state-stack	slime/swank.lisp	/^(defslimefun state-stack ()$/;"	f
step	slime/xref.lisp	/^(define-caller-pattern step (form) :lisp)$/;"	f
stigid	nifty_funs.lisp	/^(defun stigid (list)$/;"	f
still-current-p	practicals-1.0.3/Chapter28/song-source.lisp	/^(defgeneric still-current-p (song source)$/;"	f
still-current-p	practicals-1.0.3/Chapter28/song-source.lisp	/^(defmethod still-current-p (song (source simple-song-queue))$/;"	f
still-current-p	practicals-1.0.3/Chapter29/playlist.lisp	/^(defmethod still-current-p (song (playlist playlist))$/;"	f
stop-acl-profiler	slime/swank-allegro.lisp	/^(defun stop-acl-profiler ()$/;"	f
stop-server	slime/swank.lisp	/^(defun stop-server (port)$/;"	f
store-value	slime/xref.lisp	/^(define-caller-pattern store-value (form &optional form) :lisp2)$/;"	f
str	practicals-1.0.3/libraries/cl-ppcre-1.2.3/regex-class.lisp	/^(defmethod str ((void void))$/;"	f
stream*	slime/contrib/swank-mit-scheme.scm	/^(define-syntax stream*$/;"	f
stream-clear-input	slime/swank-gray.lisp	/^(defmethod stream-clear-input ((s slime-input-stream))$/;"	f
stream-element-type	slime/xref.lisp	/^(define-caller-pattern stream-element-type (form) :lisp)$/;"	f
stream-error-stream	slime/xref.lisp	/^(define-caller-pattern stream-error-stream (form) :lisp2)$/;"	f
stream-external-format	slime/xref.lisp	/^(define-caller-pattern stream-external-format (form) :lisp2)$/;"	f
stream-finish-output	slime/swank-gray.lisp	/^(defmethod stream-finish-output ((stream slime-output-stream))$/;"	f
stream-force-output	slime/swank-gray.lisp	/^(defmethod stream-force-output ((stream slime-output-stream))$/;"	f
stream-fresh-line	slime/swank-gray.lisp	/^(defmethod stream-fresh-line ((stream slime-output-stream))$/;"	f
stream-line-column	slime/swank-gray.lisp	/^(defmethod stream-line-column ((s slime-input-stream))$/;"	f
stream-line-column	slime/swank-gray.lisp	/^(defmethod stream-line-column ((stream slime-output-stream))$/;"	f
stream-line-length	slime/swank-gray.lisp	/^(defmethod stream-line-length ((s slime-input-stream))$/;"	f
stream-line-length	slime/swank-gray.lisp	/^(defmethod stream-line-length ((stream slime-output-stream))$/;"	f
stream-listen	slime/swank-gray.lisp	/^(defmethod stream-listen ((s slime-input-stream))$/;"	f
stream-read-char	slime/swank-gray.lisp	/^(defmethod stream-read-char ((s slime-input-stream))$/;"	f
stream-read-char-no-hang	slime/swank-gray.lisp	/^(defmethod stream-read-char-no-hang ((s slime-input-stream))$/;"	f
stream-read-char-will-hang-p	slime/swank-gray.lisp	/^(defmethod stream-read-char-will-hang-p ((s slime-input-stream))$/;"	f
stream-source-location-p	slime/swank-cmucl.lisp	/^(defun stream-source-location-p (object)$/;"	f
stream-source-position	slime/swank-sbcl.lisp	/^(defun stream-source-position (code-location stream)$/;"	f
stream-unread-char	slime/swank-gray.lisp	/^(defmethod stream-unread-char ((s slime-input-stream) char)$/;"	f
stream-write-char	slime/swank-gray.lisp	/^(defmethod stream-write-char ((stream slime-output-stream) char)$/;"	f
streamp	slime/xref.lisp	/^(define-caller-pattern streamp (form) :lisp)$/;"	f
string	slime/xref.lisp	/^(define-caller-pattern string (form) :lisp)$/;"	f
string	slime/xref.lisp	/^(define-pattern-substitution string  (:test #'stringp))$/;"	f
string->type	practicals-1.0.3/Chapter26/allegroserve.lisp	/^(defmethod string->type ((type (eql 'integer)) value)$/;"	f
string->type	practicals-1.0.3/Chapter26/html-infrastructure.lisp	/^(defgeneric string->type (type value))$/;"	f
string->type	practicals-1.0.3/Chapter26/html-infrastructure.lisp	/^(defmethod string->type ((type (eql 'string)) value)$/;"	f
string->type	practicals-1.0.3/Chapter29/mp3-browser.lisp	/^(defmethod string->type ((type (eql 'base-64-list)) value)$/;"	f
string->type	practicals-1.0.3/Chapter29/mp3-browser.lisp	/^(defmethod string->type ((type (eql 'integer)) value)$/;"	f
string->type	practicals-1.0.3/Chapter29/mp3-browser.lisp	/^(defmethod string->type ((type (eql 'keyword)) value)$/;"	f
string-args	practicals-1.0.3/Chapter25/id3v2.lisp	/^(defun string-args (encoding length terminator)$/;"	f
string-capitalize	slime/xref.lisp	/^(define-caller-pattern string-capitalize (form &key (:star form)) :lisp)$/;"	f
string-case-modifier	practicals-1.0.3/libraries/cl-ppcre-1.2.3/api.lisp	/^(defun string-case-modifier (str from to start end)$/;"	f
string-char-p	slime/xref.lisp	/^(define-caller-pattern string-char-p (form) :lisp)$/;"	f
string-downcase	slime/xref.lisp	/^(define-caller-pattern string-downcase (form &key (:star form)) :lisp)$/;"	f
string-equal	slime/xref.lisp	/^(define-caller-pattern string-equal (form form &key (:star form)) :lisp)$/;"	f
string-greaterp	slime/xref.lisp	/^(define-caller-pattern string-greaterp (form form &key (:star form)) :lisp)$/;"	f
string-left-trim	slime/xref.lisp	/^(define-caller-pattern string-left-trim (form form) :lisp)$/;"	f
string-lessp	slime/xref.lisp	/^(define-caller-pattern string-lessp (form form &key (:star form)) :lisp)$/;"	f
string-list-to-simple-string	practicals-1.0.3/libraries/cl-ppcre-1.2.3/util.lisp	/^(defun string-list-to-simple-string (string-list)$/;"	f
string-match	slime/swank-clisp.lisp	/^(defun string-match (pattern string n)$/;"	f
string-not-equal	slime/xref.lisp	/^(define-caller-pattern string-not-equal (form form &key (:star form)) :lisp)$/;"	f
string-not-greaterp	slime/xref.lisp	/^(define-caller-pattern string-not-greaterp (form form &key (:star form)) :lisp)$/;"	f
string-not-lessp	slime/xref.lisp	/^(define-caller-pattern string-not-lessp (form form &key (:star form)) :lisp)$/;"	f
string-path-snippet	slime/swank-sbcl.lisp	/^(defun string-path-snippet (string form-path position)$/;"	f
string-right-trim	slime/xref.lisp	/^(define-caller-pattern string-right-trim (form form) :lisp)$/;"	f
string-source-position	slime/swank-sbcl.lisp	/^(defun string-source-position (code-location string)$/;"	f
string-trim	slime/xref.lisp	/^(define-caller-pattern string-trim (form form) :lisp)$/;"	f
string-upcase	slime/xref.lisp	/^(define-caller-pattern string-upcase (form &key (:star form)) :lisp)$/;"	f
string/=	slime/xref.lisp	/^(define-caller-pattern string\/= (form form &key (:star form)) :lisp)$/;"	f
string<	slime/xref.lisp	/^(define-caller-pattern string< (form form &key (:star form)) :lisp)$/;"	f
string<=	slime/xref.lisp	/^(define-caller-pattern string<= (form form &key (:star form)) :lisp)$/;"	f
string=	slime/xref.lisp	/^(define-caller-pattern string= (form form &key (:star form)) :lisp)$/;"	f
string>	slime/xref.lisp	/^(define-caller-pattern string> (form form &key (:star form)) :lisp)$/;"	f
string>=	slime/xref.lisp	/^(define-caller-pattern string>= (form form &key (:star form)) :lisp)$/;"	f
string_for_lisp	practicals-1.0.3/libraries/cl-ppcre-1.2.3/perltest.pl	/^sub string_for_lisp {$/;"	s
stringp	slime/xref.lisp	/^(define-caller-pattern stringp (form) :lisp)$/;"	f
struct-closure-dd	slime/swank-cmucl.lisp	/^(defun struct-closure-dd (function)$/;"	f
struct-closure-dd	slime/swank-scl.lisp	/^(defun struct-closure-dd (function)$/;"	f
struct-closure-location	slime/swank-cmucl.lisp	/^(defun struct-closure-location (function)$/;"	f
struct-closure-location	slime/swank-scl.lisp	/^(defun struct-closure-location (function)$/;"	f
struct-closure-p	slime/swank-cmucl.lisp	/^(defun struct-closure-p (function)$/;"	f
struct-closure-p	slime/swank-scl.lisp	/^(defun struct-closure-p (function)$/;"	f
struct-constructor	slime/swank-cmucl.lisp	/^(defun struct-constructor (dd)$/;"	f
struct-constructor	slime/swank-scl.lisp	/^(defun struct-constructor (dd)$/;"	f
sublis	slime/xref.lisp	/^(define-caller-pattern sublis (form form &key (:star form)) :lisp)$/;"	f
subseq	slime/xref.lisp	/^(define-caller-pattern subseq (form form &optional form) :lisp)$/;"	f
subsetp	slime/xref.lisp	/^(define-caller-pattern subsetp (form form &key (:star form)) :lisp)$/;"	f
subst	slime/xref.lisp	/^(define-caller-pattern subst (form form form &key (:star form)) :lisp)$/;"	f
subst-if	slime/xref.lisp	/^(define-caller-pattern subst-if (form fn form &key (:star form)) :lisp)$/;"	f
subst-if-not	slime/xref.lisp	/^(define-caller-pattern subst-if-not (form fn form &key (:star form)) :lisp)$/;"	f
substitute	slime/xref.lisp	/^(define-caller-pattern substitute (form form form &key (:star form)) :lisp)$/;"	f
substitute-if	slime/xref.lisp	/^(define-caller-pattern substitute-if (form fn form &key (:star form)) :lisp)$/;"	f
substitute-if-not	slime/xref.lisp	/^(define-caller-pattern substitute-if-not (form fn form &key (:star form)) :lisp)$/;"	f
substream	slime/contrib/swank-mit-scheme.scm	/^(define (substream s from to)$/;"	f
subtypep	slime/xref.lisp	/^(define-caller-pattern subtypep (form form) :lisp)$/;"	f
sudoku-config-dump	config-parser.lisp	/^(defun sudoku-config-dump (puzzle file)$/;"	f
sudoku-config-dump	sudoku/config-parser.lisp	/^(defun sudoku-config-dump (puzzle file)$/;"	f
sudoku-config-parse	config-parser.lisp	/^(defun sudoku-config-parse (file)$/;"	f
sudoku-config-parse	sudoku/config-parser.lisp	/^(defun sudoku-config-parse (file)$/;"	f
sum	chiglug-macros/presentation.lisp	/^(defmacro sum (x y)$/;"	f
sum	chiglug-macros/presentation.lisp	/^(defun sum (x y)$/;"	f
sum	mit2a.lisp	/^(defun sum (a b)$/;"	f
sum-int	mit2a.lisp	/^(defun sum-int (a b)$/;"	f
sum-sq	mit2a.lisp	/^(defun sum-sq (a b)$/;"	f
svref	slime/xref.lisp	/^(define-caller-pattern svref (form form) :lisp)$/;"	f
swank	slime/contrib/swank-mit-scheme.scm	/^(define (swank port)$/;"	f
swank-compilation-unit-for-emacs	slime/swank.lisp	/^(defun swank-compilation-unit-for-emacs (unit)$/;"	f
swank-compile-file	slime/swank-abcl.lisp	/^(defimplementation swank-compile-file (filename load-p external-format)$/;"	f
swank-compile-file	slime/swank-allegro.lisp	/^(defimplementation swank-compile-file (filename load-p external-format)$/;"	f
swank-compile-file	slime/swank-backend.lisp	/^(definterface swank-compile-file (filename load-p external-format)$/;"	f
swank-compile-file	slime/swank-clisp.lisp	/^(defimplementation swank-compile-file (filename load-p external-format)$/;"	f
swank-compile-file	slime/swank-cmucl.lisp	/^(defimplementation swank-compile-file (filename load-p external-format)$/;"	f
swank-compile-file	slime/swank-corman.lisp	/^(defimplementation swank-compile-file (*compile-filename* load-p$/;"	f
swank-compile-file	slime/swank-ecl.lisp	/^(defimplementation swank-compile-file (*compile-filename* load-p$/;"	f
swank-compile-file	slime/swank-lispworks.lisp	/^(defimplementation swank-compile-file (filename load-p external-format)$/;"	f
swank-compile-file	slime/swank-openmcl.lisp	/^(defimplementation swank-compile-file (filename load-p external-format)$/;"	f
swank-compile-file	slime/swank-sbcl.lisp	/^(defimplementation swank-compile-file (filename load-p external-format)$/;"	f
swank-compile-file	slime/swank-scl.lisp	/^(defimplementation swank-compile-file (filename load-p external-format)$/;"	f
swank-compile-string	slime/swank-abcl.lisp	/^(defimplementation swank-compile-string (string &key buffer position directory$/;"	f
swank-compile-string	slime/swank-allegro.lisp	/^(defimplementation swank-compile-string (string &key buffer position directory$/;"	f
swank-compile-string	slime/swank-backend.lisp	/^(definterface swank-compile-string (string &key buffer position directory debug)$/;"	f
swank-compile-string	slime/swank-clisp.lisp	/^(defimplementation swank-compile-string (string &key buffer position directory$/;"	f
swank-compile-string	slime/swank-cmucl.lisp	/^(defimplementation swank-compile-string (string &key buffer position directory$/;"	f
swank-compile-string	slime/swank-corman.lisp	/^(defimplementation swank-compile-string (string &key buffer position directory$/;"	f
swank-compile-string	slime/swank-ecl.lisp	/^(defimplementation swank-compile-string (string &key buffer position directory$/;"	f
swank-compile-string	slime/swank-lispworks.lisp	/^(defimplementation swank-compile-string (string &key buffer position directory$/;"	f
swank-compile-string	slime/swank-openmcl.lisp	/^(defimplementation swank-compile-string (string &key buffer position directory$/;"	f
swank-compile-string	slime/swank-sbcl.lisp	/^(defimplementation swank-compile-string (string &key buffer position directory$/;"	f
swank-compile-string	slime/swank-scl.lisp	/^(defimplementation swank-compile-string (string &key buffer position directory$/;"	f
swank-compiler	slime/swank.lisp	/^(defun swank-compiler (function)$/;"	f
swank-compiler-macroexpand	slime/swank.lisp	/^(defslimefun swank-compiler-macroexpand (string)$/;"	f
swank-compiler-macroexpand-1	slime/swank.lisp	/^(defslimefun swank-compiler-macroexpand-1 (string)$/;"	f
swank-debugger-hook	slime/swank.lisp	/^(defun swank-debugger-hook (condition hook)$/;"	f
swank-env	slime/contrib/swank-mit-scheme.scm	/^(define swank-env (->environment (swank-package)))$/;"	f
swank-error	slime/swank.lisp	/^(define-condition swank-error (error) $/;"	f
swank-ioify	slime/contrib/swank-presentations.lisp	/^(defun swank-ioify (thing)$/;"	f
swank-java-source-path	slime/contrib/swank-kawa.scm	/^(define swank-java-source-path$/;"	f
swank-log-port	slime/contrib/swank-kawa.scm	/^(define swank-log-port (current-error-port))$/;"	f
swank-macroexpand	slime/contrib/swank-kawa.scm	/^(defslimefun swank-macroexpand (env s) (%swank-macroexpand s))$/;"	f
swank-macroexpand	slime/swank.lisp	/^(defslimefun swank-macroexpand (string)$/;"	f
swank-macroexpand-1	slime/contrib/swank-kawa.scm	/^(defslimefun swank-macroexpand-1 (env s) (%swank-macroexpand s))$/;"	f
swank-macroexpand-1	slime/swank.lisp	/^(defslimefun swank-macroexpand-1 (string)$/;"	f
swank-macroexpand-all	slime/contrib/swank-kawa.scm	/^(defslimefun swank-macroexpand-all (env s) (%swank-macroexpand s))$/;"	f
swank-macroexpand-all	slime/swank.lisp	/^(defslimefun swank-macroexpand-all (string)$/;"	f
swank-mop:class-finalized-p	slime/swank-corman.lisp	/^(defun swank-mop:class-finalized-p (class)$/;"	f
swank-mop:class-prototype	slime/swank-corman.lisp	/^(defun swank-mop:class-prototype (class)$/;"	f
swank-mop:compute-applicable-methods-using-classes	slime/swank-lispworks.lisp	/^(defun swank-mop:compute-applicable-methods-using-classes (gf classes)$/;"	f
swank-mop:compute-applicable-methods-using-classes	slime/swank-openmcl.lisp	/^(defun swank-mop:compute-applicable-methods-using-classes (gf args)$/;"	f
swank-mop:eql-specializer	slime/swank-corman.lisp	/^(deftype swank-mop:eql-specializer ()$/;"	f
swank-mop:eql-specializer	slime/swank-lispworks.lisp	/^(deftype swank-mop:eql-specializer () 'cons)$/;"	f
swank-mop:eql-specializer-object	slime/swank-corman.lisp	/^(defun swank-mop:eql-specializer-object (specializer)$/;"	f
swank-mop:eql-specializer-object	slime/swank-lispworks.lisp	/^(defun swank-mop:eql-specializer-object (eql-spec)$/;"	f
swank-mop:generic-function-argument-precedence-order	slime/swank-corman.lisp	/^(defun swank-mop:generic-function-argument-precedence-order (gf)$/;"	f
swank-mop:generic-function-declarations	slime/swank-corman.lisp	/^(defun swank-mop:generic-function-declarations (gf)$/;"	f
swank-mop:generic-function-method-combination	slime/swank-corman.lisp	/^(defun swank-mop:generic-function-method-combination (gf)$/;"	f
swank-mop:slot-definition-documentation	slime/swank-allegro.lisp	/^(defun swank-mop:slot-definition-documentation (slot)$/;"	f
swank-mop:slot-definition-documentation	slime/swank-cmucl.lisp	/^(defun swank-mop:slot-definition-documentation (slot)$/;"	f
swank-mop:slot-definition-documentation	slime/swank-corman.lisp	/^(defun swank-mop:slot-definition-documentation (slot)$/;"	f
swank-mop:slot-definition-documentation	slime/swank-lispworks.lisp	/^(defun swank-mop:slot-definition-documentation (slot)$/;"	f
swank-mop:slot-definition-documentation	slime/swank-sbcl.lisp	/^(defun swank-mop:slot-definition-documentation (slot)$/;"	f
swank-mop:slot-definition-documentation	slime/swank-scl.lisp	/^(defun swank-mop:slot-definition-documentation (slot)$/;"	f
swank-mop:slot-definition-type	slime/swank-corman.lisp	/^(defun swank-mop:slot-definition-type (slot)$/;"	f
swank-mop:specializer-direct-methods	slime/swank-corman.lisp	/^(defun swank-mop:specializer-direct-methods (obj)$/;"	f
swank-mop:standard-slot-definition	slime/swank-clisp.lisp	/^(defclass swank-mop:standard-slot-definition ()$/;"	f
swank-mop:standard-slot-definition	slime/swank-corman.lisp	/^(defclass swank-mop:standard-slot-definition ()$/;"	f
swank-package	slime/contrib/swank-mit-scheme.scm	/^(define (swank-package)$/;"	f
swank-pprint	slime/swank.lisp	/^(defun swank-pprint (list)$/;"	f
swank-require	slime/swank.lisp	/^(defslimefun swank-require (modules &optional filename)$/;"	f
swank-sym	slime/swank-lispworks.lisp	/^(defun swank-sym (name) (find-symbol (string name) :swank))$/;"	f
swank-toggle-trace	slime/swank.lisp	/^(defslimefun swank-toggle-trace (spec-string)$/;"	f
swank:apropos-list-for-emacs	slime/contrib/swank-mit-scheme.scm	/^(define (swank:apropos-list-for-emacs _ name #!optional $/;"	f
swank:backtrace	slime/contrib/swank-mit-scheme.scm	/^(define (swank:backtrace _ from to)$/;"	f
swank:buffer-first-change	slime/contrib/swank-mit-scheme.scm	/^(define (swank:buffer-first-change . _) nil)$/;"	f
swank:compile-file-for-emacs	slime/contrib/swank-mit-scheme.scm	/^(define (swank:compile-file-for-emacs socket file load?)$/;"	f
swank:compile-string-for-emacs	slime/contrib/swank-mit-scheme.scm	/^(define (swank:compile-string-for-emacs _ string . x)$/;"	f
swank:compiler-notes-for-emacs	slime/contrib/swank-mit-scheme.scm	/^(define (swank:compiler-notes-for-emacs _) nil)$/;"	f
swank:connection-info	slime/contrib/swank-mit-scheme.scm	/^(define (swank:connection-info _)$/;"	f
swank:debugger-info-for-emacs	slime/contrib/swank-mit-scheme.scm	/^(define (swank:debugger-info-for-emacs _ from to)$/;"	f
swank:disassemble-symbol	slime/contrib/swank-mit-scheme.scm	/^(define (swank:disassemble-symbol _ string)$/;"	f
swank:filename-to-modulename	slime/contrib/swank-mit-scheme.scm	/^(define (swank:filename-to-modulename . _) nil)$/;"	f
swank:find-definitions-for-emacs	slime/contrib/swank-mit-scheme.scm	/^(define (swank:find-definitions-for-emacs . _) nil)$/;"	f
swank:frame-catch-tags-for-emacs	slime/contrib/swank-mit-scheme.scm	/^(define (swank:frame-catch-tags-for-emacs . _) nil)$/;"	f
swank:frame-locals-for-emacs	slime/contrib/swank-mit-scheme.scm	/^(define (swank:frame-locals-for-emacs _ frame)$/;"	f
swank:init-inspector	slime/contrib/swank-mit-scheme.scm	/^(define (swank:init-inspector _ string)$/;"	f
swank:inspect-frame-var	slime/contrib/swank-mit-scheme.scm	/^(define (swank:inspect-frame-var _ frame var)$/;"	f
swank:inspect-nth-part	slime/contrib/swank-mit-scheme.scm	/^(define (swank:inspect-nth-part _ index)$/;"	f
swank:inspector-next	slime/contrib/swank-mit-scheme.scm	/^(define (swank:inspector-next _)$/;"	f
swank:inspector-pop	slime/contrib/swank-mit-scheme.scm	/^(define (swank:inspector-pop _)$/;"	f
swank:inspector-range	slime/contrib/swank-mit-scheme.scm	/^(define (swank:inspector-range _ from to)$/;"	f
swank:interactive-eval	slime/contrib/swank-mit-scheme.scm	/^(define (swank:interactive-eval socket string)$/;"	f
swank:interactive-eval-region	slime/contrib/swank-mit-scheme.scm	/^(define (swank:interactive-eval-region socket string)$/;"	f
swank:invoke-nth-restart-for-emacs	slime/contrib/swank-mit-scheme.scm	/^(define (swank:invoke-nth-restart-for-emacs _ _sldb-level n)$/;"	f
swank:list-all-package-names	slime/contrib/swank-mit-scheme.scm	/^(define (swank:list-all-package-names . _)$/;"	f
swank:listener-eval	slime/contrib/swank-mit-scheme.scm	/^(define (swank:listener-eval socket string)$/;"	f
swank:load-file	slime/contrib/swank-mit-scheme.scm	/^(define (swank:load-file socket file)$/;"	f
swank:operator-arglist	slime/contrib/swank-mit-scheme.scm	/^(define (swank:operator-arglist socket name pack)$/;"	f
swank:pprint-eval	slime/contrib/swank-mit-scheme.scm	/^(define (swank:pprint-eval _ string)$/;"	f
swank:quit-inspector	slime/contrib/swank-mit-scheme.scm	/^(define (swank:quit-inspector _)$/;"	f
swank:quit-lisp	slime/contrib/swank-mit-scheme.scm	/^(define (swank:quit-lisp _)$/;"	f
swank:set-package	slime/contrib/swank-mit-scheme.scm	/^(define (swank:set-package _ package)$/;"	f
swank:simple-completions	slime/contrib/swank-mit-scheme.scm	/^(define (swank:simple-completions _ string package)$/;"	f
swank:sldb-abort	slime/contrib/swank-mit-scheme.scm	/^(define (swank:sldb-abort . _)$/;"	f
swank:sldb-continue	slime/contrib/swank-mit-scheme.scm	/^(define (swank:sldb-continue . _)$/;"	f
swank:swank-macroexpand	slime/contrib/swank-mit-scheme.scm	/^(define swank:swank-macroexpand swank:swank-macroexpand-all)$/;"	f
swank:swank-macroexpand-1	slime/contrib/swank-mit-scheme.scm	/^(define swank:swank-macroexpand-1 swank:swank-macroexpand-all)$/;"	f
swank:swank-macroexpand-all	slime/contrib/swank-mit-scheme.scm	/^(define (swank:swank-macroexpand-all _ string) $/;"	f
swank:throw-to-toplevel	slime/contrib/swank-mit-scheme.scm	/^(define (swank:throw-to-toplevel . _)$/;"	f
swap-bytes	practicals-1.0.3/Chapter25/id3v2.lisp	/^(defun swap-bytes (code)$/;"	f
sxhash	slime/xref.lisp	/^(define-caller-pattern sxhash (form) :lisp)$/;"	f
symb	onlisp.lisp	/^(defun symb (&rest args)$/;"	f
symbol	slime/xref.lisp	/^(define-pattern-substitution symbol  (:test #'symbolp))$/;"	f
symbol->cookie-name	practicals-1.0.3/Chapter26/html-infrastructure.lisp	/^(defun symbol->cookie-name (function-name sym sticky)$/;"	f
symbol->query-name	practicals-1.0.3/Chapter26/html-infrastructure.lisp	/^(defun symbol->query-name (sym)$/;"	f
symbol-classification->string	slime/swank.lisp	/^(defun symbol-classification->string (flags)$/;"	f
symbol-debug-function-arglist	slime/swank-cmucl.lisp	/^(defun symbol-debug-function-arglist (fname)$/;"	f
symbol-debug-function-arglist	slime/swank-scl.lisp	/^(defun symbol-debug-function-arglist (fname)$/;"	f
symbol-external-p	slime/swank.lisp	/^(defun symbol-external-p (symbol &optional (package (symbol-package symbol)))$/;"	f
symbol-function	slime/xref.lisp	/^(define-caller-pattern symbol-function (form) :lisp)$/;"	f
symbol-indentation	slime/contrib/swank-indentation.lisp	/^(defun symbol-indentation (symbol)$/;"	f
symbol-indentation	slime/swank.lisp	/^(defun symbol-indentation (symbol)$/;"	f
symbol-macrolet	slime/xref.lisp	/^(define-caller-pattern symbol-macrolet$/;"	f
symbol-name	slime/xref.lisp	/^(define-caller-pattern symbol-name (form) :lisp)$/;"	f
symbol-package	slime/xref.lisp	/^(define-caller-pattern symbol-package (form) :lisp)$/;"	f
symbol-plist	slime/xref.lisp	/^(define-caller-pattern symbol-plist (form) :lisp)$/;"	f
symbol-status	slime/swank.lisp	/^(defun symbol-status (symbol &optional (package (symbol-package symbol)))$/;"	f
symbol-value	slime/xref.lisp	/^(define-caller-pattern symbol-value (form) :lisp)$/;"	f
symbolp	slime/xref.lisp	/^(define-caller-pattern symbolp (form) :lisp)$/;"	f
sync-features-to-emacs	slime/swank.lisp	/^(defun sync-features-to-emacs ()$/;"	f
sync-indentation-to-emacs	slime/swank.lisp	/^(defun sync-indentation-to-emacs ()$/;"	f
synonym-stream-symbol	slime/xref.lisp	/^(define-caller-pattern synonym-stream-symbol (form) :lisp2)$/;"	f
sys::break	slime/swank-abcl.lisp	/^(defun sys::break (&optional (format-control "BREAK called") $/;"	f
t	slime/contrib/swank-mit-scheme.scm	/^(define t 't)$/;"	f
t	slime/xref.lisp	/^(define-variable-pattern t :lisp)$/;"	f
table	practicals-1.0.3/Chapter27/database.lisp	/^(defclass table ()$/;"	f
table-size	practicals-1.0.3/Chapter27/database.lisp	/^(defun table-size (table)$/;"	f
tag	slime/xref.lisp	/^(define-pattern-substitution tag symbol)$/;"	f
tagbody	slime/xref.lisp	/^(define-caller-pattern tagbody ((:star (:or tag form))) :lisp)$/;"	f
tailp	slime/xref.lisp	/^(define-caller-pattern tailp (form form) :lisp)$/;"	f
take-input	slime/swank.lisp	/^(defslimefun take-input (tag input)$/;"	f
tan	slime/xref.lisp	/^(define-caller-pattern tan (form) :lisp)$/;"	f
tanh	slime/xref.lisp	/^(define-caller-pattern tanh (form) :lisp)$/;"	f
temp-file-name	slime/swank-openmcl.lisp	/^(defun temp-file-name ()$/;"	f
temp-file-name	slime/swank-sbcl.lisp	/^(defun temp-file-name ()$/;"	f
tenth	slime/xref.lisp	/^(define-caller-pattern tenth (form) :lisp)$/;"	f
terminated-type	practicals-1.0.3/Chapter25/id3v2.lisp	/^(defun terminated-type (encoding)$/;"	f
terpri	slime/xref.lisp	/^(define-caller-pattern terpri ((:optional form)) :lisp)$/;"	f
test	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<br>&nbsp;<br><h3><a name="test" class=none>Testing CL-PPCRE<\/a><\/h3>$/;"	a
test	practicals-1.0.3/libraries/cl-ppcre-1.2.3/ppcre-tests.lisp	/^(defun test (&key (file-name $/;"	f
test	slime/metering.lisp	/^(defun test (x y &optional (z 3)) 3)$/;"	f
test	slime/xref.lisp	/^(define-pattern-substitution test form)$/;"	f
test-classifier	practicals-1.0.3/Chapter23/spam.lisp	/^(defun test-classifier (corpus testing-fraction)$/;"	f
test-from-corpus	practicals-1.0.3/Chapter23/spam.lisp	/^(defun test-from-corpus (corpus &key (start 0) end)$/;"	f
test-print-arglist	slime/contrib/swank-arglists.lisp	/^(defun test-print-arglist ()$/;"	f
test2	slime/metering.lisp	/^(defun test2 (x y &optional (z 3) &rest fred) 3)$/;"	f
text-info-frame	practicals-1.0.3/Chapter25/id3v2.lisp	/^(define-binary-class text-info-frame ()$/;"	f
text-info-frame-v2.2	practicals-1.0.3/Chapter25/id3v2.lisp	/^(define-binary-class text-info-frame-v2.2 (id3v2.2-frame text-info-frame) ())$/;"	f
text-info-frame-v2.3	practicals-1.0.3/Chapter25/id3v2.lisp	/^(define-binary-class text-info-frame-v2.3 (id3v2.3-frame text-info-frame) ())$/;"	f
the	slime/xref.lisp	/^(define-caller-pattern the (form form) :lisp)$/;"	f
third	slime/xref.lisp	/^(define-caller-pattern third (form) :lisp)$/;"	f
thread-alive-p	slime/swank-backend.lisp	/^(definterface thread-alive-p (thread)$/;"	f
thread-alive-p	slime/swank-corman.lisp	/^(defimplementation thread-alive-p (thread)$/;"	f
thread-alive-p	slime/swank-lispworks.lisp	/^(defimplementation thread-alive-p (thread)$/;"	f
thread-alive-p	slime/swank-scl.lisp	/^(defimplementation thread-alive-p (thread)$/;"	f
thread-description	slime/swank-backend.lisp	/^(definterface thread-description (thread)$/;"	f
thread-for-evaluation	slime/swank.lisp	/^(defun thread-for-evaluation (id)$/;"	f
thread-id	slime/swank-abcl.lisp	/^(defimplementation thread-id (thread)$/;"	f
thread-id	slime/swank-allegro.lisp	/^(defimplementation thread-id (thread)$/;"	f
thread-id	slime/swank-backend.lisp	/^(definterface thread-id (thread)$/;"	f
thread-id	slime/swank-corman.lisp	/^(defimplementation thread-id (thread)$/;"	f
thread-id	slime/swank-lispworks.lisp	/^(defimplementation thread-id (thread)$/;"	f
thread-id	slime/swank-openmcl.lisp	/^(defimplementation thread-id (thread)$/;"	f
thread-id	slime/swank-scl.lisp	/^(defimplementation thread-id (thread)$/;"	f
thread-name	slime/swank-abcl.lisp	/^(defimplementation thread-name (thread)$/;"	f
thread-name	slime/swank-allegro.lisp	/^(defimplementation thread-name (thread)$/;"	f
thread-name	slime/swank-backend.lisp	/^(definterface thread-name (thread)$/;"	f
thread-name	slime/swank-lispworks.lisp	/^(defimplementation thread-name (thread)$/;"	f
thread-name	slime/swank-openmcl.lisp	/^(defimplementation thread-name (thread)$/;"	f
thread-name	slime/swank-scl.lisp	/^(defimplementation thread-name (thread)$/;"	f
thread-status	slime/swank-abcl.lisp	/^(defimplementation thread-status (thread)$/;"	f
thread-status	slime/swank-allegro.lisp	/^(defimplementation thread-status (thread)$/;"	f
thread-status	slime/swank-backend.lisp	/^(definterface thread-status (thread)$/;"	f
thread-status	slime/swank-lispworks.lisp	/^(defimplementation thread-status (thread)$/;"	f
thread-status	slime/swank-openmcl.lisp	/^(defimplementation thread-status (thread)$/;"	f
thread-status	slime/swank-scl.lisp	/^(defimplementation thread-status (thread)$/;"	f
threaded-scan	practicals-1.0.3/libraries/cl-ppcre-1.2.3/ppcre-tests.lisp	/^(defun threaded-scan (scanner target-string &key (threads 10) (repetitions 5000))$/;"	f
throw	slime/xref.lisp	/^(define-caller-pattern throw (tag form) :lisp)$/;"	f
throw-to-toplevel	slime/swank.lisp	/^(defslimefun throw-to-toplevel ()$/;"	f
time	slime/contrib/swank-kawa.scm	/^(define-syntax time$/;"	f
time	slime/xref.lisp	/^(define-caller-pattern time (form) :lisp)$/;"	f
time-regex	practicals-1.0.3/libraries/cl-ppcre-1.2.3/ppcre-tests.lisp	/^(defun time-regex (factor regex string$/;"	f
time-units-per-second	slime/metering.lisp	/^(defconstant time-units-per-second internal-time-units-per-second)$/;"	f
to-string	slime/swank.lisp	/^(defun to-string (object)$/;"	f
toc_Command-Index	slime/doc/html/index.html	/^<li><a name="toc_Command-Index" href="Command-Index.html#Command-Index">Command and Function Index<\/a>$/;"	a
toc_Contributed-Packages	slime/doc/html/index.html	/^<li><a name="toc_Contributed-Packages" href="Contributed-Packages.html#Contributed-Packages">9 Contributed Packages<\/a>$/;"	a
toc_Credits	slime/doc/html/index.html	/^<li><a name="toc_Credits" href="Credits.html#Credits">10 Credits<\/a>$/;"	a
toc_Customization	slime/doc/html/index.html	/^<li><a name="toc_Customization" href="Customization.html#Customization">7 Customization<\/a>$/;"	a
toc_Debugger	slime/doc/html/index.html	/^<li><a name="toc_Debugger" href="Debugger.html#Debugger">5 SLDB: the SLIME debugger<\/a>$/;"	a
toc_Getting-started	slime/doc/html/index.html	/^<li><a name="toc_Getting-started" href="Getting-started.html#Getting-started">2 Getting started<\/a>$/;"	a
toc_Introduction	slime/doc/html/index.html	/^<li><a name="toc_Introduction" href="Introduction.html#Introduction">1 Introduction<\/a>$/;"	a
toc_Key-Index	slime/doc/html/index.html	/^<li><a name="toc_Key-Index" href="Key-Index.html#Key-Index">Key (Character) Index<\/a>$/;"	a
toc_Misc	slime/doc/html/index.html	/^<li><a name="toc_Misc" href="Misc.html#Misc">6 Misc<\/a>$/;"	a
toc_REPL	slime/doc/html/index.html	/^<li><a name="toc_REPL" href="REPL.html#REPL">4 REPL: the &ldquo;top level&rdquo;<\/a>$/;"	a
toc_Tips-and-Tricks	slime/doc/html/index.html	/^<li><a name="toc_Tips-and-Tricks" href="Tips-and-Tricks.html#Tips-and-Tricks">8 Tips and Tricks<\/a>$/;"	a
toc_Top	slime/doc/html/index.html	/^<li><a name="toc_Top" href="index.html#Top">SLIME<\/a>$/;"	a
toc_Variable-Index	slime/doc/html/index.html	/^<li><a name="toc_Variable-Index" href="Variable-Index.html#Variable-Index">Variable and Concept Index<\/a>$/;"	a
toc_slime_002dmode	slime/doc/html/index.html	/^<li><a name="toc_slime_002dmode" href="slime_002dmode.html#slime_002dmode">3 Using slime-mode<\/a>$/;"	a
toggle-indenting	practicals-1.0.3/Chapter31/html.lisp	/^(defgeneric toggle-indenting (processor))$/;"	f
toggle-indenting	practicals-1.0.3/Chapter31/html.lisp	/^(defmethod toggle-indenting ((compiler html-compiler))$/;"	f
toggle-indenting	practicals-1.0.3/Chapter31/html.lisp	/^(defmethod toggle-indenting ((pp html-pretty-printer))$/;"	f
toggle-profile-fdefinition	slime/swank.lisp	/^(defslimefun toggle-profile-fdefinition (fname-string)$/;"	f
toggle-trace	slime/swank-allegro.lisp	/^(defimplementation toggle-trace (spec)$/;"	f
toggle-trace	slime/swank-backend.lisp	/^(definterface toggle-trace (spec)$/;"	f
toggle-trace	slime/swank-cmucl.lisp	/^(defimplementation toggle-trace (spec)$/;"	f
toggle-trace	slime/swank-lispworks.lisp	/^(defimplementation toggle-trace (fspec)$/;"	f
toggle-trace	slime/swank-openmcl.lisp	/^(defimplementation toggle-trace (spec)$/;"	f
toggle-trace	slime/swank-sbcl.lisp	/^(defimplementation toggle-trace (spec)$/;"	f
toggle-trace	slime/swank-scl.lisp	/^(defimplementation toggle-trace (spec)$/;"	f
toggle-trace-aux	slime/swank-allegro.lisp	/^(defun toggle-trace-aux (fspec &rest args)$/;"	f
toggle-trace-aux	slime/swank-cmucl.lisp	/^(defun toggle-trace-aux (spec &rest options)$/;"	f
toggle-trace-aux	slime/swank-lispworks.lisp	/^(defun toggle-trace-aux (dspec)$/;"	f
toggle-trace-aux	slime/swank-sbcl.lisp	/^(defun toggle-trace-aux (fspec &rest args)$/;"	f
toggle-trace-aux	slime/swank-scl.lisp	/^(defun toggle-trace-aux (spec &rest options)$/;"	f
toggle-trace-generic-function-methods	slime/swank-allegro.lisp	/^(defun toggle-trace-generic-function-methods (name)$/;"	f
tokenize-completion	slime/contrib/swank-c-p-c.lisp	/^(defun tokenize-completion (string delimeter)$/;"	f
tokenize-symbol	slime/swank.lisp	/^(defun tokenize-symbol (string)$/;"	f
tokenize-symbol-thoroughly	slime/swank.lisp	/^(defun tokenize-symbol-thoroughly (string)$/;"	f
trace	slime/xref.lisp	/^(define-caller-pattern trace ((:star form)) :lisp)$/;"	f
tracedp	slime/swank-allegro.lisp	/^(defun tracedp (fspec)$/;"	f
tracedp	slime/swank-cmucl.lisp	/^(defun tracedp (spec)$/;"	f
tracedp	slime/swank-lispworks.lisp	/^(defun tracedp (dspec) $/;"	f
tracedp	slime/swank-scl.lisp	/^(defun tracedp (spec)$/;"	f
tracedp	slime/swank.lisp	/^(defun tracedp (fspec)$/;"	f
track	practicals-1.0.3/Chapter25/id3v2.lisp	/^(defun track (id3) (get-text-info id3 "TRK" "TRCK"))$/;"	f
track-package	slime/swank.lisp	/^(defun track-package (fun)$/;"	f
train	practicals-1.0.3/Chapter23/spam.lisp	/^(defun train (text type)$/;"	f
train-from-corpus	practicals-1.0.3/Chapter23/spam.lisp	/^(defun train-from-corpus (corpus &key (start 0) end)$/;"	f
translate-logical-pathname	slime/xref.lisp	/^(define-caller-pattern translate-logical-pathname (form &key (:star form)) :lisp2)$/;"	f
translate-pathname	slime/xref.lisp	/^(define-caller-pattern translate-pathname (form form form &key (:star form))$/;"	f
translate-v1-genre	practicals-1.0.3/Chapter25/id3v2.lisp	/^(defun translate-v1-genre (genre)$/;"	f
translated-genre	practicals-1.0.3/Chapter25/id3v2.lisp	/^(defun translated-genre (id3)$/;"	f
transpose-lists	slime/contrib/swank-c-p-c.lisp	/^(defun transpose-lists (lists)$/;"	f
tree-equal	slime/xref.lisp	/^(define-caller-pattern tree-equal (form form &key (:star fn)) :lisp)$/;"	f
triangularp	project-euler.lisp	/^(defun triangularp (num)$/;"	f
trim-whitespace	slime/swank-clisp.lisp	/^(defun trim-whitespace (string)$/;"	f
trim-whitespace	slime/swank-cmucl.lisp	/^(defun trim-whitespace (string)$/;"	f
truename	slime/xref.lisp	/^(define-caller-pattern truename (form) :lisp)$/;"	f
truncate	slime/xref.lisp	/^(define-caller-pattern truncate (form (:optional form)) :lisp)$/;"	f
try-number	practicals-1.0.3/libraries/cl-ppcre-1.2.3/lexer.lisp	/^(defun try-number (lexer &key (radix 10) max-length no-whitespace-p)$/;"	f
turn-off-chunked-transfer-encoding	practicals-1.0.3/Chapter28/shoutcast.lisp	/^(defun turn-off-chunked-transfer-encoding (request)$/;"	f
two-way-stream-input-stream	slime/xref.lisp	/^(define-caller-pattern two-way-stream-input-stream (form) :lisp2)$/;"	f
two-way-stream-output-stream	slime/xref.lisp	/^(define-caller-pattern two-way-stream-output-stream (form) :lisp2)$/;"	f
twosump	project-euler.lisp	/^(defun twosump (val list)$/;"	f
type-definitions	slime/swank-cmucl.lisp	/^(defun type-definitions (name)$/;"	f
type-definitions	slime/swank-scl.lisp	/^(defun type-definitions (name)$/;"	f
type-error-datum	slime/xref.lisp	/^(define-caller-pattern type-error-datum (form) :lisp2)$/;"	f
type-error-expected-type	slime/xref.lisp	/^(define-caller-pattern type-error-expected-type (form) :lisp2)$/;"	f
type-of	slime/xref.lisp	/^(define-caller-pattern type-of (form) :lisp)$/;"	f
type-reader-body	practicals-1.0.3/Chapter24/binary-data.lisp	/^(defun type-reader-body (spec stream)$/;"	f
type-specifier-arglist	slime/swank-backend.lisp	/^(defgeneric type-specifier-arglist (typespec-operator)$/;"	f
type-writer-body	practicals-1.0.3/Chapter24/binary-data.lisp	/^(defun type-writer-body (spec stream value)$/;"	f
typecase	slime/contrib/swank-kawa.scm	/^(define-syntax typecase $/;"	f
typecase	slime/xref.lisp	/^(define-caller-pattern typecase (form (:star (symbol (:star form)))) $/;"	f
typep	slime/xref.lisp	/^(define-caller-pattern typep (form form) :lisp)$/;"	f
u1	practicals-1.0.3/Chapter25/id3v2.lisp	/^(define-binary-type u1 () (unsigned-integer :bytes 1 :bits-per-byte 8))$/;"	f
u2	practicals-1.0.3/Chapter25/id3v2.lisp	/^(define-binary-type u2 () (unsigned-integer :bytes 2 :bits-per-byte 8))$/;"	f
u3	practicals-1.0.3/Chapter25/id3v2.lisp	/^(define-binary-type u3 () (unsigned-integer :bytes 3 :bits-per-byte 8))$/;"	f
u4	practicals-1.0.3/Chapter25/id3v2.lisp	/^(define-binary-type u4 () (unsigned-integer :bytes 4 :bits-per-byte 8))$/;"	f
ucs-2-char	practicals-1.0.3/Chapter25/id3v2.lisp	/^(define-binary-type ucs-2-char (swap)$/;"	f
ucs-2-char-big-endian	practicals-1.0.3/Chapter25/id3v2.lisp	/^(define-binary-type ucs-2-char-big-endian () (ucs-2-char :swap nil))$/;"	f
ucs-2-char-little-endian	practicals-1.0.3/Chapter25/id3v2.lisp	/^(define-binary-type ucs-2-char-little-endian () (ucs-2-char :swap t))$/;"	f
ucs-2-char-type	practicals-1.0.3/Chapter25/id3v2.lisp	/^(defun ucs-2-char-type (byte-order-mark)$/;"	f
ucs-2-string	practicals-1.0.3/Chapter25/id3v2.lisp	/^(define-binary-type ucs-2-string (length)$/;"	f
ucs-2-terminated-string	practicals-1.0.3/Chapter25/id3v2.lisp	/^(define-binary-type ucs-2-terminated-string (terminator)$/;"	f
undefine-function	slime/swank.lisp	/^(defslimefun undefine-function (fname-string)$/;"	f
unescape-char	practicals-1.0.3/libraries/cl-ppcre-1.2.3/lexer.lisp	/^(defun unescape-char (lexer)$/;"	f
unexport	slime/xref.lisp	/^(define-caller-pattern unexport ((:or symbol ((:star symbol)))$/;"	f
unforced	chiglug-macros/lazy-eval.lisp	/^(defconstant unforced (gensym))$/;"	f
unget-token	practicals-1.0.3/libraries/cl-ppcre-1.2.3/lexer.lisp	/^(defun unget-token (lexer)$/;"	f
unindent	practicals-1.0.3/Chapter31/html.lisp	/^(defgeneric unindent (processor))$/;"	f
unindent	practicals-1.0.3/Chapter31/html.lisp	/^(defmethod unindent ((compiler html-compiler))$/;"	f
unindent	practicals-1.0.3/Chapter31/html.lisp	/^(defmethod unindent ((pp html-pretty-printer))$/;"	f
unintern	slime/xref.lisp	/^(define-caller-pattern unintern (form &optional :ignore) :lisp)$/;"	f
unintern-in-home-package	slime/contrib/swank-arglists.lisp	/^(defun unintern-in-home-package (symbol)$/;"	f
union	slime/xref.lisp	/^(define-caller-pattern union (form form &key (:star form)) :lisp)$/;"	f
unique-dir-name	slime/swank-loader.lisp	/^(defun unique-dir-name ()$/;"	f
unit-good?	sudoku/sudoku.lisp	/^(defun unit-good? (unit)$/;"	f
unix-truename	slime/swank-cmucl.lisp	/^(defun unix-truename (pathname)$/;"	f
unix-truename	slime/swank-scl.lisp	/^(defun unix-truename (pathname)$/;"	f
unknown-file	chiglug-macros/power-of-lisp-macros.lisp	/^(define-test unknown-file ()$/;"	f
unless	slime/xref.lisp	/^(define-caller-pattern unless (test (:star form)) :lisp)$/;"	f
unmangle-unfun	slime/swank-lispworks.lisp	/^(defun unmangle-unfun (symbol)$/;"	f
unparse-name	slime/swank.lisp	/^(defun unparse-name (string)$/;"	f
unparse-symbol	slime/swank.lisp	/^(defun unparse-symbol (symbol)$/;"	f
unprofile	slime/swank-allegro.lisp	/^(defimplementation unprofile (fname)$/;"	f
unprofile	slime/swank-backend.lisp	/^(definterface unprofile (fname)$/;"	f
unprofile	slime/swank-clisp.lisp	/^(defimplementation unprofile (fname)$/;"	f
unprofile	slime/swank-cmucl.lisp	/^(defimplementation unprofile (fname)$/;"	f
unprofile	slime/swank-openmcl.lisp	/^(defimplementation unprofile (fname)$/;"	f
unprofile	slime/swank-sbcl.lisp	/^(defimplementation unprofile (fname)$/;"	f
unprofile	slime/swank-scl.lisp	/^(defimplementation unprofile (fname)$/;"	f
unprofile-all	slime/swank-backend.lisp	/^(definterface unprofile-all ()$/;"	f
unprofile-all	slime/swank-clisp.lisp	/^(defimplementation unprofile-all ()$/;"	f
unprofile-all	slime/swank-cmucl.lisp	/^(defimplementation unprofile-all ()$/;"	f
unprofile-all	slime/swank-openmcl.lisp	/^(defimplementation unprofile-all ()$/;"	f
unprofile-all	slime/swank-sbcl.lisp	/^(defimplementation unprofile-all ()$/;"	f
unprofile-all	slime/swank-scl.lisp	/^(defimplementation unprofile-all ()$/;"	f
unread-char	slime/xref.lisp	/^(define-caller-pattern unread-char (form (:optional form)) :lisp)$/;"	f
unsigned-integer	practicals-1.0.3/Chapter25/id3v2.lisp	/^(define-binary-type unsigned-integer (bytes bits-per-byte)$/;"	f
untokenize-completion	slime/contrib/swank-c-p-c.lisp	/^(defun untokenize-completion (tokens)$/;"	f
untokenize-symbol	slime/swank.lisp	/^(defun untokenize-symbol (package-name internal-p symbol-name)$/;"	f
untrace	slime/xref.lisp	/^(define-caller-pattern untrace ((:star form)) :lisp)$/;"	f
untrace-all	slime/swank.lisp	/^(defslimefun untrace-all ()$/;"	f
untrained-p	practicals-1.0.3/Chapter23/spam.lisp	/^(defun untrained-p (feature)$/;"	f
unuse-package	slime/xref.lisp	/^(define-caller-pattern unuse-package ((:rest :ignore)) :lisp)$/;"	f
unwind-protect	slime/xref.lisp	/^(define-caller-pattern unwind-protect (form (:star form)) :lisp)$/;"	f
unwind-to-previous-sldb-level	slime/slime.el	/^(def-slime-test unwind-to-previous-sldb-level (level2 level1)$/;"	f
update	db.lisp	/^(defun update (selector-fn &key title artist rating (ripped nil ripped-p))$/;"	f
update	practicals-1.0.3/Chapter03/simple-database.lisp	/^(defun update (selector-fn &key title artist rating (ripped nil ripped-p))$/;"	f
update-current-if-necessary	practicals-1.0.3/Chapter29/playlist.lisp	/^(defun update-current-if-necessary (playlist)$/;"	f
update-indentation-information	slime/swank.lisp	/^(defslimefun update-indentation-information ()$/;"	f
update-indentation/delta-for-emacs	slime/swank.lisp	/^(defun update-indentation\/delta-for-emacs (cache &optional force)$/;"	f
update-instance-for-different-class	slime/xref.lisp	/^(define-caller-pattern update-instance-for-different-class $/;"	f
update-instance-for-redefined-class	slime/xref.lisp	/^(define-caller-pattern update-instance-for-redefined-class $/;"	f
update-redirection-after-close	slime/swank.lisp	/^(defun update-redirection-after-close (closed-connection)$/;"	f
upgraded-array-element-type	slime/xref.lisp	/^(define-caller-pattern upgraded-array-element-type (:ignore) :lisp2)$/;"	f
upgraded-complex-part-type	slime/xref.lisp	/^(define-caller-pattern upgraded-complex-part-type (:ignore) :lisp2)$/;"	f
upper-case-p	slime/xref.lisp	/^(define-caller-pattern upper-case-p (form) :lisp)$/;"	f
upto-null	practicals-1.0.3/Chapter25/id3v2.lisp	/^(defun upto-null (string)$/;"	f
urlencode	practicals-1.0.3/Chapter29/mp3-browser.lisp	/^(defun urlencode (string)$/;"	f
usage	slime/test.sh	/^function usage () {$/;"	f
use-bmh-matchers	practicals-1.0.3/libraries/cl-ppcre-1.2.3/doc/index.html	/^<br><a class=none name="use-bmh-matchers"><b>*use-bmh-matchers*<\/b><\/a>$/;"	a
use-package	slime/xref.lisp	/^(define-caller-pattern use-package ((:rest :ignore)) :lisp)$/;"	f
use-value	slime/xref.lisp	/^(define-caller-pattern use-value (form &optional form) :lisp2)$/;"	f
user-env	slime/contrib/swank-mit-scheme.scm	/^(define (user-env buffer-package)$/;"	f
user-homedir-pathname	slime/xref.lisp	/^(define-caller-pattern user-homedir-pathname (&optional form) :lisp)$/;"	f
uvector-inspector	slime/swank-openmcl.lisp	/^(defclass uvector-inspector ()$/;"	f
uvector-inspector-p	slime/swank-openmcl.lisp	/^(defgeneric uvector-inspector-p (object)$/;"	f
valid-function-name-p	slime/contrib/swank-arglists.lisp	/^(defun valid-function-name-p (form)$/;"	f
valid-function-name-p	slime/swank-scl.lisp	/^(defun valid-function-name-p (name)$/;"	f
valid-operator-name-p	slime/contrib/swank-arglists.lisp	/^(defun valid-operator-name-p (string)$/;"	f
valid-operator-symbol-p	slime/contrib/swank-arglists.lisp	/^(defun valid-operator-symbol-p (symbol)$/;"	f
value-for-editing	slime/swank.lisp	/^(defslimefun value-for-editing (form)$/;"	f
value-in-interpreter	practicals-1.0.3/Chapter31/embed-foo-with-conditions-and-restarts.lisp	/^(define-condition value-in-interpreter (embedded-lisp-in-interpreter) ()$/;"	f
value-part	slime/swank.lisp	/^(defun value-part (object string)$/;"	f
values	slime/xref.lisp	/^(define-caller-pattern values ((:star form)) :lisp)$/;"	f
values->base-64	practicals-1.0.3/Chapter29/mp3-browser.lisp	/^(defun values->base-64 (column values-table)$/;"	f
values-for-page	practicals-1.0.3/Chapter29/mp3-browser.lisp	/^(defun values-for-page (what genre artist album random)$/;"	f
values-list	slime/xref.lisp	/^(define-caller-pattern values-list (form) :lisp)$/;"	f
variable-definitions	slime/swank-cmucl.lisp	/^(defun variable-definitions (name)$/;"	f
variable-definitions	slime/swank-scl.lisp	/^(defun variable-definitions (name)$/;"	f
variable-desc-for-echo-area	slime/contrib/swank-arglists.lisp	/^(defslimefun variable-desc-for-echo-area (variable-name)$/;"	f
variable-information	slime/xref.lisp	/^(define-caller-pattern variable-information (form &optional :ignore) $/;"	f
variable-location	slime/swank-cmucl.lisp	/^(defun variable-location (symbol)$/;"	f
variable-location	slime/swank-scl.lisp	/^(defun variable-location (symbol)$/;"	f
vat-test	chiglug-macros/power-of-lisp-macros.lisp	/^(defun vat-test ()$/;"	f
vector	slime/xref.lisp	/^(define-caller-pattern vector ((:star form)) :lisp)$/;"	f
vector-pop	slime/xref.lisp	/^(define-caller-pattern vector-pop (form) :lisp)$/;"	f
vector-push	slime/xref.lisp	/^(define-caller-pattern vector-push (form form) :lisp)$/;"	f
vector-push-extend	slime/xref.lisp	/^(define-caller-pattern vector-push-extend (form form (:optional form)) :lisp)$/;"	f
vectorp	slime/xref.lisp	/^(define-caller-pattern vectorp (form) :lisp)$/;"	f
venv-ref	slime/swank-clisp.lisp	/^(defun venv-ref (env i)$/;"	f
verb-phrase	paip/aip_ch2.lisp	/^(defun verb-phrase ()$/;"	f
view_002dlossage	slime/doc/html/Key-bindings.html	/^     <p><a name="view_002dlossage"><\/a><br><dt><kbd>C-h l<\/kbd><dd><code>view-lossage<\/code>$/;"	a
wake-up-after-sleep	chiglug-macros/power-of-lisp-macros.lisp	/^(define-test wake-up-after-sleep ()$/;"	f
walk-directory	practicals-1.0.3/Chapter15/pathnames.lisp	/^(defun walk-directory (dirname fn &key directories (test (constantly t)))$/;"	f
warn	slime/xref.lisp	/^(define-caller-pattern warn (form (:star form)) :lisp)$/;"	f
warn-unimplemented-interfaces	slime/swank-backend.lisp	/^(defun warn-unimplemented-interfaces ()$/;"	f
well-formed-list-p	slime/swank.lisp	/^(defun well-formed-list-p (list)$/;"	f
what-files-call	slime/xref.lisp	/^(defun what-files-call (symbol)$/;"	f
when	slime/xref.lisp	/^(define-caller-pattern when (test (:star form)) :lisp)$/;"	f
when-let	slime/slime.el	/^(defmacro* when-let ((var value) &rest body)$/;"	f
where	db.lisp	/^(defmacro where (&rest clauses)$/;"	f
where	practicals-1.0.3/Chapter03/simple-database.lisp	/^(defmacro where (&rest clauses)$/;"	f
while	chiglug-macros/presentation.lisp	/^(defmacro while (test &body body)$/;"	f
while	slime/contrib/swank-kawa.scm	/^(define-syntax while$/;"	f
who-binds	slime/swank-abcl.lisp	/^(defxref who-binds      pxref:list-setters)$/;"	f
who-binds	slime/swank-allegro.lisp	/^(defxref who-binds        :binds       :wild x)$/;"	f
who-binds	slime/swank-backend.lisp	/^(definterface who-binds (variable-name)$/;"	f
who-binds	slime/swank-clisp.lisp	/^(defxref who-binds      pxref:list-setters)$/;"	f
who-binds	slime/swank-cmucl.lisp	/^(defxref who-binds      xref:who-binds)$/;"	f
who-binds	slime/swank-openmcl.lisp	/^(defimplementation who-binds (name)$/;"	f
who-binds	slime/swank-scl.lisp	/^(defimplementation who-binds (name) nil)$/;"	f
who-calls	slime/swank-abcl.lisp	/^(defxref who-calls      pxref:list-callers)$/;"	f
who-calls	slime/swank-allegro.lisp	/^(defxref who-calls        :calls       :wild x)$/;"	f
who-calls	slime/swank-backend.lisp	/^(definterface who-calls (function-name)$/;"	f
who-calls	slime/swank-clisp.lisp	/^(defxref who-calls      pxref:list-callers)$/;"	f
who-calls	slime/swank-cmucl.lisp	/^(defxref who-calls      xref:who-calls)$/;"	f
who-calls	slime/swank-lispworks.lisp	/^(defxref who-calls      hcl:who-calls)$/;"	f
who-calls	slime/swank-openmcl.lisp	/^(defimplementation who-calls (name)$/;"	f
who-calls	slime/swank-scl.lisp	/^(defimplementation who-calls (name) nil)$/;"	f
who-calls	slime/xref.lisp	/^(defun who-calls (symbol &optional how)$/;"	f
who-macroexpands	slime/swank-allegro.lisp	/^(defxref who-macroexpands :macro-calls :wild x)$/;"	f
who-macroexpands	slime/swank-backend.lisp	/^(definterface who-macroexpands (macro-name)$/;"	f
who-macroexpands	slime/swank-lispworks.lisp	/^(defxref who-macroexpands hcl:who-calls) ; macros are in the calls table too$/;"	f
who-macroexpands	slime/swank-openmcl.lisp	/^(defimplementation who-macroexpands (name)$/;"	f
who-macroexpands	slime/swank-scl.lisp	/^(defimplementation who-macroexpands (name) nil)$/;"	f
who-references	slime/swank-abcl.lisp	/^(defxref who-references pxref:list-readers)$/;"	f
who-references	slime/swank-allegro.lisp	/^(defxref who-references   :uses        :wild x)$/;"	f
who-references	slime/swank-backend.lisp	/^(definterface who-references (variable-name)$/;"	f
who-references	slime/swank-clisp.lisp	/^(defxref who-references pxref:list-readers)$/;"	f
who-references	slime/swank-cmucl.lisp	/^(defxref who-references xref:who-references)$/;"	f
who-references	slime/swank-openmcl.lisp	/^(defimplementation who-references (name)$/;"	f
who-references	slime/swank-scl.lisp	/^(defimplementation who-references (name) nil)$/;"	f
who-sets	slime/swank-abcl.lisp	/^(defxref who-sets       pxref:list-setters)$/;"	f
who-sets	slime/swank-allegro.lisp	/^(defxref who-sets         :sets        :wild x)$/;"	f
who-sets	slime/swank-backend.lisp	/^(definterface who-sets (variable-name)$/;"	f
who-sets	slime/swank-clisp.lisp	/^(defxref who-sets       pxref:list-setters)$/;"	f
who-sets	slime/swank-cmucl.lisp	/^(defxref who-sets       xref:who-sets)$/;"	f
who-sets	slime/swank-openmcl.lisp	/^(defimplementation who-sets (name)$/;"	f
who-sets	slime/swank-scl.lisp	/^(defimplementation who-sets (name) nil)$/;"	f
who-specializes	slime/swank-backend.lisp	/^(definterface who-specializes (class-name)$/;"	f
who-specializes	slime/swank-lispworks.lisp	/^(defimplementation who-specializes (classname)$/;"	f
who-specializes	slime/swank-openmcl.lisp	/^(defimplementation who-specializes (class)$/;"	f
who-specializes	slime/swank-scl.lisp	/^(defimplementation who-specializes (symbol) nil)$/;"	f
wild-pathname-p	slime/xref.lisp	/^(define-caller-pattern wild-pathname-p (form &optional form) :lisp2)$/;"	f
with	slime/contrib/swank-kawa.scm	/^(define-syntax with$/;"	f
with-accessors	slime/xref.lisp	/^(define-caller-pattern with-accessors$/;"	f
with-added-methods	slime/xref.lisp	/^(define-caller-pattern with-added-methods$/;"	f
with-availability	slime/contrib/swank-arglists.lisp	/^(defmacro with-availability ((var) form &body body)$/;"	f
with-bindings	slime/swank.lisp	/^(defmacro with-bindings (alist &body body)$/;"	f
with-buffer-syntax	slime/swank.lisp	/^(defmacro with-buffer-syntax ((&rest _) &body body)$/;"	f
with-column-values	practicals-1.0.3/Chapter27/database.lisp	/^(defmacro with-column-values ((&rest vars) row &body body)$/;"	f
with-compilation-hooks	slime/swank-backend.lisp	/^(defmacro with-compilation-hooks ((&rest ignore) &body body)$/;"	f
with-compilation-unit	slime/xref.lisp	/^(define-caller-pattern with-compilation-unit (((:star :ignore)) (:star form)) $/;"	f
with-condition-restarts	slime/xref.lisp	/^(define-caller-pattern with-condition-restarts$/;"	f
with-connection	slime/swank.lisp	/^(defmacro with-connection ((connection) &body body)$/;"	f
with-debootstrapping	slime/swank-sbcl.lisp	/^(defmacro with-debootstrapping (&body body)$/;"	f
with-describe-settings	slime/swank.lisp	/^(defmacro with-describe-settings ((&rest _) &body body)$/;"	f
with-dynamic-evaluation	practicals-1.0.3/Chapter31/embed-foo-with-conditions-and-restarts.lisp	/^(defmacro with-dynamic-evaluation ((&key values code) &body body)$/;"	f
with-fairly-standard-io-syntax	slime/swank-lispworks.lisp	/^(defmacro with-fairly-standard-io-syntax (&body body)$/;"	f
with-gensyms	practicals-1.0.3/Chapter08/macro-utilities.lisp	/^(defmacro with-gensyms ((&rest names) &body body)$/;"	f
with-hash-table-iterator	slime/xref.lisp	/^(define-caller-pattern with-hash-table-iterator$/;"	f
with-html-output	practicals-1.0.3/Chapter31/html.lisp	/^(defmacro with-html-output ((stream &key (pretty *pretty*)) &body body)$/;"	f
with-html-to-file	practicals-1.0.3/Chapter31/html.lisp	/^(defmacro with-html-to-file ((file &key (pretty *pretty*)) &body body)$/;"	f
with-input-from-string	slime/xref.lisp	/^(define-caller-pattern with-input-from-string$/;"	f
with-io-redirection	slime/swank.lisp	/^(defmacro with-io-redirection ((connection) &body body)$/;"	f
with-keyboard-interrupt-handler	slime/contrib/swank-mit-scheme.scm	/^(define (with-keyboard-interrupt-handler fun)$/;"	f
with-lock	slime/swank-corman.lisp	/^(defmacro with-lock  (lock &body body)$/;"	f
with-open-file	slime/xref.lisp	/^(define-caller-pattern with-open-file$/;"	f
with-open-stream	slime/xref.lisp	/^(define-caller-pattern with-open-stream$/;"	f
with-output-to-repl	slime/contrib/swank-mit-scheme.scm	/^(define (with-output-to-repl socket fun)$/;"	f
with-output-to-string	slime/xref.lisp	/^(define-caller-pattern with-output-to-string$/;"	f
with-package-iterator	slime/xref.lisp	/^(define-caller-pattern with-package-iterator$/;"	f
with-playlist-locked	practicals-1.0.3/Chapter29/playlist.lisp	/^(defmacro with-playlist-locked ((playlist) &body body)$/;"	f
with-reader-error-handler	slime/swank.lisp	/^(defmacro with-reader-error-handler ((connection) &body body)$/;"	f
with-rebinding	practicals-1.0.3/libraries/cl-ppcre-1.2.3/util.lisp	/^(defmacro with-rebinding (bindings &body body)$/;"	f
with-redirected-y-or-n-p	slime/swank-allegro.lisp	/^(defmacro with-redirected-y-or-n-p (&body body)$/;"	f
with-safe-io-syntax	practicals-1.0.3/Chapter29/mp3-browser.lisp	/^(defmacro with-safe-io-syntax (&body body)$/;"	f
with-simple-restart	slime/xref.lisp	/^(define-caller-pattern with-simple-restart$/;"	f
with-slots	slime/xref.lisp	/^(define-caller-pattern with-slots$/;"	f
with-standard-io-syntax	slime/xref.lisp	/^(define-caller-pattern with-standard-io-syntax $/;"	f
with-struct	slime/slime.el	/^(defmacro* with-struct ((conc-name &rest slots) struct &body body)$/;"	f
with-struct	slime/swank-backend.lisp	/^(defmacro with-struct ((conc-name &rest names) obj &body body)$/;"	f
with-swank-compilation-unit	slime/swank-lispworks.lisp	/^(defmacro with-swank-compilation-unit ((location &rest options) &body body)$/;"	f
with-swank-compilation-unit	slime/swank.lisp	/^(defmacro with-swank-compilation-unit ((&key override) &body body)$/;"	f
with-temp-package	slime/swank.lisp	/^(defmacro with-temp-package (var &body body)$/;"	f
with-thread-description	slime/swank.lisp	/^(defmacro with-thread-description (description &body body)$/;"	f
with-time/cons	slime/metering.lisp	/^(defmacro with-time\/cons ((delta-time delta-cons) form &body post-process)$/;"	f
with-timing	practicals-1.0.3/Chapter32/profiler.lisp	/^(defmacro with-timing (label &body body)$/;"	f
with-transaction	chiglug-macros/power-of-lisp-macros.lisp	/^(defmacro with-transaction (&body body)$/;"	f
with-unique-names	practicals-1.0.3/libraries/cl-ppcre-1.2.3/util.lisp	/^(defmacro with-unique-names ((&rest bindings) &body body)$/;"	f
with-unique-names*	chiglug-macros/power-of-lisp-macros.lisp	/^(defmacro with-unique-names* (vars &body body)$/;"	f
without-interrupts	slime/swank.lisp	/^(defmacro without-interrupts (&body body)$/;"	f
word-boundary-p	practicals-1.0.3/libraries/cl-ppcre-1.2.3/closures.lisp	/^(defun word-boundary-p (start-pos)$/;"	f
word-feature	practicals-1.0.3/Chapter23/spam.lisp	/^(defclass word-feature ()$/;"	f
wrap-sldb-vars	slime/swank.lisp	/^(defun wrap-sldb-vars (form)$/;"	f
write	slime/xref.lisp	/^(define-caller-pattern write (form &key (:star form)) :lisp)$/;"	f
write-annotation	slime/contrib/swank-presentation-streams.lisp	/^(defun write-annotation (stream function arg)$/;"	f
write-byte	slime/xref.lisp	/^(define-caller-pattern write-byte (form form) :lisp)$/;"	f
write-callers-database-to-file	slime/xref.lisp	/^(defun write-callers-database-to-file (filename)$/;"	f
write-char	slime/xref.lisp	/^(define-caller-pattern write-char (form (:optional form)) :lisp)$/;"	f
write-hex-digit	slime/contrib/swank-mit-scheme.scm	/^(define (write-hex-digit n out)$/;"	f
write-length	slime/contrib/swank-mit-scheme.scm	/^(define (write-length len out)$/;"	f
write-line	slime/xref.lisp	/^(define-caller-pattern write-line (form &optional form &key (:star form)) :lisp)$/;"	f
write-object	practicals-1.0.3/Chapter24/binary-data.lisp	/^(defgeneric write-object (object stream)$/;"	f
write-object	practicals-1.0.3/Chapter24/binary-data.lisp	/^(defmethod write-object :around (object stream)$/;"	f
write-packet	slime/contrib/swank-mit-scheme.scm	/^(define (write-packet message out)$/;"	f
write-port-file	slime/contrib/swank-mit-scheme.scm	/^(define (write-port-file portnumber filename)$/;"	f
write-string	slime/xref.lisp	/^(define-caller-pattern write-string (form &optional form &key (:star form)) :lisp)$/;"	f
write-to-string	slime/xref.lisp	/^(define-caller-pattern write-to-string (form &key (:star form)) :lisp)$/;"	f
write-value	practicals-1.0.3/Chapter24/binary-data.lisp	/^(defgeneric write-value (type stream value &key)$/;"	f
write-value	practicals-1.0.3/Chapter24/binary-data.lisp	/^(defmethod write-value ((type symbol) stream value &key)$/;"	f
xref	slime/swank.lisp	/^(defslimefun xref (type name)$/;"	f
xref-file	slime/xref.lisp	/^(defun xref-file (filename &optional (clear-tables t) (verbose *xref-verbose*))$/;"	f
xref-files	slime/xref.lisp	/^(defun xref-files (&rest files)$/;"	f
xref-locations	slime/swank-openmcl.lisp	/^(defun xref-locations (relation name &optional (inverse nil))$/;"	f
xref-result	slime/swank-allegro.lisp	/^(defun xref-result (fspecs)$/;"	f
xref-results	slime/swank-abcl.lisp	/^(defun xref-results (symbols)$/;"	f
xref-results	slime/swank-clisp.lisp	/^(defun xref-results (symbols)$/;"	f
xref-results	slime/swank-cmucl.lisp	/^(defun xref-results (contexts)$/;"	f
xref-results	slime/swank-lispworks.lisp	/^(defun xref-results (dspecs)$/;"	f
xref>elisp	slime/swank.lisp	/^(defun xref>elisp (xref)$/;"	f
y-or-n-p	slime/xref.lisp	/^(define-caller-pattern y-or-n-p (control-string (:star form)) :lisp)$/;"	f
y-or-n-p-in-emacs	slime/swank.lisp	/^(defun y-or-n-p-in-emacs (format-string &rest arguments)$/;"	f
year	practicals-1.0.3/Chapter25/id3v2.lisp	/^(defun year (id3) (get-text-info id3 "TYE" "TYER" "TDRC"))$/;"	f
yes-or-no-p	slime/xref.lisp	/^(define-caller-pattern yes-or-no-p (control-string (:star form)) :lisp)$/;"	f
zerop	slime/xref.lisp	/^(define-caller-pattern zerop (form) :lisp)$/;"	f
zo	Session.vim	/^normal zo$/;"	m
zt	Session.vim	/^normal! zt$/;"	m
